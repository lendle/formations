{"version":3,"sources":["bootstrap.ts","formation/PlanePosition.ts","drawing/AbstractDrawer.ts","store/types.ts","constants.ts","geometry/Polar.ts","geometry/Box.ts","drawing/planedrawers.ts","drawing/slotdatafuns.ts","drawing/PlanesDrawer.ts","drawing/FormationDrawer.ts","components/FormationComponent.tsx","util/approxeq.ts","formation/lapwrapper.ts","formation/lap.js","formation/slotify.ts","formation/buildSlots.ts","formation/components/Component.ts","formation/components/Round.ts","formation/components/Whacker.ts","formation/components/Base.ts","formation/AbstractSlotCollection.ts","formation/buildFormation.ts","selectors/getSlotOptions.ts","formation/planes.ts","formation/buildPlanes.ts","selectors/index.ts","formation/planeify.ts","components/FormationContainer.ts","components/config/PanelContext.tsx","components/config/Select.tsx","components/config/SettingsPanel.tsx","components/config/Slots.tsx","store/actions.ts","components/config/Planes.tsx","components/config/View.tsx","components/config/Panels.tsx","components/config/ConfigDrawer.tsx","serviceWorker.js","store/reducer.ts","index.tsx","components/App.tsx"],"names":["install","PlanePosition","AbstractDrawer","group","this","Slotting","PlaneType","ColorOption","NumberOption","ShowOption","FormationType","PI","Math","TAU","Polar","radius","theta","Object","classCallCheck","unspin","concat","other","r1","t1","r2","t2","sqrt","cos","atan2","sin","plus","rotate","over","minus","s","floor","Box","x0","y0","x1","y1","createClass","key","value","p","min","x","y","max","b","get","PLANE_SCALE_FACTOR","positionLabels","_positionLabels","defineProperty","LEAD","LT","RT","w","l","line","d3","d","OtterDrawer","_this","otterPoints","doorPoints","slotCoords","toConsumableArray","map","flatMap","planeSlotId","box","scale","g","append","attr","text","plane","position","SkyvanDrawer","_this2","skyvanPoints","redLine","style","planeDrawers","_planeDrawers","OTTER","SKYVAN","buildOrderFill","_ref","stop","buildOrder","formationSlot","domain","toString","planeFill","filter","_","i","includes","radialFill","_ref2","offset","fillFunction","colorBy","BUILD_ORDER","PLANE","RADIAL","labelFunction","numberBy","SLOT_NUM_BY_PLANE","byPlaneSlotId","formationSlotId","scaledCoord","point","type","HD","flip","scaledPosition","_ref3","formation","scaledOffset","_ref4","arc","scaledPos","dockAngle","outerRadius","innerRadius","startAngle","d3theta","endAngle","planeX","planeY","highlight","transition","ease","overshoot","unhighlight","addSlot","fill","label","classed","on","call","slotG","circle","updateSlot","select","transitionOut","exit","t","remove","PlanesDrawer","args","p2c","planes","show","viewConfig","_ref$formation","FORMATION","PLANES","positions","Map","idx","all","length","abs","BOTH","coord","planeCoordinates","slotsByPlane","Array","from","d3Group","slots","slicedToArray","slotData","selectAll","data","join","enter","each","_ref5","nodes","draw","undefined","_ref6","selection","planeId","baseIds","baseLabel","reduce","_ref7","union","translate","FormationDrawer","flipX","FormationComponent","svg","allGrp","wrapper","zoom","formationDrawer","planesDrawer","parseInt","scaleExtent","transform","translateBy","width","height","duration","withGroup","formationBox","props","planeBox","zoomToBox","cx","cy","_this3","react_default","a","createElement","ref","element","React","Component","approxeq","eps","arguments","Number","EPSILON","combineScoreFuns","_len","funs","_key","fallback","val","fun","lapwrapper","as","bs","scoreFun","Error","badScores","score","Infinity","console","warn","result","dim","cost","cost_matrix","j","i1","j1","sum","unassignedfound","imin","prvnumfree","f","i0","k","freerow","j2","endofpath","last","low","up","h","umin","usubmin","v2","BIG","epsilon","rowsol","Int32Array","colsol","u","Float64Array","v","numfree","free","collist","matches","pred","loopcnt","lapcost","row","col","lap","memo","has","set","every","r","Set","size","allScores","error","slotPlane","formationSlotIds","slot","reverseBuildOrder","jr","slotJr","filledSlots","baseIdIndex","findIndex","id","slotNumOffset","checkSlot","slotPosition","waiting","range","pos","rotation","apply","parents","parent","maxBuildOrder","Round","left","right","possibleConstructorReturn","getPrototypeOf","firstRun","_prrd","c","prrd","ceil","_positionRadiusRotationDockAngle","dockPosition","leftDockPosition","rightDockPosition","dockDistance","distanceFrom","_Round$__computeRadiu","__computeRadiusTheta","angleDelta","angleTo","iters","iter","lower","upper","mid","ss","Whacker","dock","hand","_this$dock","_this$dock2","psuedoSlots","_left","_right","invisibleSlots","_this$_prrd","fixedRotation","Base","_rotation","AbstractSlotCollection","_slots","computeSlots","slotsInRing","baseSize","ring","podLines","round","bridges","addRings","rings","completeRings","nextRingSlots","dockPositions","base","component","isPod","firstPods","numBridges","bridgeNum","secondPods","bridgeSecondPods","secondPod","nextDockPositions","slotGroups","slotsPerGroup","groupsWithExtraSlot","nextRing","groupNum","slotsToFill","totalSlotsInGroup","priorSlots","leftHandSlots","rightHandSlots","whackers","push","FormationImpl","components","allSlots","adjustedSlot","HU","objectSpread","parentToChildren","child","forEach","componentToWaiting","children","numWaiting","find","slotRadi","expand","createSelector","state","formationConfig","planesConfig","_planesConfig$filter$","NONE","slotting","planeMin","FILL","planeMax","fixedMin","PlaneImpl","_AbstractSlotCollecti","inherits","reverse","countFilledSlots","filledPlanes","_ref10","_ref11","slotUnfilledPlanes","unfilledPlanes","slotsRemaining","slotsPerPlane","lead","littlePlanes","littlePlaneLabels","minSlotsPerPlane","extras","filledLead","_ref8","remainingFilled","_ref9","_ref12","getSlots","getSlotOptions","getBaseSize","getFormation","flat","getPlanes","slotsMap","_ref13","_ref14","getAllSlots","planeAssignments","slotted","unslotted","planeArray","slotId","diff","componentTheta","componentPosition","penalty","slotIds","planeify","planeSlotAssignments","slotify","planeIdToSortedFormationSlotIds","d3Rollup","pa","sort","formationSlotIdToByPlaneSlotId","slice","acc","connect","createContext","expanded","setExpanded","useStyles","makeStyles","theme","root","margin","spacing","unit","minWidth","Select","onSet","opts","desc","classes","core_index_es","className","onChange","e","target","native","isMobile","opt","makeOpts","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","secondary","form","display","flexWrap","formControl","SettingsPanel","name","heading1","heading2","_useContext","useContext","PanelContext","ExpansionPanel_default","event","isExpanded","square","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","ExpansionPanelDetails_default","autoComplete","alignItems","slider","paddingLeft","paddingRight","formationTypeDesc","_formationTypeDesc","HD_ABOVE","slotsOptions","formationType","dispatch","onFormationSlotsSet","formationSlots","onBaseSizeSet","onSetFormationType","_props$slotsOptions","slotItems","formationTypes","slotForm","variant","gutterBottom","Slider_default","step","Fragment","config_SettingsPanel","typeDescriptions","_typeDescriptions","PlaneMenu","_slottingDescriptions","planeConfig","setters","onPlaneSlottingSet","onPlaneTypeSet","onPlaneSlotsSet","types","SPLIT","slottingDescriptions","slottings","planeType","setPlaneType","setPlaneSlots","setPlaneSlotting","Planes_PlaneMenu","colorBys","DEFAULT","colorByDesc","_colorByDesc","numberBys","SLOT_NUM","numberByDesc","_numberByDesc","showOptions","showOptionDesc","_showOptionDesc","onSetColorBy","setColorBy","onSetNumberBy","setNumberBy","onSetShow","setShow","Panels","_React$useState","useState","_React$useState2","Provider","config_Slots","config_Planes","config_View","drawer","breakpoints","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","flexGrow","content","flexDirection","ConfigDrawer","mobileOpen","setMobileOpen","handleDrawerToggle","AppBar_default","Toolbar_default","IconButton_default","aria-label","onClick","Menu_default","noWrap","PictureAsPdf_default","Hidden_default","smUp","implementation","SwipeableDrawer_default","open","onOpen","onClose","paper","ModalProps","keepMounted","xsDown","Drawer_default","Boolean","window","location","hostname","match","initialPlaneState","rootReducer","combineReducers","action","createMuiTheme","useNextVariants","store","createStore","reducer","composeWithDevTools","ReactDOM","render","es","CssBaseline_default","index_es","config_ConfigDrawer","FormationContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b69a7fcc.chunk.js","sourcesContent":["import { install } from \"@material-ui/styles\"\n\ninstall()\n","enum PlanePosition {\n    LEAD='lead',\n    LT = 'lt',\n    RT = 'rt'\n}\n\nexport default PlanePosition","import { Drawer } from \"./interfaces\"\n\nexport default abstract class AbstractDrawer<Args, ReturnArgs>\n  implements Drawer<Args, ReturnArgs> {\n  group!: d3.Selection<SVGGElement, {}, null, undefined>\n\n  withGroup(group: d3.Selection<SVGGElement, {}, null, undefined>): this {\n    this.group = group\n    return this\n  }\n\n  abstract draw(args: Args, transition: any): ReturnArgs\n}\n","import PlanePosition from \"../formation/PlanePosition\"\n\nexport enum Slotting {\n  SPLIT,\n  FILL\n}\n\nexport enum PlaneType {\n  NONE,\n  OTTER,\n  SKYVAN\n}\n\nexport enum ColorOption {\n  DEFAULT,\n  PLANE,\n  BUILD_ORDER,\n  RADIAL\n}\n\nexport enum NumberOption {\n  SLOT_NUM,\n  SLOT_NUM_BY_PLANE,\n  BUILD_ORDER\n}\n\nexport enum ShowOption {\n  FORMATION,\n  PLANES,\n  BOTH\n}\n\nexport enum FormationType {\n  HD,\n  HD_ABOVE,\n  HU\n}\n\nexport interface PlaneState {\n  position: PlanePosition\n  label: string\n  slotting: Slotting\n  type: PlaneType\n  slots: number\n}\n\nexport interface FormationConfigState {\n  slots: number\n  baseSize: number\n  type: FormationType\n}\n\nexport interface ViewConfigState {\n  colorBy: ColorOption\n  numberBy: NumberOption\n  show: ShowOption\n}\n\nexport const SET_PLANE_SLOTTING = \"SET_PLANE_SLOTTING\"\ninterface SetPlaneSlottingAction {\n  type: typeof SET_PLANE_SLOTTING\n  position: PlanePosition\n  slotting: Slotting\n}\n\nexport const SET_PLANE_TYPE = \"SET_PLANE_TYPE\"\ninterface SetPlaneTypeAction {\n  type: typeof SET_PLANE_TYPE\n  position: PlanePosition\n  planeType: PlaneType\n}\n\nexport const SET_PLANE_SLOTS = \"SET_PLANE_SLOTS\"\ninterface SetPlaneSlotsAction {\n  type: typeof SET_PLANE_SLOTS\n  position: PlanePosition\n  slots: number\n}\nexport type PlanesConfigActionTypes =\n  | SetPlaneSlottingAction\n  | SetPlaneTypeAction\n  | SetPlaneSlotsAction\n\nexport const SET_FORMATION_SLOTS = \"SET_FORMATION_SLOTS\"\ninterface SetFormationSlotsAction {\n  type: typeof SET_FORMATION_SLOTS\n  slots: number\n}\nexport const SET_FORMATION_TYPE = \"SET_FORMATION_TYPE\"\ninterface SetFormationTypeAction {\n  type: typeof SET_FORMATION_TYPE\n  formationType: FormationType\n}\nexport const SET_BASE_SIZE = \"SET_BASE_SIZE\"\ninterface SetBaseSizeAction {\n  type: typeof SET_BASE_SIZE\n  baseSize: number\n}\nexport type FormationConfigActionTypes =\n  | SetFormationSlotsAction\n  | SetFormationTypeAction\n  | SetBaseSizeAction\n\nexport const SET_COLOR_BY = \"SET_COLOR_BY\"\ninterface SetColorByAction {\n  type: typeof SET_COLOR_BY\n  colorBy: ColorOption\n}\nexport const SET_NUMBER_BY = \"SET_NUMBER_BY\"\ninterface SetNumberByAction {\n  type: typeof SET_NUMBER_BY\n  numberBy: NumberOption\n}\n\nexport const SET_SHOW = \"SET_SHOW\"\ninterface SetShowAction {\n  type: typeof SET_SHOW\n  show: ShowOption\n}\nexport type ViewConfigActionTypes =\n  | SetColorByAction\n  | SetNumberByAction\n  | SetShowAction\n","export const PI = Math.PI\nexport const TAU = 2 * PI\nexport const SCALE_FACTOR = 80\n","import { PI, TAU } from \"../constants\"\n\n// polar coordinate from origin (center of base)\nexport default class Polar {\n  radius: number\n  theta: number\n  constructor(radius: number, theta: number) {\n    this.radius = radius\n    this.theta = Polar.unspin(theta)\n  }\n\n  toString() {\n    return `(r${this.radius},∠${this.theta / TAU}τ)`\n  }\n\n  //https://math.stackexchange.com/questions/1365622/adding-two-polar-vectors\n  plus(other: Polar) {\n    const { radius: r1, theta: t1 } = this\n    const { radius: r2, theta: t2 } = other\n    return new Polar(\n      Math.sqrt(r1 * r1 + r2 * r2 + 2 * r1 * r2 * Math.cos(t2 - t1)),\n      t1 + Math.atan2(r2 * Math.sin(t2 - t1), r1 + r2 * Math.cos(t2 - t1))\n    )\n  }\n\n  minus(other: Polar) {\n    return this.plus(other.rotate(PI))\n  }\n\n  rotate(theta: number) {\n    return new Polar(this.radius, this.theta + theta)\n  }\n\n  //flip coordinate over over\n  flip(over: number) {\n    return new Polar(this.radius, -this.theta - 2 * over)\n  }\n\n  // distance from other point\n  distanceFrom(other: Polar) {\n    return this.minus(other).radius\n  }\n\n  angleFrom(other: Polar) {\n    return this.minus(other).theta\n  }\n\n  angleTo(other: Polar) {\n    return other.minus(this).theta\n  }\n\n  scale(s: number) {\n    return new Polar(this.radius * s, this.theta)\n  }\n\n  // d3 treats theta = 0 as up, but in high school, theta = 0 is right\n  // also, d3 treats increasing theta as rotating clockwise, hs went counter clock wise\n  // this maps a highschool polar angle to a d3 polar angle\n  get d3theta() {\n    return Polar.unspin(-this.theta + PI / 2)\n  }\n\n  get x() {\n    return this.radius * Math.cos(this.theta)\n  }\n\n  //svg treats positive y as going down from top of page\n  get y() {\n    return -this.radius * Math.sin(this.theta)\n  }\n\n  // map theta back to [0, 2PI)\n  static unspin(theta: number) {\n    const t = Math.floor(theta / (2 * PI))\n    return theta - t * 2 * PI\n  }\n}\n","import Polar from \"./Polar\"\n\nexport class Box {\n  x0: number\n  y0: number\n  x1: number\n  y1: number\n  constructor(x0: number, y0: number, x1: number, y1: number) {\n    this.x0 = x0\n    this.y0 = y0\n    this.x1 = x1\n    this.y1 = y1\n  }\n\n  get cx(): number {\n    return (this.x0 + this.x1) / 2\n  }\n  get cy(): number {\n    return (this.y0 + this.y1) / 2\n  }\n\n  get width(): number {\n    return this.x1 - this.x0\n  }\n\n  get height(): number {\n    return this.y1 - this.y0\n  }\n\n  //since browser/d3 coordinates flip Y\n  flipY(): Box {\n    return new Box(this.x0, -this.y1, this.x1, -this.y0)\n  }\n\n  flipX(): Box {\n    return new Box(-this.x1, this.y0, -this.x0, this.y1)\n  }\n\n  expand(p: Polar): Box {\n    return new Box(\n      Math.min(this.x0, p.x),\n      Math.min(this.y0, p.y),\n      Math.max(this.x1, p.x),\n      Math.max(this.y1, p.y)\n    )\n  }\n\n  translate(p: Polar): Box {\n    return new Box(this.x0 + p.x, this.y0 + p.y, this.x1 + p.x, this.y1 + p.y)\n  }\n\n  union(b: Box): Box {\n    return new Box(\n      Math.min(this.x0, b.x0),\n      Math.min(this.y0, b.y0),\n      Math.max(this.x1, b.x1),\n      Math.max(this.y1, b.y1)\n    )\n  }\n\n  scale(s: number): Box {\n    return new Box(this.x0 * s, this.y0 * s, this.x1 * s, this.y1 * s)\n  }\n}\n","import { PlaneDrawer, SlottedPlane } from \"./interfaces\"\nimport * as d3 from \"d3\"\nimport { Selection, BaseType } from \"d3\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport { PlaneType } from \"../store/types\"\nimport { SlotData, NumDict } from \"../formation/interfaces\"\nimport { Box } from \"../geometry/Box\"\n\nconst PLANE_SCALE_FACTOR = 40\n\ntype XY = {\n  x: number;\n  y: number;\n}\n\nconst positionLabels = {\n  [PlanePosition.LEAD]: \"Lead\",\n  [PlanePosition.LT]: \"Left Trail\",\n  [PlanePosition.RT]: \"Right Trail\"\n}\n\nconst w = 1.5\nconst l = 6.5\n\nconst line = d3\n  .line<XY>()\n  .x(d => d.x * PLANE_SCALE_FACTOR)\n  .y(d => d.y * PLANE_SCALE_FACTOR)\n\nexport class OtterDrawer implements PlaneDrawer {\n  private otterPoints = [\n    { x: -w, y: -l },\n    { x: w, y: -l },\n    { x: w, y: l },\n    { x: -w, y: l },\n    { x: -w, y: -l }\n  ]\n\n  private doorPoints = [{ x: -w, y: l - 6 }, { x: -w, y: l - 2 }]\n\n  /**\n   *      23 22\n   *      21 20\n   *      19 18\n   *      17 16\n   *      15 14\n   *   6  13 12\n   *   5\n   *   4  9 11\n   *   3  8 10\n   *   2  7\n   *   1\n   *   0\n   */\n  private slotCoords = [\n    //floaters\n    ...d3.range(7).map(y => ({ x: -2, y: 6 - y })),\n    //first row in door\n    ...d3.range(3).map(y => ({ x: -1, y: 3.5 - y })),\n    //2nd row in door\n    ...d3.range(2).map(y => ({ x: 0, y: 3 - y })),\n    //divers\n    ...d3.range(6).flatMap(y => [{ x: 0.5, y: -y }, { x: -0.5, y: -y }])\n  ]\n  draw(g: Selection<SVGGElement, SlottedPlane, BaseType, any>) {\n    g.append(\"path\").attr(\"d\", line(this.otterPoints)!)\n    g.append(\"path\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", line(this.doorPoints)!)\n    g.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"dominant-baseline\", \"central\")\n      .attr(\"x\", 0)\n      .attr(\"y\", (-l + 0.5) * PLANE_SCALE_FACTOR)\n      .text(d => positionLabels[d.plane.position])\n  }\n\n  x = (d: SlotData) => this.slotCoords[d.planeSlotId].x * PLANE_SCALE_FACTOR\n  y = (d: SlotData) => this.slotCoords[d.planeSlotId].y * PLANE_SCALE_FACTOR\n\n  box = new Box(-w - 1, -l, w, l).scale(PLANE_SCALE_FACTOR)\n}\n\nexport class SkyvanDrawer implements PlaneDrawer {\n  private skyvanPoints = [\n    { x: -w, y: -l },\n    { x: w, y: -l },\n    { x: w, y: l },\n    { x: -w, y: l },\n    { x: -w, y: -l }\n  ]\n\n  private doorPoints = [{ x: -w, y: l }, { x: w, y: l }]\n  private redLine = [{ x: -w, y: l - 4 }, { x: w, y: l - 4 }]\n\n  /**\n   *      23\n   *    21  22\n   *    19  20\n   *    17  18\n   *    15  16\n   *    13  14\n   *    11  12\n   *     9  10\n   *   ---------\n   *\n   *   6   7   8\n   *   3   4   5\n   *   0   1   2\n   *\n   */\n  private slotCoords = [\n    //1st row\n    ...d3\n      .range(3)\n      .flatMap(y => [\n        { x: -1, y: 6 - y },\n        { x: 0, y: 6 - y },\n        { x: 1, y: 6 - y }\n      ]),\n    // the rest on back\n    ...d3.range(8).flatMap(y => [{ x: -0.5, y: 2 - y }, { x: 0.5, y: 2 - y }])\n  ]\n  draw(g: Selection<SVGGElement, SlottedPlane, BaseType, any>) {\n    g.append(\"path\").attr(\"d\", line(this.skyvanPoints)!)\n    g.append(\"path\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", line(this.doorPoints)!)\n\n    g.append(\"path\")\n      .attr(\"stroke-width\", 2)\n      .style(\"stroke\", \"red\")\n      .attr(\"d\", line(this.redLine)!)\n    g.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"dominant-baseline\", \"central\")\n      .attr(\"x\", 0)\n      .attr(\"y\", (-l + 1) * PLANE_SCALE_FACTOR)\n      .text(d => positionLabels[d.plane.position])\n  }\n\n  x = (d: SlotData) => this.slotCoords[d.planeSlotId].x * PLANE_SCALE_FACTOR\n  y = (d: SlotData) => this.slotCoords[d.planeSlotId].y * PLANE_SCALE_FACTOR\n\n  box = new Box(-w, -l, w, l).scale(PLANE_SCALE_FACTOR)\n}\n\nexport const planeDrawers: NumDict<PlaneDrawer> = {\n  [PlaneType.OTTER]: new OtterDrawer(),\n  [PlaneType.SKYVAN]: new SkyvanDrawer()\n}\n","import { SlotData } from \"../formation/interfaces\"\nimport * as d3 from \"d3\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport { SCALE_FACTOR, TAU, PI } from \"../constants\"\nimport { BaseType } from \"d3\"\nimport { ColorOption, NumberOption, FormationType } from \"../store/types\"\nimport { planeDrawers } from \"./planedrawers\"\nimport Polar from \"../geometry/Polar\"\n\nexport type SlotDataFun = (d: SlotData) => any\n\nconst stringRange = (stop: number): string[] =>\n  d3.range(stop).map(x => x.toString())\n\nconst buildOrderFill = ({ formationSlot: { buildOrder } }: SlotData) =>\n  d3.scaleOrdinal(d3.schemePaired).domain(stringRange(12))(\n    (buildOrder - 1).toString()\n  )\nconst planeFill = (d: SlotData) =>\n  d3\n    .scaleOrdinal(d3.schemePaired.filter((_, i) => [0, 2, 4].includes(i)))\n    .domain([PlanePosition.LEAD, PlanePosition.LT, PlanePosition.RT])(\n    d.plane.position\n  )\n\nconst radialFill = ({ formationSlot }: SlotData) => {\n  const theta = formationSlot.offset.plus(formationSlot.position).theta / TAU\n  return d3.interpolateRainbow(theta)\n}\n\nexport const fillFunction = (colorBy: ColorOption): SlotDataFun => {\n  switch (colorBy) {\n    case ColorOption.BUILD_ORDER:\n      return buildOrderFill\n    case ColorOption.PLANE:\n      return planeFill\n    case ColorOption.RADIAL:\n      return radialFill\n    default:\n      return () => null\n  }\n}\n\nexport const labelFunction = (numberBy: NumberOption) => {\n  switch (numberBy) {\n    case NumberOption.BUILD_ORDER:\n      return (d: SlotData) => d.formationSlot.buildOrder\n    case NumberOption.SLOT_NUM_BY_PLANE:\n      return (d: SlotData) => d.byPlaneSlotId + 1\n    default:\n      return (d: SlotData) => d.formationSlotId + 1\n  }\n}\n\n/**\n * wraps label, replacing label with \"B\" for base slots\n * @param label label function\n */\nexport const baseLabel = (label: SlotDataFun) => (d: SlotData) =>\n  d.formation.baseIds.includes(d.formationSlotId) ? \"B\" : label(d)\n\nconst scaledCoord = (point: Polar, type: FormationType) =>\n  (type === FormationType.HD ? point.flip(PI / 2) : point).scale(SCALE_FACTOR)\n\nconst scaledPosition = ({\n  formationSlot: { position },\n  formation: { type }\n}: SlotData) => scaledCoord(position, type)\n\nconst scaledOffset = ({\n  formationSlot: { offset },\n  formation: { type }\n}: SlotData) => scaledCoord(offset, type)\n\nexport const arc = (d: SlotData) => {\n  const scaledPos = scaledPosition(d)\n  const dockAngle = d.formationSlot.dockAngle\n  return d3.arc()({\n    outerRadius: scaledPos.radius,\n    innerRadius: scaledPos.radius,\n    startAngle: scaledPos.d3theta - dockAngle,\n    endAngle: scaledPos.d3theta + dockAngle\n  })\n}\n\nexport const x = (d: SlotData) => scaledPosition(d).x\nexport const y = (d: SlotData) => scaledPosition(d).y\nexport const translate = (d: SlotData) =>\n  `translate(${scaledOffset(d).x},${scaledOffset(d).y})`\n\nexport const planeX = (d: SlotData) => planeDrawers[d.plane.type].x(d)\nexport const planeY = (d: SlotData) => planeDrawers[d.plane.type].y(d)\n\nexport const highlight = (d: SlotData) => {\n  d3.selectAll(`[formationSlotId=\"${d.formationSlotId}\"].slot circle`)\n    .transition()\n    .ease(d3.easeBack.overshoot(3))\n    .attr(\"r\", 20)\n}\nexport const unhighlight = (d: SlotData) => {\n  d3.selectAll(`[formationSlotId=\"${d.formationSlotId}\"].slot circle`)\n    .transition()\n    .ease(d3.easeBack.overshoot(3))\n    .attr(\"r\", 16)\n}\n\nexport const addSlotGroup = <E extends BaseType>(\n  selection: d3.Selection<E, SlotData, SVGGElement, any>,\n  x: SlotDataFun,\n  y: SlotDataFun,\n  fill: SlotDataFun,\n  label: SlotDataFun\n) => {\n  return selection\n    .append(\"g\")\n    .classed(\"slot\", true)\n    .on(\"mouseover\", highlight)\n    .on(\"mouseout\", unhighlight)\n    .attr(\"formationSlotId\", d => d.formationSlotId)\n    .call(slotG =>\n      slotG\n        .append(\"circle\")\n        .attr(\"cx\", x)\n        .attr(\"cy\", y)\n        .attr(\"r\", 16)\n        .attr(\"fill\", fill)\n    )\n    .call(slotG =>\n      slotG\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"central\")\n        .attr(\"x\", x)\n        .attr(\"y\", y)\n        .text(label)\n    )\n}\n\nexport const addSlot = <E extends BaseType>(\n  g: d3.Selection<E, SlotData, SVGGElement, any>,\n  x?: SlotDataFun,\n  y?: SlotDataFun,\n  fill?: SlotDataFun,\n  label?: SlotDataFun\n) => {\n  return g\n    .append(\"g\")\n    .classed(\"slot\", true)\n    .on(\"mouseover\", highlight)\n    .on(\"mouseout\", unhighlight)\n    .attr(\"formationSlotId\", d => d.formationSlotId)\n    .call(slotG => {\n      slotG\n        .append(\"circle\")\n        .attr(\"r\", 16)\n        .call(circle => {\n          x && circle.attr(\"cx\", x)\n          y && circle.attr(\"cy\", y)\n          fill && circle.attr(\"fill\", fill)\n        })\n      slotG\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"central\")\n        .call(text => {\n          x && text.attr(\"x\", x)\n          y && text.attr(\"y\", y)\n          label && text.text(label)\n        })\n    })\n}\n\nexport const updateSlot = (\n  g: d3.Transition<SVGGElement, SlotData, SVGGElement, {}>,\n  x: SlotDataFun,\n  y: SlotDataFun,\n  fill: SlotDataFun,\n  label: SlotDataFun\n) => {\n  g.select(\"g.slot circle\")\n    .attr(\"cx\", x)\n    .attr(\"cy\", y)\n    .attr(\"fill\", fill)\n\n  g.select(\"g.slot text\")\n    .attr(\"x\", x)\n    .attr(\"y\", y)\n    .text(label)\n}\n\nexport const transitionOut = (\n  exit: d3.Selection<SVGGElement, any, SVGGElement, any>,\n  t: d3.Transition<BaseType, any, any, any>\n) =>\n  exit\n    .transition(t)\n    .attr(\"transform\", \"scale(0)\")\n    .remove()\n","import { Plane, SlotData, Formation } from \"../formation/interfaces\"\nimport AbstractDrawer from \"./AbstractDrawer\"\nimport * as d3 from \"d3\"\nimport { group as d3Group } from \"d3-array\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport { ViewConfigState, ShowOption, FormationType } from \"../store/types\"\nimport Polar from \"../geometry/Polar\"\nimport { PI, SCALE_FACTOR, TAU } from \"../constants\"\nimport {\n  planeX,\n  planeY,\n  addSlot,\n  updateSlot,\n  transitionOut,\n  SlotDataFun,\n  baseLabel\n} from \"./slotdatafuns\"\nimport { BaseType } from \"d3\"\nimport { planeDrawers } from \"./planedrawers\"\nimport { SlottedPlane } from \"./interfaces\"\nimport { Box } from \"../geometry/Box\"\nimport { ConsoleView } from \"react-device-detect\"\n\nconst planeCoordinates = ({\n  planes,\n  viewConfig: { show },\n  formation: { radius, type }\n}: PlanesArgs) => {\n  switch (show) {\n    case ShowOption.FORMATION:\n    case ShowOption.PLANES: {\n      //if we're only showing planes, then draw them in a line\n      const positions = planes.map(p => p.position)\n      const positionToCoordinate = new Map(\n        [PlanePosition.LT, PlanePosition.LEAD, PlanePosition.RT]\n          .filter(p => positions.includes(p))\n          .map((p, idx, all) => {\n            const offset = idx * 300 - (all.length - 1) * 150\n            return [p, new Polar(Math.abs(offset), offset >= 0 ? 0 : PI)]\n          })\n      )\n      return positionToCoordinate\n    }\n    case ShowOption.BOTH: {\n      //if we're showing planes and formation, draw outside of formation radius\n      const positionToCoordinate = new Map(\n        planes.map(({ position, theta }) => {\n          const coord = new Polar(\n            Math.max(7, radius + 3) * SCALE_FACTOR,\n            position === PlanePosition.LEAD ? TAU / 12 : theta\n          )\n          return [\n            position,\n            type === FormationType.HD ? coord.flip(PI / 2) : coord\n          ]\n        })\n      )\n      return positionToCoordinate\n    }\n  }\n}\n\ninterface PlanesArgs {\n  slots: SlotData[]\n  planes: Plane[]\n  formation: Formation\n  viewConfig: ViewConfigState\n  fill: SlotDataFun\n  label: SlotDataFun\n}\nexport default class PlanesDrawer extends AbstractDrawer<PlanesArgs, Box> {\n  draw(args: PlanesArgs, t: d3.Transition<BaseType, any, any, any>) {\n    const p2c = planeCoordinates(args)\n\n    const { fill, label } = args\n\n    // const label = (d: SlotData) => d.plane.slots[d.planeSlotId].jr.toString()\n\n    const slotsByPlane =\n      args.viewConfig.show === ShowOption.FORMATION\n        ? []\n        : Array.from(d3Group(args.slots, d => d.plane)).map(\n            ([plane, slotData]) => ({ plane, slotData })\n          )\n\n    this.group\n      .selectAll<SVGGElement, SlottedPlane>(\"g.plane\")\n      .data<SlottedPlane>(\n        slotsByPlane,\n        d => `${d.plane.position}.${d.plane.type}`\n      )\n      .join(\n        enter =>\n          enter\n            .append(\"g\")\n            .classed(\"plane\", true)\n            .each(({ plane }, i, nodes) => {\n              //draw each plane frame\n              planeDrawers[plane.type].draw(d3.select(nodes[i]), t)\n            })\n            .attr(\"transform\", \"translate(0,0) scale(0)\"),\n        undefined,\n        exit => transitionOut(exit, t)\n      )\n      .transition(t)\n      .attr(\n        \"transform\",\n        ({ plane: { position } }) =>\n          `translate(${p2c.get(position)!.x},${p2c.get(position)!.y}) scale(1)` //transition planes from center\n      )\n      .selection()\n      .selectAll<SVGGElement, SlotData>(\"g.slot\")\n      .data(\n        d => d.slotData,\n        d => `${d.formationSlotId}.${d.planeId}.${d.plane.type}`\n      )\n      .join(\n        addSlot, //add slots on enter without initial coordinates or label\n        undefined,\n        exit => transitionOut(exit, t)\n      )\n      .transition(t)\n      .attr(\"transform\", \"scale(1)\")\n      .call(slotG => {\n        updateSlot(slotG, planeX, planeY, fill, baseLabel(label))\n      })\n\n    return slotsByPlane.reduce((box, { plane }) => {\n      return box.union(\n        planeDrawers[plane.type].box.translate(p2c.get(plane.position)!)\n      )\n    }, new Box(0, 0, 0, 0))\n    //   const c = p2c.get(plane.position)!\n\n    //   return box\n    // }, { x0: 0, y0: 0, x1: 0, y1:0})\n  }\n}\n","import { SlotData } from \"../formation/interfaces\"\nimport AbstractDrawer from \"./AbstractDrawer\"\nimport { ViewConfigState, ShowOption, FormationType } from \"../store/types\"\nimport {\n  x,\n  y,\n  translate,\n  updateSlot,\n  addSlot,\n  arc,\n  transitionOut,\n  SlotDataFun\n} from \"./slotdatafuns\"\nimport { Transition, BaseType } from \"d3\"\nimport { SCALE_FACTOR } from \"../constants\"\nimport { Box } from \"../geometry/Box\"\n\ninterface FormationArgs {\n  slots: SlotData[]\n  viewConfig: ViewConfigState\n  fill: SlotDataFun\n  label: SlotDataFun\n}\nexport default class FormationDrawer extends AbstractDrawer<\n  FormationArgs,\n  Box\n> {\n  draw(\n    { slots, viewConfig, fill, label }: FormationArgs,\n    t: Transition<BaseType, any, any, any>\n  ) {\n    const slotData: SlotData[] =\n      viewConfig.show === ShowOption.PLANES ? [] : slots\n\n    this.group\n      .selectAll<SVGGElement, SlotData>(\"g.slotgroup\")\n      .data<SlotData>(slotData, d => d.formationSlotId.toString())\n      .join(\n        enter =>\n          enter\n            .append(\"g\")\n            .attr(\"class\", \"slotgroup\") // slot plus grips\n            .attr(\"transform\", \"translate(0,0) scale(0)\") //start scaled down\n            .call(g => {\n              g.append(\"path\") //add the grips path\n                .attr(\"class\", \"grips\")\n                .attr(\"d\", arc)\n              addSlot(g, x, y, fill, label) //add the slot circle with fill\n            }),\n        undefined, //pass through, since we want to transition both new and old points\n        exit => transitionOut(exit, t)\n      )\n      .transition(t)\n      .attr(\"transform\", d => translate(d) + \" scale(1)\") //scale up translate\n      .call(g => {\n        //basically a no op for data that just entered\n        g.select(\"path\").attr(\"d\", arc)\n        updateSlot(g, x, y, fill, label)\n      })\n\n    if (viewConfig.show === ShowOption.PLANES) {\n      return new Box(-1, -1, 1, 1).scale(SCALE_FACTOR)\n    }\n\n    const box = slotData[0].formation.box.scale(SCALE_FACTOR)\n    return slotData[0].formation.type === FormationType.HD ? box.flipX() : box\n  }\n}\n","import React from \"react\"\nimport * as d3 from \"d3\"\nimport \"./FormationComponent.css\"\n\nimport { Formation, Plane, SlotData } from \"../formation/interfaces\"\nimport PlanesDrawer from \"../drawing/PlanesDrawer\"\nimport { ViewConfigState } from \"../store/types\"\nimport FormationDrawer from \"../drawing/FormationDrawer\"\nimport { SlotDataFun } from \"../drawing/slotdatafuns\"\nimport { BaseType } from \"d3\"\nimport { Box } from \"../geometry/Box\"\n\ntype Transition = d3.Transition<BaseType, any, any, any>\n\ninterface FormationProps {\n  formation: Formation\n  planes: Plane[]\n  slots: SlotData[]\n  viewConfig: ViewConfigState\n  fill: SlotDataFun\n  label: SlotDataFun\n}\nexport default class FormationComponent extends React.Component<\n  FormationProps,\n  {}\n> {\n  svg!: d3.Selection<SVGSVGElement, {}, null, undefined>\n  allGrp!: d3.Selection<SVGGElement, {}, null, undefined>\n  wrapper!: d3.Selection<SVGGElement, {}, null, undefined>\n  zoom!: d3.ZoomBehavior<SVGSVGElement, {}>\n  formationDrawer!: FormationDrawer\n  planesDrawer!: PlanesDrawer\n\n  height() {\n    return parseInt(this.svg.style(\"height\"), 10)\n  }\n\n  width() {\n    return parseInt(this.svg.style(\"width\"), 10)\n  }\n\n  componentDidMount() {\n    this.wrapper = this.svg.append(\"g\")\n    this.allGrp = this.wrapper.append(\"g\")\n\n    this.zoom = d3\n      .zoom<SVGSVGElement, {}>()\n      .scaleExtent([0.25, 2])\n      .on(\"zoom\", () => this.wrapper.attr(\"transform\", d3.event.transform))\n\n    this.svg\n      .call(this.zoom) //allows user zoom\n      .call(this.zoom.translateBy, this.width() / 2, this.height() / 2) //set initial zoom  to center\n\n    //bounding box\n    // https://bl.ocks.org/iamkevinv/0a24e9126cd2fa6b283c6f2d774b69a2\n\n    const t = d3.transition().duration(1000) as Transition\n\n    this.formationDrawer = new FormationDrawer().withGroup(\n      this.allGrp.append(\"g\")\n    )\n    this.planesDrawer = new PlanesDrawer().withGroup(this.allGrp.append(\"g\"))\n\n    const formationBox = this.formationDrawer.draw(this.props, t)\n    const planeBox = this.planesDrawer.draw(this.props, t)\n\n    // console.log({ box, planeBox })\n\n    // this.allGrp\n    //   .append(\"rect\")\n    //   .attr(\"x\", planeBox.x0)\n    //   .attr(\"y\", planeBox.y0)\n    //   .attr(\"width\", planeBox.width)\n    //   .attr(\"height\", planeBox.height)\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"stroke-widht\", 1)\n    //   .attr(\"stroke\", \"black\")\n\n    this.zoomToBox(formationBox.union(planeBox), t)\n  }\n\n  componentDidUpdate() {\n    const t = d3.transition().duration(1000) as Transition\n    const formationBox = this.formationDrawer.draw(this.props, t)\n    const planeBox = this.planesDrawer.draw(this.props, t)\n\n    this.zoomToBox(formationBox.union(planeBox), t)\n  }\n\n  zoomToBox(box: Box, t: Transition) {\n    this.allGrp\n      .transition(t)\n      .attr(\"transform\", `translate(${-box.cx}, ${-box.cy})`)\n    this.svg\n      .transition(t)\n      .call(\n        this.zoom.transform,\n        d3.zoomIdentity\n          .translate(this.width() / 2, this.height() / 2)\n          .scale(\n            Math.min(this.width() / box.width, this.height() / box.height) *\n              0.95\n          )\n      )\n  }\n\n  render() {\n    return (\n      <svg\n        width={\"100%\"}\n        height={\"100%\"}\n        ref={element => (this.svg = d3.select(element!).attr(\"id\", \"svg\"))}\n      />\n    )\n  }\n}\n","export default function approxeq(\n  a: number,\n  b: number,\n  eps = Math.sqrt(Number.EPSILON)\n) {\n  return Math.abs(a - b) < eps\n}\n","import lap from \"./lap\"\n\ntype ScoreFun<A, B> = (a: A, b: B) => number\n\n//takes a scoreFun that takes an A and a B\n//and converts it to a function that takes i, j for i, j in [0, number of as/bs)\n//for use with lap()\nfunction cost<A, B>(as: A[], bs: B[], scoreFun: ScoreFun<A, B>) {\n  //memoize scoreFun\n  const memo = new Map<string, number>()\n  return (i: number, j: number): number => {\n    const key = `${i}.${j}`\n    if (!memo.has(key)) {\n      const a = as[i]\n      const b = bs[j]\n      memo.set(key, scoreFun(a, b))\n    }\n    return memo.get(key)!\n  }\n}\n\n/**\n * takes two arrays of things of equal length and a function that computes a score between a pair of those things\n * and assigns each thing in the first list to a thing in the second list, minimizing the sum of the scores of the assigned pairs\n * an\n * @param as\n * @param bs\n * @param scoreFun\n */\nfunction lapwrapper<A, B>(\n  as: A[],\n  bs: B[],\n  scoreFun: ScoreFun<A, B>\n): [A, B][] {\n  if (as.length !== bs.length) {\n    throw new Error(\"as and bs have diff lenghts\")\n  }\n\n  const badScores = as.flatMap(a =>\n    bs.flatMap(b => {\n      const score = scoreFun(a, b)\n      return score < 0 || score === Infinity ? [{ a, b, score }] : []\n    })\n  )\n\n  if (badScores.length > 0) {\n    console.warn(\"Scores should be non-negative and not infinity: \", badScores)\n  }\n\n  const result = lap(as.length, cost(as, bs, scoreFun))\n\n  if (\n    !result.row.every(r => r >= 0 && r < as.length) ||\n    new Set(result.row).size != as.length ||\n    result.cost === Infinity\n  ) {\n    const allScores = as.flatMap(a =>\n      bs.map(b => ({ a, b, score: scoreFun(a, b) }))\n    )\n    console.error(\"something's weird\", {\n      allScores,\n      result\n    })\n  }\n  // const assignments = result.col\n\n  // return Array.from(assignments).map((p: number, i: number) => {\n  //   const a = as[p]\n  //   const b = bs[i]\n  //   return [a, b]\n  // })\n\n  return Array.from(result.row).map((p: number, i: number) => {\n    const a = as[i]\n    const b = bs[p]\n    return [a, b]\n  })\n}\n\n/**\n * returns a function that (returns a function that) tries functions in funs(a,b) in order until it finds\n * a result that isn't undefined, and returns that. if nothing is found, fallback is used, which must be a propper\n * ScoreFun\n * @param funs score functions to try\n * @param fallback fallback score function\n */\nexport const combineScoreFuns = <A, B>(\n  ...funs: ((a: A, b: B) => number | undefined)[]\n) => (fallback: ScoreFun<A, B>) => (a: A, b: B) => {\n  for (let i = 0; i < funs.length; i++) {\n    const fun = funs[i]\n    const val = fun(a, b)\n    if (val) {\n      return val\n    }\n  }\n  return fallback(a, b)\n}\n\nexport default lapwrapper\n","//https://github.com/Fil/lap-jv\n/************************************************************************\n*\n*  lap.js -- ported to javascript from\n\n   lap.cpp\n   version 1.0 - 4 September 1996\n   author: Roy Jonker @ MagicLogic Optimization Inc.\n   e-mail: roy_jonker@magiclogic.com\n\n   Code for Linear Assignment Problem, according to\n\n   \"A Shortest Augmenting Path Algorithm for Dense and Sparse Linear\n    Assignment Problems,\" Computing 38, 325-340, 1987\n\n   by\n\n   R. Jonker and A. Volgenant, University of Amsterdam.\n\n*\n   PORTED TO JAVASCRIPT 2017-01-02 by Philippe Riviere(fil@rezo.net)\n   CHANGED 2016-05-13 by Yang Yong(yangyongeducation@163.com) in column reduction part according to\n   matlab version of LAPJV algorithm(Copyright (c) 2010, Yi Cao All rights reserved)--\n   https://www.mathworks.com/matlabcentral/fileexchange/26836-lapjv-jonker-volgenant-algorithm-for-linear-assignment-problem-v3-0:\n*\n*************************************************************************/\n\n/* This function is the jv shortest augmenting path algorithm to solve the assignment problem */\nexport default function lap(dim, cost) {\n  // input:\n  // dim        - problem size\n  // cost       - cost callback (or matrix)\n\n  // output:\n  // rowsol     - column assigned to row in solution\n  // colsol     - row assigned to column in solution\n  // u          - dual variables, row reduction numbers\n  // v          - dual variables, column reduction numbers\n\n  // convert the cost matrix (old API) to a callback (new API)\n  if (typeof cost === \"object\") {\n    var cost_matrix = cost;\n    cost = function (i, j) {\n      return cost_matrix[i][j];\n    };\n  }\n\n  var sum = 0;\n  {\n    let i1, j1;\n    for (i1 = 0; i1 < dim; i1++) {\n      for (j1 = 0; j1 < dim; j1++)\n        sum += cost(i1, j1);\n    }\n  }\n  const BIG = 10000 * (sum / dim);\n  const epsilon = sum / dim / 10000;\n  const rowsol = new Int32Array(dim),\n    colsol = new Int32Array(dim),\n    u = new Float64Array(dim),\n    v = new Float64Array(dim);\n  let unassignedfound;\n  /* row */\n  let i, imin, numfree = 0, prvnumfree, f, i0, k, freerow; // *pred, *free\n  /* col */\n  let j, j1, j2, endofpath, last, low, up; // *collist, *matches\n  /* cost */\n  let min, h, umin, usubmin, v2; // *d\n\n  const free = new Int32Array(dim); // list of unassigned rows.\n  const collist = new Int32Array(dim); // list of columns to be scanned in various ways.\n  const matches = new Int32Array(dim); // counts how many times a row could be assigned.\n  const d = new Float64Array(dim); // 'cost-distance' in augmenting path calculation.\n  const pred = new Int32Array(dim); // row-predecessor of column in augmenting/alternating path.\n\n  // init how many times a row will be assigned in the column reduction.\n  for (i = 0; i < dim; i++)\n    matches[i] = 0;\n\n  // COLUMN REDUCTION\n  for (\n    j = dim;\n    j--; // reverse order gives better results.\n\n  ) {\n    // find minimum cost over rows.\n    min = cost(0, j);\n    imin = 0;\n    for (i = 1; i < dim; i++)\n      if (cost(i, j) < min) {\n        min = cost(i, j);\n        imin = i;\n      }\n    v[j] = min;\n    if (++matches[imin] === 1) {\n      // init assignment if minimum row assigned for first time.\n      rowsol[imin] = j;\n      colsol[j] = imin;\n    } else if (v[j] < v[rowsol[imin]]) {\n      j1 = rowsol[imin];\n      rowsol[imin] = j;\n      colsol[j] = imin;\n      colsol[j1] = -1;\n    } else colsol[j] = -1; // row already assigned, column not assigned.\n  }\n\n  // REDUCTION TRANSFER\n  for (i = 0; i < dim; i++) {\n    if (\n      matches[i] === 0 // fill list of unassigned 'free' rows.\n    )\n      free[numfree++] = i;\n    else if (matches[i] === 1) {\n      // transfer reduction from rows that are assigned once.\n      j1 = rowsol[i];\n      min = BIG;\n      for (j = 0; j < dim; j++)\n        if (j !== j1)\n          if (cost(i, j) - v[j] < min + epsilon) min = cost(i, j) - v[j];\n      v[j1] = v[j1] - min;\n    }\n  }\n\n  // AUGMENTING ROW REDUCTION\n  let loopcnt = 0; // do-loop to be done twice.\n  do {\n    loopcnt++;\n\n    // scan all free rows.\n    // in some cases, a free row may be replaced with another one to be scanned next.\n    k = 0;\n    prvnumfree = numfree;\n    numfree = 0; // start list of rows still free after augmenting row reduction.\n    while (k < prvnumfree) {\n      i = free[k];\n      k++;\n\n      // find minimum and second minimum reduced cost over columns.\n      umin = cost(i, 0) - v[0];\n      j1 = 0;\n      usubmin = BIG;\n      for (j = 1; j < dim; j++) {\n        h = cost(i, j) - v[j];\n        if (h < usubmin)\n          if (h >= umin) {\n            usubmin = h;\n            j2 = j;\n          } else {\n            usubmin = umin;\n            umin = h;\n            j2 = j1;\n            j1 = j;\n          }\n      }\n\n      i0 = colsol[j1];\n      if (umin < usubmin + epsilon)\n        //         change the reduction of the minimum column to increase the minimum\n        //         reduced cost in the row to the subminimum.\n        v[j1] = v[j1] - (usubmin + epsilon - umin);\n      else if (i0 > -1) {\n        // minimum and subminimum equal.\n        // minimum column j1 is assigned.\n        // swap columns j1 and j2, as j2 may be unassigned.\n        j1 = j2;\n        i0 = colsol[j2];\n      }\n\n      // (re-)assign i to j1, possibly de-assigning an i0.\n      rowsol[i] = j1;\n      colsol[j1] = i;\n\n      if (i0 > -1)\n        if (umin < usubmin)\n          // minimum column j1 assigned earlier.\n          // put in current k, and go back to that k.\n          // continue augmenting path i - j1 with i0.\n          free[--k] = i0;\n        else\n          // no further augmenting reduction possible.\n          // store i0 in list of free rows for next phase.\n          free[numfree++] = i0;\n    }\n  } while (loopcnt < 2); // repeat once.\n\n  // AUGMENT SOLUTION for each free row.\n  for (f = 0; f < numfree; f++) {\n    freerow = free[f]; // start row of augmenting path.\n\n    // Dijkstra shortest path algorithm.\n    // runs until unassigned column added to shortest path tree.\n    for (j = dim; j--;) {\n      d[j] = cost(freerow, j) - v[j];\n      pred[j] = freerow;\n      collist[j] = j; // init column list.\n    }\n\n    low = 0; // columns in 0..low-1 are ready, now none.\n    up = 0; // columns in low..up-1 are to be scanned for current minimum, now none.\n    // columns in up..dim-1 are to be considered later to find new minimum,\n    // at this stage the list simply contains all columns\n    unassignedfound = false;\n    do {\n      if (up === low) {\n        // no more columns to be scanned for current minimum.\n        last = low - 1;\n\n        // scan columns for up..dim-1 to find all indices for which new minimum occurs.\n        // store these indices between low..up-1 (increasing up).\n        min = d[collist[up++]];\n        for (k = up; k < dim; k++) {\n          j = collist[k];\n          h = d[j];\n          if (h <= min) {\n            if (h < min) {\n              // new minimum.\n              up = low; // restart list at index low.\n              min = h;\n            }\n            // new index with same minimum, put on undex up, and extend list.\n            collist[k] = collist[up];\n            collist[up++] = j;\n          }\n        }\n        // check if any of the minimum columns happens to be unassigned.\n        // if so, we have an augmenting path right away.\n        for (k = low; k < up; k++)\n          if (colsol[collist[k]] < 0) {\n            endofpath = collist[k];\n            unassignedfound = true;\n            break;\n          }\n      }\n\n      if (!unassignedfound) {\n        // update 'distances' between freerow and all unscanned columns, via next scanned column.\n        j1 = collist[low];\n        low++;\n        i = colsol[j1];\n        h = cost(i, j1) - v[j1] - min;\n\n        for (k = up; k < dim; k++) {\n          j = collist[k];\n          v2 = cost(i, j) - v[j] - h;\n          if (v2 < d[j]) {\n            pred[j] = i;\n            if (v2 === min)\n              if (colsol[j] < 0) {\n                // new column found at same minimum value\n                // if unassigned, shortest augmenting path is complete.\n                endofpath = j;\n                unassignedfound = true;\n                break;\n              } else {\n                // else add to list to be scanned right away.\n                collist[k] = collist[up];\n                collist[up++] = j;\n              }\n            d[j] = v2;\n          }\n        }\n      }\n    } while (!unassignedfound);\n\n    // update column prices.\n    for (k = last + 1; k--;) {\n      j1 = collist[k];\n      v[j1] = v[j1] + d[j1] - min;\n    }\n\n    // reset row and column assignments along the alternating path.\n    do {\n      i = pred[endofpath];\n      colsol[endofpath] = i;\n      j1 = endofpath;\n      endofpath = rowsol[i];\n      rowsol[i] = j1;\n    } while (i !== freerow);\n  }\n\n  // calculate optimal cost.\n  let lapcost = 0;\n  for (i = dim; i--;) {\n    j = rowsol[i];\n    u[i] = cost(i, j) - v[j];\n    lapcost = lapcost + cost(i, j);\n  }\n\n  return {\n    cost: lapcost,\n    row: rowsol,\n    col: colsol,\n    u: u,\n    v: v\n  };\n}\n","import {\n  PlaneAssignment,\n  Formation,\n  Plane,\n  PlaenSlotAssignment\n} from \"./interfaces\"\nimport lapwrapper, { combineScoreFuns } from \"./lapwrapper\"\nimport * as d3 from \"d3\"\nimport PlanePosition from \"./PlanePosition\"\n\nconst slotPlane = (\n  plane: Plane,\n  formation: Formation,\n  formationSlotIds: number[]\n) => {\n  const baseScore = (formationSlotId: number, planeSlotId: number) => {\n    if (plane.position === PlanePosition.LEAD) {\n      const baseIdIndex = formation.baseIds.findIndex(\n        id => id === formationSlotId\n      )\n      return planeSlotId === plane.baseIds[baseIdIndex] //if baseIdIndex is undefined, this will be falsy\n        ? 0\n        : 10000\n    }\n  }\n\n  const score = (formationSlotId: number, planeSlotId: number) => {\n    const slot = formation.slots[formationSlotId]\n    const { reverseBuildOrder } = slot\n    const { jr } = plane.slots[planeSlotId]\n\n    const slotJr = slot.offset.plus(slot.position).y\n\n    return Math.abs(jr) * reverseBuildOrder * 100 - slotJr * jr + 1000\n  }\n\n  return lapwrapper(\n    formationSlotIds,\n    d3.range(plane.filledSlots),\n    plane.position === PlanePosition.LEAD\n      ? combineScoreFuns(baseScore)(score)\n      : score\n  ).map(([formationSlotId, planeSlotId]) => ({ formationSlotId, planeSlotId }))\n}\n\nexport default function slotify(\n  formation: Formation,\n  planes: Plane[],\n  planeAssignments: PlaneAssignment[]\n): PlaenSlotAssignment[] {\n  return planes.flatMap((plane, planeId) => {\n    const formationSlotIds = planeAssignments\n      .filter(plane => plane.planeId === planeId)\n      .map(({ formationSlotId }) => formationSlotId)\n\n    const planeSlotAssignments = slotPlane(plane, formation, formationSlotIds)\n\n    return planeSlotAssignments.map(({ formationSlotId, planeSlotId }) => ({\n      formationSlotId,\n      planeId,\n      planeSlotId\n    }))\n  })\n}\n","import { Formation, Plane, SlotData } from \"./interfaces\"\nimport planeify from \"./planeify\"\nimport slotify from \"./slotify\"\nimport { rollup as d3Rollup } from \"d3-array\"\n\nexport default (formation: Formation, planes: Plane[]): SlotData[] => {\n  const planeAssignments = planeify(formation, planes)\n  const planeSlotAssignments = slotify(formation, planes, planeAssignments)\n\n  const planeIdToSortedFormationSlotIds = d3Rollup(\n    planeAssignments,\n    pa =>\n      pa.map(({ formationSlotId }) => formationSlotId).sort((a, b) => a - b),\n    ({ planeId }) => planeId\n  )\n\n  const formationSlotIdToByPlaneSlotId = new Map(\n    planes.flatMap((_, planeId, planes) => {\n      const priorSlots = planes\n        .slice(0, planeId)\n        .reduce((acc, p) => acc + p.filledSlots, 0)\n      return (planeIdToSortedFormationSlotIds.get(planeId) || []).map(\n        (formationSlotId, i) => [formationSlotId, priorSlots + i]\n      )\n    })\n  )\n\n  return planeSlotAssignments.map(\n    ({ formationSlotId, planeId, planeSlotId }) => ({\n      formationSlotId,\n      formation,\n      formationSlot: formation.slots[formationSlotId],\n      planeId,\n      plane: planes[planeId],\n      planeSlotId,\n      byPlaneSlotId: formationSlotIdToByPlaneSlotId.get(formationSlotId)!\n    })\n  )\n}\n","import Polar from \"../../geometry/Polar\"\n\nimport { range } from \"d3\"\nimport { FormationSlot, ComponentSlot } from \"../interfaces\"\n\nexport default abstract class Component {\n  slots: number\n  slotNumOffset: number\n\n  constructor(slots: number, slotNumOffset: number) {\n    if (slots < 0) {\n      throw new Error(`slots should be non-negative, was ${slots}`)\n    }\n    this.slots = slots\n    this.slotNumOffset = slotNumOffset\n  }\n\n  checkSlot(slot: number) {\n    if (slot < 0 || slot >= this.slots)\n      throw new Error(`slot should be in [0, ${this.slots}), was ${slot}`)\n  }\n\n  slotData(slot: number): ComponentSlot {\n    this.checkSlot(slot)\n\n    return {\n      offset: this.position(),\n      position: this.slotPosition(slot),\n      dockAngle: this.dockAngle(),\n      buildOrder: this.buildOrder(slot) + this.waiting()\n    }\n  }\n\n  allSlots(): ComponentSlot[] {\n    return range(this.slots).map(slot => this.slotData(slot))\n  }\n\n  //returns position of slot *relative to position of component*\n  slotPosition(s: number, offset = false) {\n    this.checkSlot(s)\n    const pos = new Polar(\n      this.radius(),\n      this.rotation() - 2 * s * this.dockAngle()\n    )\n    return offset ? pos.plus(this.position()) : pos\n  }\n\n  //returns position of left hand of slot *relative to center of formation*\n  dockPosition(s: number) {\n    this.checkSlot(s)\n    return this.slotPosition(s)\n      .rotate(-this.dockAngle())\n      .plus(this.position())\n  }\n\n  //how long this component is waiting before building\n  waiting(): number {\n    return Math.max(\n      ...this.parents().map(\n        parent => parent.waiting() + parent.maxBuildOrder()\n      ),\n      0\n    )\n  }\n\n  // return build order for last slot to build\n  abstract maxBuildOrder(): number\n\n  //should return build order for slot\n  abstract buildOrder(slot: number): number\n\n  //returns radius of this component\n  abstract radius(): number\n\n  //returns center of this component\n  abstract position(): Polar\n\n  //returns rotation in theta of where to place first slot\n  abstract rotation(): number\n\n  //returns angle between slot position and dock position, i.e. half of wingspan angle\n  abstract dockAngle(): number\n\n  //components this component is docked\n  abstract parents(): Component[]\n}\n","import { PI, TAU } from \"../../constants\"\nimport Component from \"./Component\"\nimport Polar from \"../../geometry/Polar\"\n\ninterface Dock {\n  c: Component\n  s: number\n}\n\nexport type PRRD = {\n  position: Polar;\n  radius: number;\n  rotation: number;\n  dockAngle: number;\n}\n\nexport default class Round extends Component {\n  left: Dock\n  right: Dock\n  firstRun: boolean\n  private _prrd: PRRD | undefined\n  /*\n  left and right are left hand and right hand docks. \n  Should be an with properties\n    - c: component\n    - s: slot index\n  */\n  constructor(slots: number, slotNumOffset: number, left: Dock, right: Dock) {\n    super(slots, slotNumOffset)\n    this.left = left\n    this.right = right\n    this.firstRun = true\n  }\n\n  parents() {\n    return Array.from(new Set([this.left.c, this.right.c]))\n  }\n\n  get prrd() {\n    if (!this._prrd) {\n      this._prrd = Round._positionRadiusRotationDockAngle(\n        this.left.c.dockPosition(this.left.s),\n        this.right.c.dockPosition(this.right.s),\n        this.slots\n      )\n    }\n    return this._prrd\n  }\n\n  //computes the centroid position\n  //component radius, and component rotation\n  //position, radius, rotation, dockangle\n  /*\n  leftDockPosition - where component's left hand dock is\n  rightDockPosition - where component's right hand dock is\n  slots - number of slots in this component\n  // parentCentroid - centroid of parent component, or center of formation. Used to pick the orien\n  */\n  static _positionRadiusRotationDockAngle(\n    leftDockPosition: Polar,\n    rightDockPosition: Polar,\n    slots: number\n  ): PRRD {\n    const dockDistance = leftDockPosition.distanceFrom(rightDockPosition)\n    const { radius, theta } = Round.__computeRadiusTheta(slots, dockDistance)\n\n    const angleDelta = leftDockPosition.angleTo(rightDockPosition)\n    const position = leftDockPosition.plus(\n      new Polar(radius, angleDelta - (PI - theta) / 2)\n    )\n\n    //the rotation is where the first slot (docking w/ right hand) goes\n    // TAU - theta is the whole arc angle, and their position is 1/(2*slots) around\n    const dockAngle = (TAU - theta) / (2 * slots)\n    const rotation = position.angleTo(rightDockPosition) - dockAngle\n\n    return { position, radius, rotation, dockAngle }\n  }\n\n  position() {\n    return this.prrd.position\n  }\n\n  radius() {\n    return this.prrd.radius\n  }\n\n  rotation() {\n    return this.prrd.rotation\n  }\n\n  dockAngle() {\n    return this.prrd.dockAngle\n  }\n\n  maxBuildOrder() {\n    return Math.ceil(this.slots / 2)\n  }\n\n  buildOrder(slot: number) {\n    this.checkSlot(slot)\n\n    //build from the ends\n    return Math.min(slot + 1, this.slots - slot)\n  }\n\n  // computes radius and angle of cutoff for a circle with the side cut off\n  // with length of the remaining curve part = s\n  // and length of flat bit = d\n  // I think it's O(-log(eps))\n  static __computeRadiusTheta(\n    s: number,\n    d: number,\n    eps = Math.sqrt(Number.EPSILON)\n  ) {\n    if (d < 0 || d > s) {\n      console.error(`d: ${d}, s: ${s}`)\n      throw new Error(\"d must be in [0, s]\")\n    }\n    var iters = 0\n    //try picking theta between lower and upper\n    function iter(lower = 0, upper = PI): number {\n      if (iters >= 100) {\n        throw new Error(\"didn't converge\")\n      }\n      iters = iters + 1\n      const mid = (upper + lower) / 2\n      // if ((upper - lower) < eps) {\n      //   return mid\n      // }\n\n      //candidate theta = mid\n      //compute radius from theta\n      const r = d / (2 * Math.sin(mid / 2))\n      //compute s from radius, theta\n      const ss = r * (TAU - mid)\n\n      if (Math.abs(ss - s) < eps) {\n        return mid\n      }\n\n      //if computed s is too big, try a bigger theta, else try smaller\n      return ss > s ? iter(mid, upper) : iter(lower, mid)\n    }\n    //iter returns theta, compute radius\n    const theta = iter()\n    return {\n      radius: s / (TAU - iter()),\n      theta: theta\n    }\n  }\n}\n","import Component from \"./Component\"\nimport Round, { PRRD } from \"./Round\"\nimport Polar from \"../../geometry/Polar\"\n\ninterface Dock {\n  c: Component\n  s: number\n}\n\nexport default class Whacker extends Component {\n  dock: Dock\n  hand: string\n  private _prrd: PRRD | undefined\n\n  /*\n  slots - \n  dock - { component, slot } this whacker is docked on\n  hand - docked with 'left' or 'right'\n \n  modeled as part of a pod (Round docked on one person) with slots * 2 + 1 slots\n  */\n  constructor(slots: number, slotNumOffset: number, dock: Dock, hand: string) {\n    super(slots, slotNumOffset)\n    this.dock = dock\n\n    if (hand !== \"left\" && hand !== \"right\")\n      throw new Error(\"Hand should be 'left' or 'right'\")\n    this.hand = hand\n  }\n\n  parents() {\n    return [this.dock.c]\n  }\n\n  //left hand dock position of the imaginary pod\n  _left() {\n    const { c, s } = this.dock\n    return this.hand === \"left\"\n      ? c.dockPosition(s)\n      : c\n          .slotPosition(s)\n          .rotate(-3 * c.dockAngle()) //move 1.5 slots to the left\n          .plus(c.position())\n  }\n\n  //right hand dock position of the imaginary pod\n  _right() {\n    const { c, s } = this.dock\n    return this.hand === \"left\"\n      ? c\n          .slotPosition(s)\n          .rotate(c.dockAngle()) //move half a slot to the right\n          .plus(c.position())\n      : c.dockPosition(s)\n  }\n\n  get prrd() {\n    if (!this._prrd) {\n      const psuedoSlots = this.slots * 2 + 1\n\n      this._prrd = Round._positionRadiusRotationDockAngle(\n        this._left(),\n        this._right(),\n        psuedoSlots\n      )\n\n      if (this.hand === \"left\") {\n        const invisibleSlots = psuedoSlots - this.slots\n        const { rotation, dockAngle } = this._prrd\n        const fixedRotation = Polar.unspin(\n          rotation - invisibleSlots * 2 * dockAngle\n        ) //rotate two slots to the right\n        this._prrd.rotation = fixedRotation\n      }\n    }\n    return this._prrd\n  }\n\n  maxBuildOrder() {\n    return this.slots\n  }\n\n  buildOrder(slot: number) {\n    this.checkSlot(slot)\n    return this.hand === \"left\" ? this.slots - slot : slot + 1\n  }\n\n  position() {\n    return this.prrd.position\n  }\n\n  radius() {\n    return this.prrd.radius\n  }\n\n  rotation() {\n    return this.prrd.rotation\n  }\n\n  dockAngle() {\n    return this.prrd.dockAngle\n  }\n}\n","import Polar from \"../../geometry/Polar\"\nimport Component from \"./Component\"\nimport { PI, TAU } from \"../../constants\"\n\nexport default class Base extends Component {\n  _rotation: number\n  constructor(slots: number, rotation = (3 * PI) / 2) {\n    super(slots, 0)\n    this._rotation = rotation\n  }\n\n  //angle to the first slot\n  rotation() {\n    return this._rotation\n  }\n\n  position() {\n    return new Polar(0, 0)\n  }\n\n  // circumference = 2 PI r\n  // circumference = # slots\n  radius() {\n    return this.slots / TAU\n  }\n\n  //angle between slot position and dock position\n  dockAngle() {\n    return TAU / (this.slots * 2)\n  }\n\n  maxBuildOrder(): number {\n    return 1\n  }\n\n  buildOrder(slot: number) {\n    this.checkSlot(slot)\n    return 1\n  }\n\n  parents() {\n    return []\n  }\n}\n","import { BaseSlot, SlotCollection, NumDict } from \"./interfaces\"\nimport arrayToDict from \"../util/arrayToDict\"\n\nexport default abstract class AbstractSlotCollection<S extends BaseSlot>\n  implements SlotCollection<S> {\n  private _slots?: S[]\n\n  protected abstract computeSlots(): S[]\n\n  get slots(): S[] {\n    if (!this._slots) {\n      this._slots = this.computeSlots()\n    }\n\n    return this._slots\n  }\n}\n","import Round from \"./components/Round\"\nimport Whacker from \"./components/Whacker\"\nimport Base from \"./components/Base\"\nimport Component from \"./components/Component\"\nimport AbstractSlotCollection from \"./AbstractSlotCollection\"\nimport { FormationSlot, Formation } from \"./interfaces\"\nimport * as d3 from \"d3\"\nimport { FormationType } from \"../store/types\"\nimport { PI } from \"../constants\"\nimport { Box } from \"../geometry/Box\"\n\ntype Ring = Component[]\ntype Dock = { c: Component; s: number }\n\n/**\n * computes the number of slots in a ring\n * @param {Number} ring index of ring,\n *         ring 0 = base,\n *         ring 1 = 1st pods\n *         ring 2 = 2nd pods\n *         ring 3 = if baseSize > 4, bridges, otherwise just pods on out\n *         ring 4 = if baseSize > 4, then pods on bridges in ring 3, otherwise just pods on podLines\n *         ring 5... pod lines on out\n */\nconst slotsInRing = (baseSize: number, ring: number): number => {\n  const podLines = Math.round(baseSize / 2)\n  const bridges = podLines > 2\n  if (ring === 0) {\n    return baseSize\n  }\n  if (ring === 1) {\n    return baseSize + podLines * 5\n  }\n  if (ring === 2) {\n    return baseSize + podLines * 10\n  }\n  if (ring === 3) {\n    return (\n      slotsInRing(baseSize, ring - 1) + (bridges ? 3 * podLines : 5 * podLines)\n    )\n  }\n  if (ring === 4) {\n    return (\n      slotsInRing(baseSize, ring - 1) + (bridges ? 5 * podLines : 5 * baseSize)\n    )\n  }\n  return (\n    slotsInRing(baseSize, 4) +\n    (ring - 4) * (bridges ? 5 * podLines : 5 * baseSize)\n  )\n}\n\n/**\n * gets dock positions for next ring given currently filled rings\n * @param rings an array of rings, 0th starting at base and going out\n */\nconst nextDockPositions = (\n  baseSize: number,\n  rings: Ring[]\n): { left: Dock; right: Dock }[] => {\n  if (rings.length > 10) {\n    throw new Error(\"somethings fucky\")\n  }\n  const bridges = baseSize !== 4\n\n  if (rings.length === 1) {\n    const base = rings[0][0]\n\n    return d3.range(0, baseSize, 2).map(slot => ({\n      left: { c: base, s: slot },\n      right: { c: base, s: (slot + baseSize - 1) % baseSize }\n    }))\n  }\n  if (\n    !bridges ||\n    rings.length === 2 ||\n    rings.length === 4 ||\n    rings.length >= 6\n  ) {\n    // if we're not using bridges\n    // or last ring (1) is 1st pods (and we need 2nd pods)\n    // or last ring (3) is bridges (and we need 2nd pods on those bridges)\n    // or we're way out (last ring >= 5)\n    // then we want pods on everything in the last ring\n    return rings[rings.length - 1].map(component => {\n      const isPod = component.slots === 5\n      return {\n        left: { c: component, s: 1 + (isPod ? 1 : 0) },\n        right: { c: component, s: 0 + (isPod ? 1 : 0) }\n      }\n    })\n  }\n  if (bridges && rings.length === 3) {\n    // ring 3 is bridges if there are bridges\n    const firstPods = rings[1]\n    const numBridges = firstPods.length\n    return d3.range(numBridges).map(bridgeNum => ({\n      left: { c: firstPods[(bridgeNum + 1) % numBridges], s: 0 },\n      right: { c: firstPods[bridgeNum], s: 3 }\n    }))\n  }\n  if (bridges && rings.length === 5) {\n    // if bridges, ring 5 is 2nd pods on bridges\n    const secondPods = rings[2]\n    const bridgeSecondPods = rings[4]\n    return secondPods\n      .flatMap((secondPod, idx) => [secondPod, bridgeSecondPods[idx]])\n      .map(component => {\n        return {\n          left: { c: component, s: component.slots === 5 ? 2 : 1 }, //5 -> pod, !5 (3) -> bridge\n          right: { c: component, s: component.slots === 5 ? 1 : 0 }\n        }\n      })\n  }\n  throw new Error(\"mmm\")\n}\n\n/**\n * this takes an array of rings starting with at least the Base, and\n * adds rings until all slots are included\n * @param {*} rings array of rings. (a ring is an array of components)\n */\nconst addRings = (slots: number, baseSize: number, rings: Ring[]): Ring[] => {\n  const completeRings = rings.length - 1\n\n  //compute slots in next ring\n  const nextRingSlots =\n    Math.min(slots, slotsInRing(baseSize, completeRings + 1)) -\n    slotsInRing(baseSize, completeRings)\n\n  if (nextRingSlots <= 0) return rings //we're done\n\n  const dockPositions = nextDockPositions(baseSize, rings)\n\n  // here a 'group' is either a pod, or, if there are less than 5 slots, two whackers\n  const slotGroups = dockPositions.length\n\n  const slotsPerGroup = Math.floor(nextRingSlots / slotGroups)\n  const groupsWithExtraSlot = nextRingSlots % slotGroups\n\n  const nextRing: Ring = dockPositions.flatMap(\n    ({ left, right }, groupNum): Ring => {\n      //slots in this group\n      const slotsToFill =\n        slotsPerGroup + (groupNum < groupsWithExtraSlot ? 1 : 0)\n      const isPod = left.c === right.c //left and right docking on same component is a pod, else bridge\n      const totalSlotsInGroup = isPod ? 5 : 3\n\n      const priorSlots =\n        slotsInRing(baseSize, completeRings) + //number of slots in prior rings\n        slotsPerGroup * groupNum + //number of slots in prior groups in this ring\n        Math.min(groupsWithExtraSlot, groupNum) //an extra slot per prior group, up to groupsWithExtraSlot\n\n      if (slotsToFill === totalSlotsInGroup) {\n        //if we have to fill the whole group, it's a pod\n        return [new Round(totalSlotsInGroup, priorSlots, left, right)]\n      } else {\n        //whackers\n        const leftHandSlots = Math.floor(slotsToFill / 2)\n        const rightHandSlots = leftHandSlots + (slotsToFill % 2) //if odd number, right hand whacker gets the extra\n        const whackers = []\n        if (rightHandSlots > 0) {\n          whackers.push(\n            new Whacker(rightHandSlots, priorSlots, right, \"right\")\n          )\n        }\n        if (leftHandSlots > 0) {\n          whackers.push(\n            new Whacker(\n              leftHandSlots,\n              priorSlots + rightHandSlots,\n              left,\n              \"left\"\n            )\n          )\n        }\n\n        return whackers\n      }\n    }\n  )\n  //recurse, add more rings to this prior plus this ring\n  return addRings(slots, baseSize, [...rings, nextRing])\n}\n\nclass FormationImpl extends AbstractSlotCollection<FormationSlot>\n  implements Formation {\n  components: Component[]\n  type: FormationType\n  constructor(components: Component[], type: FormationType) {\n    super()\n    this.components = components\n    this.type = type\n  }\n\n  protected computeSlots(): FormationSlot[] {\n    const reverseBuildOrder = this.reverseBuildOrder()\n    return this.components\n      .flatMap(c => c.allSlots())\n      .map((s, idx) => {\n        const adjustedSlot =\n          this.type === FormationType.HU\n            ? s\n            : {\n                ...s,\n                position: s.position.flip(PI / 2),\n                offset: s.offset.flip(PI / 2)\n              }\n        return { ...adjustedSlot, reverseBuildOrder: reverseBuildOrder[idx] }\n      })\n  }\n\n  get baseIds(): number[] {\n    return this.components\n      .find(c => c instanceof Base)!\n      .allSlots()\n      .map((_, idx) => idx)\n  }\n\n  get radius(): number {\n    const slotRadi = this.slots.map(\n      ({ position, offset }) => position.plus(offset).radius\n    )\n    return Math.max(...slotRadi)\n  }\n\n  get box(): Box {\n    return this.slots.reduce(\n      (b, { position, offset }) => b.expand(position.plus(offset)),\n      new Box(0, 0, 0, 0)\n    )\n  }\n\n  reverseBuildOrder() {\n    const parentToChildren = new Map(\n      this.components.map(component => [component, [] as Component[]])\n    )\n\n    this.components\n      .flatMap(child => child.parents().map(parent => ({ parent, child }))) //get all parent child pairs (many to many)\n      .forEach(({ parent, child }) =>\n        parentToChildren.get(parent)!.push(child)\n      )\n\n    const componentToWaiting = new Map<Component, number>()\n\n    const waiting = (component: Component): number => {\n      if (!componentToWaiting.has(component)) {\n        const children = parentToChildren.get(component)!\n        const numWaiting = Math.max(\n          ...children.map(child => waiting(child)! + child.maxBuildOrder()),\n          0\n        )\n\n        componentToWaiting.set(component, numWaiting)\n      }\n      return componentToWaiting.get(component)!\n    }\n    // waiting(this.components[0])\n    return this.components.flatMap(c => {\n      return d3\n        .range(c.slots)\n        .map(s => waiting(c) + c.maxBuildOrder() - c.buildOrder(s))\n    })\n  }\n}\n\n/**\n * Builds a formation using the following rules until we run out of slots\n *    1) Start with the base\n *    2) Add first pods on every other base slot, starting with the slot going up jump run moving left\n *    3) Add second pods on first pods\n *    4) If base size > 4, build bridges between frist pods\n *    5) If there are bridges, build 2nd pods on bridges\n *    6) Build pods on each pod line on out to infinity!\n *\n * If there are not enough slots to complete a ring of pods/bridges, then build whackers\n *\n * @param {Number} slots slots in this formation\n * @param {Number} baseSize\n * @returns an array of Components\n */\nexport default function buildFormation(\n  slots: number,\n  baseSize: number,\n  type: FormationType\n): Formation {\n  return new FormationImpl(\n    addRings(slots, baseSize, [[new Base(baseSize)]]).flat(),\n    type\n  )\n}\n","import { createSelector } from \"reselect\"\nimport {\n  PlaneType,\n  Slotting,\n  FormationConfigState,\n  PlaneState\n} from \"../store/types\"\nimport { AppState } from \"../store/reducer\"\n\nexport const getFormationConfig = (state: AppState): FormationConfigState =>\n  state.formationConfig\nexport const getPlanesConfig = (state: AppState): PlaneState[] =>\n  state.planesConfig\n\nexport type SlotOptions = {\n  slots: number;\n  min: number;\n  max: number;\n}\n\nconst slotOptions = (\n  formationConfig: { baseSize: number; slots: number },\n  planesConfig: PlaneState[]\n): SlotOptions => {\n  const { min, max } = planesConfig\n    .filter(({ type }) => type !== PlaneType.NONE)\n    .map(({ slotting, slots }) => ({\n      //compute min/max slots on each plane\n      planeMin: slotting === Slotting.FILL ? slots : 0,\n      planeMax: slots\n    }))\n    .reduce(\n      ({ min, max }, { planeMin, planeMax }) => ({\n        //add min/max slots for all planes\n        min: min + planeMin,\n        max: max + planeMax\n      }),\n      { min: 0, max: 0 }\n    )\n\n  const fixedMin = Math.max(min, formationConfig.baseSize)\n\n  return {\n    min: fixedMin,\n    max,\n    slots: Math.max(Math.min(formationConfig.slots, max), fixedMin)\n  }\n}\n\n/**\n * computes min, max, and current number of slots based on plane and formation config\n *\n * if current slots is outside of [min, max], it is set to min or max\n */\nexport default createSelector(\n  [getFormationConfig, getPlanesConfig],\n  slotOptions\n)\n","import AbstractSlotCollection from \"./AbstractSlotCollection\"\nimport { PlaneSlot, Plane } from \"./interfaces\"\nimport PlanePosition from \"./PlanePosition\"\nimport { TAU } from \"../constants\"\nimport * as d3 from \"d3\"\nimport { PlaneType } from \"../store/types\"\n\n// abstract class AbstractPlane extends AbstractSlotCollection<PlaneSlot>\n//   implements Plane {\n//   position: PlanePosition\n//   filledSlots: number\n\n//   constructor(position: PlanePosition, filledSlots: number) {\n//     super()\n//     this.position = position\n//     this.filledSlots = filledSlots\n//   }\n\n//   get theta() {\n//     switch (this.position) {\n//       case PlanePosition.LEAD:\n//         return (3 * TAU) / 12\n//       case PlanePosition.LT:\n//         return (7 * TAU) / 12\n//       case PlanePosition.RT:\n//         return (11 * TAU) / 12\n//     }\n//   }\n// }\n\nexport class PlaneImpl extends AbstractSlotCollection<PlaneSlot>\n  implements Plane {\n  position: PlanePosition\n  filledSlots: number\n  type: PlaneType\n\n  constructor(position: PlanePosition, filledSlots: number, type: PlaneType) {\n    super()\n    this.position = position\n    this.filledSlots = filledSlots\n    this.type = type\n  }\n\n  protected computeSlots(): PlaneSlot[] {\n    return d3\n      .range(24)\n      .map(x => ({ jr: x - 14 }))\n      .reverse()\n  }\n\n  get theta() {\n    switch (this.position) {\n      case PlanePosition.LEAD:\n        return (3 * TAU) / 12\n      case PlanePosition.LT:\n        return (7 * TAU) / 12\n      case PlanePosition.RT:\n        return (11 * TAU) / 12\n    }\n  }\n\n  get baseIds() {\n    switch (this.type) {\n      case PlaneType.OTTER:\n        return [7, 8, 9, 10, 11, 4, 3, 2, 5, 12]\n      case PlaneType.SKYVAN:\n        return [3, 4, 5, 8, 7, 6, 0, 1, 9, 10]\n      default:\n        return d3.range(10)\n    }\n  }\n\n  get videoId() {\n    switch (this.type) {\n      case PlaneType.OTTER:\n        return 0\n      case PlaneType.SKYVAN:\n        return 2\n      default:\n        return 10\n    }\n  }\n\n  get superFloatId() {\n    switch (this.type) {\n      case PlaneType.OTTER:\n        return 1\n      case PlaneType.SKYVAN:\n        return 0\n      default:\n        return 11\n    }\n  }\n}\n","import { PlaneState, PlaneType, Slotting } from \"../store/types\"\nimport { Plane } from \"./interfaces\"\nimport PlanePosition from \"./PlanePosition\"\nimport { PlaneImpl } from \"./planes\"\n\ntype FilledPlane = {\n  position: PlanePosition;\n  filledSlots: number;\n}\n\nconst countFilledSlots = (filledPlanes: FilledPlane[]) =>\n  filledPlanes.reduce((s, { filledSlots }) => s + filledSlots, 0)\n\n/**\n *\n * @param unfilledPlanes array of objects representing planes with slots left.\n *                       should have properties plane (lead, lt, rt), slots (total slots in plane)\n * @param slotsRemaining slots to put in unfilledPlanes\n * @param baseSize if unfilledPlanes includes lead plane, at least `baseSize` should go in it\n * @param filledPlanes array of planes already full, or partially full if slotsRemaining = 0\n */\nconst slotUnfilledPlanes = (\n  unfilledPlanes: PlaneState[],\n  slotsRemaining: number,\n  baseSize: number,\n  filledPlanes: FilledPlane[]\n): FilledPlane[] => {\n  if (unfilledPlanes.length === 0) {\n    return filledPlanes\n  }\n\n  const slotsPerPlane = slotsRemaining / unfilledPlanes.length\n\n  // if spreading remaing slots evently doesn't put enough in the lead plane for the base, fill that now\n  const lead = unfilledPlanes.find(\n    ({ position }) => position === PlanePosition.LEAD\n  )\n  if (lead && baseSize > slotsPerPlane) {\n    return slotUnfilledPlanes(\n      unfilledPlanes.filter(({ position }) => position !== PlanePosition.LEAD),\n      slotsRemaining - baseSize,\n      baseSize,\n      [{ position: PlanePosition.LEAD, filledSlots: baseSize }, ...filledPlanes]\n    )\n  }\n\n  //get planes with fewer total slots than slotsPerPlane and fill em up\n  const littlePlanes = unfilledPlanes\n    .filter(({ slots }) => slots < slotsPerPlane)\n    .map(({ position, slots }) => ({ position, filledSlots: slots }))\n\n  if (littlePlanes.length) {\n    const littlePlaneLabels = littlePlanes.map(({ position }) => position)\n    return slotUnfilledPlanes(\n      unfilledPlanes.filter(\n        ({ position }) => !littlePlaneLabels.includes(position)\n      ),\n      slotsRemaining - countFilledSlots(littlePlanes),\n      baseSize,\n      [...filledPlanes, ...littlePlanes]\n    )\n  }\n\n  // if we've gotten this far, there is room for at least slotsPerPlane on each unfilledPlane\n  const minSlotsPerPlane = Math.floor(slotsPerPlane)\n  const extras = slotsRemaining % minSlotsPerPlane\n\n  // if the lead plane is still in the mix, then always put one less on that plane\n  if (extras > 0 && lead) {\n    const filledLead = {\n      position: PlanePosition.LEAD,\n      filledSlots: minSlotsPerPlane\n    }\n    return slotUnfilledPlanes(\n      unfilledPlanes.filter(({ position }) => position !== PlanePosition.LEAD),\n      slotsRemaining - minSlotsPerPlane,\n      baseSize,\n      [filledLead, ...filledPlanes]\n    )\n  }\n\n  //okay now fill the rest. the first `extras` planes will get an extra\n  const remainingFilled = unfilledPlanes.map(({ position }, i) => ({\n    position,\n    filledSlots: minSlotsPerPlane + (extras > i ? 1 : 0)\n  }))\n\n  //phew\n  return [...filledPlanes, ...remainingFilled]\n}\n\n/**\n *\n * @param baseSize\n * @param planesConfig\n * @param slotOptions\n */\nconst filledPlanes = (\n  slots: number,\n  baseSize: number,\n  planesConfig: PlaneState[]\n): FilledPlane[] => {\n  const filledPlanes = planesConfig\n    .filter(\n      ({ type, slotting }) =>\n        type !== PlaneType.NONE && slotting === Slotting.FILL\n    )\n    .map(({ position, slots }) => ({ position, filledSlots: slots }))\n\n  const unfilledPlanes = planesConfig.filter(\n    ({ type, slotting }) =>\n      type !== PlaneType.NONE && slotting !== Slotting.FILL\n  )\n\n  return slotUnfilledPlanes(\n    unfilledPlanes,\n    slots - countFilledSlots(filledPlanes),\n    baseSize,\n    filledPlanes\n  )\n}\n\nexport default (\n  slots: number,\n  baseSize: number,\n  planesConfig: PlaneState[]\n): Plane[] => {\n  const slotsMap = new Map(\n    filledPlanes(slots, baseSize, planesConfig).map(\n      ({ position, filledSlots }) => [position, filledSlots]\n    )\n  )\n\n  return planesConfig.map(\n    ({ position, type }) =>\n      new PlaneImpl(position, slotsMap.get(position)!, type)\n  )\n}\n","import { createSelector } from \"reselect\"\nimport buildSlots from \"../formation/buildSlots\"\nimport buildFormation from \"../formation/buildFormation\"\nimport getSlotOptions from \"./getSlotOptions\"\nimport buildPlanes from \"../formation/buildPlanes\"\nimport { AppState } from \"../store/reducer\"\nimport { PlaneType, FormationType } from \"../store/types\"\n\nexport { default as getSlotOptions } from \"./getSlotOptions\"\n\nconst getSlots = (state: AppState) => getSlotOptions(state).slots\nconst getBaseSize = (state: AppState): number => state.formationConfig.baseSize\nconst getFormationType = (state: AppState): FormationType =>\n  state.formationConfig.type\nconst getFilteredPlanesConfig = (state: AppState) => {\n  return state.planesConfig.filter(({ type }) => type !== PlaneType.NONE)\n}\n\nexport const getFormation = createSelector(\n  [getSlots, getBaseSize, getFormationType],\n  buildFormation\n)\nexport const getPlanes = createSelector(\n  [getSlots, getBaseSize, getFilteredPlanesConfig],\n  buildPlanes\n)\nexport const getAllSlots = createSelector(\n  [getFormation, getPlanes],\n  buildSlots\n)\n","import { Formation, Plane, PlaneAssignment } from \"./interfaces\"\nimport PlanePosition from \"./PlanePosition\"\nimport Polar from \"../geometry/Polar\"\nimport { PI } from \"../constants\"\nimport approxeq from \"../util/approxeq\"\nimport lapwrapper, { combineScoreFuns } from \"./lapwrapper\"\nimport { range } from \"d3\"\n\n/**\n * Puts people in planes\n * @param formation\n * @param planes lead assumed to be first\n */\nexport default function planeify(\n  formation: Formation,\n  planes: Plane[]\n): PlaneAssignment[] {\n  if (planes[0].position !== PlanePosition.LEAD) {\n    throw new Error(\"lead plane should be first\")\n  }\n  const LEAD_ID = 0\n\n  //slotted[planeId] = array of slot indexes for plane planeId\n  const slotted = planes.map(() => [] as number[])\n\n  // ### rule based slotting ###\n  // base in lead f\n\n  const baseScores = (slotId: number, planeId: number) => {\n    if (formation.baseIds.includes(slotId)) {\n      return planeId === LEAD_ID ? 0 : 1000\n    }\n  }\n\n  //todo add superfloat\n\n  // ### end rule based slotting ###\n\n  //using linear assignment problem formulation\n\n  const angleScore = (slotId: number, planeId: number) => {\n    const slot = formation.slots[slotId]\n    const plane = planes[planeId]\n    const slotPosition = slot.position.plus(slot.offset)\n    const diff = Polar.unspin(slotPosition.theta - plane.theta)\n\n    //penalize if component is on other side of jumprun from plane\n    //componentTheta is component angle rotated 90 right\n    // if > pi, right side of jump run. if < pi, left side of jump run\n    const componentTheta = Polar.unspin(slot.offset.theta - PI / 2)\n    const componentPosition =\n      approxeq(componentTheta, 0) || approxeq(componentTheta, PI)\n        ? PlanePosition.LEAD\n        : componentTheta > PI\n        ? PlanePosition.RT\n        : PlanePosition.LT\n\n    const penalty =\n      componentPosition === PlanePosition.LEAD ||\n      plane.position === PlanePosition.LEAD ||\n      componentPosition === plane.position\n        ? 0\n        : PI\n\n    return Math.min(diff, 2 * PI - diff) + penalty\n  }\n\n  //   const distScore = (slotId: number, planeId: number) => {\n  //     const slot = formation.allSlots[slotId]\n  //     const plane = planes[planeId]\n  //     return Math.abs(slot.position.plus(slot.offset).distanceFrom(new Polar(100, plane.theta)))\n  //   }\n\n  const unslotted = range(formation.slots.length)\n  const planeArray = planes.flatMap((plane, planeId) =>\n    (Array(plane.filledSlots) as number[]).fill(planeId)\n  )\n\n  const assignments = lapwrapper(\n    unslotted,\n    planeArray,\n    combineScoreFuns(baseScores)(angleScore)\n  )\n\n  assignments.forEach(([slotId, planeId]) => slotted[planeId].push(slotId))\n\n  return slotted.flatMap((slotIds, planeId) =>\n    slotIds.map(slotId => ({ formationSlotId: slotId, planeId }))\n  )\n}\n","import { connect } from \"react-redux\"\nimport FormationComponent from \"./FormationComponent\"\nimport { getFormation, getPlanes, getAllSlots } from \"../selectors\"\nimport { AppState } from \"../store/reducer\"\nimport { fillFunction, labelFunction } from \"../drawing/slotdatafuns\"\n\nconst mapStateToProps = (state: AppState) => ({\n  formation: getFormation(state),\n  planes: getPlanes(state),\n  slots: getAllSlots(state),\n  viewConfig: state.viewConfig,\n  fill: fillFunction(state.viewConfig.colorBy),\n  label: labelFunction(state.viewConfig.numberBy)\n})\n\nexport default connect(mapStateToProps)(FormationComponent)\n\n// console.log({debounceRender})\n\n// export default connect(\n//     mapStateToProps\n// )(debounceRender.debounceRender(FormationComponent, 100))\n","import React from \"react\"\n\ntype PanelContextType = {\n  expanded: string;\n  setExpanded: (panel: string) => void;\n}\nexport default React.createContext<PanelContextType>({\n  expanded: \"\",\n  setExpanded: (_: String) => {\n    return\n  }\n})\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/styles\"\nimport { FormControl, InputLabel, Select, MenuItem } from \"@material-ui/core\"\nimport { isMobile } from \"react-device-detect\"\nimport { NumDict } from \"../../formation/interfaces\"\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing.unit,\n    minWidth: 180\n  }\n}))\n\nfunction makeOpts(opts: number[], desc?: NumDict<string>) {\n  return opts.map(opt =>\n    isMobile ? (\n      <option key={opt} value={opt}>\n        {desc ? desc[opt] : opt}\n      </option>\n    ) : (\n      <MenuItem key={opt} value={opt}>\n        {desc ? desc[opt] : opt}\n      </MenuItem>\n    )\n  )\n}\n\ntype Props = {\n  label: string;\n  opts: number[];\n  desc?: NumDict<string>;\n  value: number;\n  onSet: (value: number) => void;\n}\nexport default (props: Props) => {\n  const { label, value, onSet, opts, desc } = props\n  const classes = useStyles()\n  return (\n    <FormControl className={classes.root}>\n      <InputLabel>{label}</InputLabel>\n      <Select\n        value={value}\n        onChange={e => onSet(parseInt(e.target.value))}\n        native={isMobile}\n      >\n        {makeOpts(opts, desc)}\n      </Select>\n    </FormControl>\n  )\n}\n","import ExpansionPanel from \"@material-ui/core/ExpansionPanel\"\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\"\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\"\nimport Typography from \"@material-ui/core/Typography\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport { makeStyles } from \"@material-ui/styles\"\nimport React, { ReactNode, useContext } from \"react\"\nimport PanelContext from \"./PanelContext\"\n\nconst useStyles = makeStyles(theme => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"50%\",\n    flexShrink: 0\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary\n  },\n  form: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 180\n  }\n}))\n\ntype Props = {\n  name: string;\n  heading1: string;\n  heading2: string;\n  children?: ReactNode;\n}\nconst SettingsPanel = (props: Props) => {\n  const classes = useStyles()\n  const { name, children, heading1, heading2 } = props\n  const { expanded, setExpanded } = useContext(PanelContext)\n  const handleChange = (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n    setExpanded(isExpanded ? name : \"\")\n  }\n\n  return (\n    <ExpansionPanel expanded={expanded === name} onChange={handleChange} square>\n      <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n        <Typography className={classes.heading}>{heading1}</Typography>\n        <Typography className={classes.secondaryHeading}>{heading2}</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <form className={classes.form} autoComplete=\"off\">\n          {children}\n        </form>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  )\n}\n\nexport default SettingsPanel\n","import { FormControl, Typography } from \"@material-ui/core\"\nimport Slider from \"@material-ui/lab/Slider\"\nimport { makeStyles } from \"@material-ui/styles\"\nimport * as d3 from \"d3\"\nimport React, { Dispatch } from \"react\"\nimport { isMobile } from \"react-device-detect\"\nimport { connect } from \"react-redux\"\nimport getSlotOptions, { SlotOptions } from \"../../selectors/getSlotOptions\"\nimport {\n  baseSize,\n  formationSlots,\n  setFormationType\n} from \"../../store/actions\"\nimport { AppState } from \"../../store/reducer\"\nimport { FormationConfigActionTypes, FormationType } from \"../../store/types\"\nimport Select from \"./Select\"\nimport SettingsPanel from \"./SettingsPanel\"\n\nconst useStyles = makeStyles(theme => ({\n  slots: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  slider: {\n    paddingLeft: theme.spacing.unit,\n    paddingRight: theme.spacing.unit\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 180\n  }\n}))\n\nconst formationTypeDesc = {\n  [FormationType.HD]: \"Head Down (from below)\",\n  [FormationType.HD_ABOVE]: \"Head Down (from above)\",\n  [FormationType.HU]: \"Head Up (from above)\"\n}\n\ntype Props = {\n  slotsOptions: SlotOptions;\n  baseSize: number;\n  formationType: FormationType;\n  onFormationSlotsSet: (slots: number) => void;\n  onBaseSizeSet: (size: number) => void;\n  onSetFormationType: (formationType: FormationType) => void;\n}\nconst Slots: React.FunctionComponent<Props> = (props: Props) => {\n  const {\n    slotsOptions: { min, max, slots },\n    baseSize,\n    formationType,\n    onFormationSlotsSet,\n    onBaseSizeSet,\n    onSetFormationType\n  } = props\n\n  const classes = useStyles()\n\n  const baseSizes = [4, 6, 8, 10]\n  const slotItems = d3.range(min, max)\n  const formationTypes = [\n    FormationType.HD,\n    FormationType.HD_ABOVE,\n    FormationType.HU\n  ]\n\n  const slotForm = isMobile ? (\n    <Select\n      label=\"Slots\"\n      value={slots}\n      opts={slotItems}\n      onSet={onFormationSlotsSet}\n    />\n  ) : (\n    <FormControl className={classes.formControl}>\n      <Typography variant=\"caption\" gutterBottom>\n        Slots\n      </Typography>\n      <div className={classes.slots}>\n        <Typography>{min}</Typography>\n        <Slider\n          min={min}\n          max={max}\n          value={slots}\n          step={1}\n          className={classes.slider}\n          onChange={(_, value) => onFormationSlotsSet(value)}\n        />\n        <Typography>{max}</Typography>\n      </div>\n    </FormControl>\n  )\n\n  return (\n    <React.Fragment>\n      <SettingsPanel name=\"slots\" heading1=\"Slots\" heading2={slots.toString()}>\n        {slotForm}\n      </SettingsPanel>\n      <SettingsPanel\n        name=\"baseSize\"\n        heading1=\"BaseSize\"\n        heading2={baseSize.toString()}\n      >\n        <Select\n          label=\"Base Size\"\n          value={baseSize}\n          opts={baseSizes}\n          onSet={onBaseSizeSet}\n        />\n      </SettingsPanel>\n      <SettingsPanel\n        name=\"formationType\"\n        heading1=\"Formation Type\"\n        heading2={formationTypeDesc[formationType]}\n      >\n        <Select\n          label=\"Formation Type\"\n          value={formationType}\n          opts={formationTypes}\n          desc={formationTypeDesc}\n          onSet={onSetFormationType}\n        />\n      </SettingsPanel>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  slotsOptions: getSlotOptions(state),\n  baseSize: state.formationConfig.baseSize,\n  formationType: state.formationConfig.type\n})\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch<FormationConfigActionTypes>\n) => ({\n  onFormationSlotsSet: (slots: number) => dispatch(formationSlots(slots)),\n  onBaseSizeSet: (size: number) => dispatch(baseSize(size)),\n  onSetFormationType: (type: FormationType) => dispatch(setFormationType(type))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Slots)\n","import {\n  SET_BASE_SIZE,\n  SET_FORMATION_SLOTS,\n  SET_FORMATION_TYPE,\n  SET_PLANE_SLOTTING,\n  SET_PLANE_TYPE,\n  SET_PLANE_SLOTS,\n  SET_COLOR_BY,\n  SET_NUMBER_BY,\n  ColorOption,\n  NumberOption,\n  PlaneType,\n  Slotting,\n  FormationType,\n  FormationConfigActionTypes,\n  PlanesConfigActionTypes,\n  ViewConfigActionTypes,\n  ShowOption,\n  SET_SHOW\n} from \"./types\"\nimport PlanePosition from \"../formation/PlanePosition\"\n\nexport const baseSize = (baseSize: number): FormationConfigActionTypes => ({\n  type: SET_BASE_SIZE,\n  baseSize\n})\n\nexport const formationSlots = (slots: number): FormationConfigActionTypes => ({\n  type: SET_FORMATION_SLOTS,\n  slots\n})\n\nexport const setFormationType = (\n  formationType: FormationType\n): FormationConfigActionTypes => ({\n  type: SET_FORMATION_TYPE,\n  formationType\n})\n\nexport const setPlaneSlotting = (\n  position: PlanePosition,\n  slotting: Slotting\n): PlanesConfigActionTypes => ({\n  type: SET_PLANE_SLOTTING,\n  position,\n  slotting\n})\n\nexport const setPlaneType = (\n  position: PlanePosition,\n  type: PlaneType\n): PlanesConfigActionTypes => ({\n  type: SET_PLANE_TYPE,\n  position,\n  planeType: type\n})\n\nexport const setPlaneSlots = (\n  position: PlanePosition,\n  slots: number\n): PlanesConfigActionTypes => ({\n  type: SET_PLANE_SLOTS,\n  position,\n  slots\n})\n\nexport const setColorBy = (colorBy: ColorOption): ViewConfigActionTypes => ({\n  type: SET_COLOR_BY,\n  colorBy\n})\n\nexport const setNumberBy = (numberBy: NumberOption): ViewConfigActionTypes => ({\n  type: SET_NUMBER_BY,\n  numberBy\n})\n\nexport const setShow = (show: ShowOption): ViewConfigActionTypes => ({\n  type: SET_SHOW,\n  show\n})\n","import * as d3 from \"d3\"\nimport React, { Dispatch } from \"react\"\nimport { connect } from \"react-redux\"\nimport PlanePosition from \"../../formation/PlanePosition\"\nimport {\n  setPlaneSlots,\n  setPlaneSlotting,\n  setPlaneType\n} from \"../../store/actions\"\nimport { AppState } from \"../../store/reducer\"\nimport {\n  PlanesConfigActionTypes,\n  PlaneState,\n  PlaneType,\n  Slotting\n} from \"../../store/types\"\nimport Select from \"./Select\"\nimport SettingsPanel from \"./SettingsPanel\"\n\ntype Setters = {\n  onPlaneTypeSet: (plane: PlanePosition, type: PlaneType) => void;\n  onPlaneSlotsSet: (plane: PlanePosition, slots: number) => void;\n  onPlaneSlottingSet: (plane: PlanePosition, slotting: Slotting) => void;\n}\n\ntype PlaneMenuProps = {\n  planeConfig: PlaneState;\n  setters: Setters;\n}\n\nconst typeDescriptions = {\n  [PlaneType.OTTER]: \"Otter\",\n  [PlaneType.SKYVAN]: \"Skyvan\",\n  [PlaneType.NONE]: \"None\"\n}\n\nconst PlaneMenu = (props: PlaneMenuProps) => {\n  const { planeConfig, setters } = props\n  const { position, label, slotting, type, slots } = planeConfig\n  const { onPlaneSlottingSet, onPlaneTypeSet, onPlaneSlotsSet } = setters\n\n  const types =\n    position === PlanePosition.LEAD\n      ? [PlaneType.OTTER, PlaneType.SKYVAN]\n      : [PlaneType.OTTER, PlaneType.SKYVAN, PlaneType.NONE]\n\n  const { FILL, SPLIT } = Slotting\n  const slottingDescriptions = {\n    [FILL]: \"Fill plane\",\n    [SPLIT]: \"Split evenly\"\n  }\n  const slottings = [SPLIT, FILL]\n\n  return (\n    <SettingsPanel\n      name={label}\n      heading1={label}\n      heading2={typeDescriptions[type]}\n    >\n      <Select\n        label=\"Type\"\n        value={type}\n        opts={types}\n        desc={typeDescriptions}\n        onSet={(t: number) => onPlaneTypeSet(position, t)}\n      />\n      <Select\n        label=\"Slots\"\n        value={slots}\n        opts={d3.range(1, 31)}\n        onSet={(s: number) => onPlaneSlotsSet(position, s)}\n      />\n      <Select\n        label=\"Slotting\"\n        value={slotting}\n        opts={slottings}\n        desc={slottingDescriptions}\n        onSet={(s: number) => onPlaneSlottingSet(position, s)}\n      />\n    </SettingsPanel>\n  )\n}\n\ntype PlanesProps = {\n  planesConfig: PlaneState[];\n  setters: Setters;\n}\nconst Planes = (props: PlanesProps) => {\n  const { planesConfig, setters } = props\n\n  return (\n    <React.Fragment>\n      {planesConfig.map(planeConfig => (\n        <PlaneMenu\n          key={planeConfig.position}\n          planeConfig={planeConfig}\n          setters={setters}\n        />\n      ))}\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  planesConfig: state.planesConfig\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch<PlanesConfigActionTypes>) => ({\n  setters: {\n    onPlaneTypeSet: (plane: PlanePosition, type: PlaneType) =>\n      dispatch(setPlaneType(plane, type)),\n    onPlaneSlotsSet: (plane: PlanePosition, slots: number) =>\n      dispatch(setPlaneSlots(plane, slots)),\n    onPlaneSlottingSet: (plane: PlanePosition, slotting: Slotting) =>\n      dispatch(setPlaneSlotting(plane, slotting))\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Planes)\n","import React, { Dispatch } from \"react\"\nimport { connect } from \"react-redux\"\nimport {\n  ColorOption,\n  NumberOption,\n  ShowOption,\n  ViewConfigState,\n  ViewConfigActionTypes\n} from \"../../store/types\"\nimport { setColorBy, setNumberBy, setShow } from \"../../store/actions\"\nimport { AppState } from \"../../store/reducer\"\nimport SettingsPanel from \"./SettingsPanel\"\nimport { NumDict } from \"../../formation/interfaces\"\nimport Select from \"./Select\"\n\ntype Props = {\n  viewConfig: ViewConfigState;\n  onSetColorBy: (opt: ColorOption) => void;\n  onSetNumberBy: (opt: NumberOption) => void;\n  onSetShow: (opt: ShowOption) => void;\n}\n\nconst colorBys = [\n  ColorOption.DEFAULT,\n  ColorOption.PLANE,\n  ColorOption.BUILD_ORDER,\n  ColorOption.RADIAL\n]\nconst colorByDesc: NumDict<string> = {\n  [ColorOption.DEFAULT]: \"Default\",\n  [ColorOption.PLANE]: \"Plane\",\n  [ColorOption.BUILD_ORDER]: \"Build Order\",\n  [ColorOption.RADIAL]: \"Radial\"\n}\n\nconst numberBys = [\n  NumberOption.SLOT_NUM,\n  NumberOption.SLOT_NUM_BY_PLANE,\n  NumberOption.BUILD_ORDER\n]\n\nconst numberByDesc: NumDict<string> = {\n  [NumberOption.SLOT_NUM]: \"Slot Number\",\n  [NumberOption.SLOT_NUM_BY_PLANE]: \"Slot Number by Plane\",\n  [NumberOption.BUILD_ORDER]: \"Build Order\"\n}\n\nconst showOptions = [ShowOption.FORMATION, ShowOption.PLANES, ShowOption.BOTH]\n\nconst showOptionDesc: NumDict<string> = {\n  [ShowOption.FORMATION]: \"Formation\",\n  [ShowOption.PLANES]: \"Planes\",\n  [ShowOption.BOTH]: \"Formation & Planes\"\n}\n\nconst View = (props: Props) => {\n  const { viewConfig, onSetColorBy, onSetNumberBy, onSetShow } = props\n\n  return (\n    <React.Fragment>\n      <SettingsPanel\n        name=\"colorby\"\n        heading1=\"Color by\"\n        heading2={colorByDesc[viewConfig.colorBy]}\n      >\n        <Select\n          label=\"Color by\"\n          value={viewConfig.colorBy}\n          opts={colorBys}\n          desc={colorByDesc}\n          onSet={onSetColorBy}\n        />\n      </SettingsPanel>\n      <SettingsPanel\n        name=\"numberby\"\n        heading1=\"Number by\"\n        heading2={numberByDesc[viewConfig.numberBy]}\n      >\n        <Select\n          label=\"Number by\"\n          value={viewConfig.numberBy}\n          opts={numberBys}\n          desc={numberByDesc}\n          onSet={onSetNumberBy}\n        />\n      </SettingsPanel>\n      <SettingsPanel\n        name=\"show\"\n        heading1=\"Show\"\n        heading2={showOptionDesc[viewConfig.show]}\n      >\n        <Select\n          label=\"Show\"\n          value={viewConfig.show}\n          opts={showOptions}\n          desc={showOptionDesc}\n          onSet={onSetShow}\n        />\n      </SettingsPanel>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  viewConfig: state.viewConfig\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch<ViewConfigActionTypes>) => ({\n  onSetColorBy: (colorBy: ColorOption) => dispatch(setColorBy(colorBy)),\n  onSetNumberBy: (numberBy: NumberOption) => dispatch(setNumberBy(numberBy)),\n  onSetShow: (show: ShowOption) => dispatch(setShow(show))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(View)\n","import React from \"react\"\nimport PanelContext from \"./PanelContext\"\nimport Slots from \"./Slots\"\nimport Planes from \"./Planes\"\nimport View from \"./View\"\n\nexport default function Panels() {\n  const [expanded, setExpanded] = React.useState<string>(\"\")\n\n  return (\n    <PanelContext.Provider value={{ expanded, setExpanded }}>\n      <div style={{ width: \"100%\" }}>\n        <Slots />\n        <Planes />\n        <View />\n      </div>\n    </PanelContext.Provider>\n  )\n}\n","import AppBar from \"@material-ui/core/AppBar\"\nimport Drawer from \"@material-ui/core/Drawer\"\nimport Hidden from \"@material-ui/core/Hidden\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Typography from \"@material-ui/core/Typography\"\nimport MenuIcon from \"@material-ui/icons/Menu\"\nimport PdfIcon from \"@material-ui/icons/PictureAsPdf\"\n\nimport { makeStyles } from \"@material-ui/styles\"\nimport React from \"react\"\nimport Panels from \"./Panels\"\n\nconst drawerWidth = 280\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    height: \"100vh\"\n  },\n  drawer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: drawerWidth,\n      flexShrink: 0\n    }\n  },\n  appBar: {\n    marginLeft: drawerWidth,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: `calc(100% - ${drawerWidth}px)`\n    }\n  },\n  menuButton: {\n    marginRight: 20,\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\"\n    }\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth\n  },\n  heading: {\n    flexGrow: 1\n  },\n  content: {\n    flexGrow: 1,\n    display: \"flex\",\n    flexDirection: \"column\"\n  }\n}))\n\ninterface ConfigDrawerProps {\n  contents?: React.ReactNode\n  children?: React.ReactNode\n}\nconst ConfigDrawer: React.FunctionComponent<ConfigDrawerProps> = (\n  props: ConfigDrawerProps\n) => {\n  const classes = useStyles()\n  const [mobileOpen, setMobileOpen] = React.useState(false)\n\n  function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen)\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"Open drawer\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography\n            variant=\"h6\"\n            color=\"inherit\"\n            noWrap\n            className={classes.heading}\n          >\n            Formations\n          </Typography>\n          <IconButton color=\"inherit\" aria-label=\"PDF\">\n            <PdfIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer}>\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <SwipeableDrawer\n            variant=\"temporary\"\n            open={mobileOpen}\n            onOpen={handleDrawerToggle}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            ModalProps={{\n              keepMounted: true // Better open performance on mobile.\n            }}\n          >\n            <div className={classes.toolbar} />\n            <Panels />\n          </SwipeableDrawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            variant=\"permanent\"\n            open\n          >\n            <div className={classes.toolbar} />\n            <div />\n            <Panels />\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {props.children}\n      </main>\n    </div>\n  )\n}\n\nexport default ConfigDrawer\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport {\n  PlaneState,\n  FormationConfigState,\n  ViewConfigState,\n  Slotting,\n  PlaneType,\n  FormationType,\n  ColorOption,\n  NumberOption,\n  SET_PLANE_SLOTTING,\n  SET_PLANE_SLOTS,\n  SET_PLANE_TYPE,\n  SET_FORMATION_SLOTS,\n  SET_FORMATION_TYPE,\n  SET_COLOR_BY,\n  SET_NUMBER_BY,\n  SET_BASE_SIZE,\n  FormationConfigActionTypes,\n  PlanesConfigActionTypes,\n  ViewConfigActionTypes,\n  SET_SHOW,\n  ShowOption\n} from \"./types\"\n\nconst { LEAD, LT, RT } = PlanePosition\n\nconst initialPlaneState: PlaneState[] = [\n  {\n    position: LEAD,\n    label: \"Lead\",\n    slotting: Slotting.SPLIT,\n    type: PlaneType.SKYVAN,\n    slots: 23\n  },\n  {\n    position: LT,\n    label: \"Left Trail\",\n    slotting: Slotting.SPLIT,\n    type: PlaneType.NONE,\n    slots: 23\n  },\n  {\n    position: RT,\n    label: \"Right Trail\",\n    slotting: Slotting.SPLIT,\n    type: PlaneType.OTTER,\n    slots: 23\n  }\n]\n\nconst planesConfig = (\n  state = initialPlaneState,\n  action: PlanesConfigActionTypes\n): PlaneState[] => {\n  const position = action.position\n  return state.map(p => {\n    if (p.position !== position) {\n      return p\n    }\n    switch (action.type) {\n      case SET_PLANE_SLOTTING:\n        return { ...p, slotting: action.slotting }\n      case SET_PLANE_SLOTS:\n        return { ...p, slots: action.slots }\n      case SET_PLANE_TYPE:\n        return { ...p, type: action.planeType }\n      default:\n        return p\n    }\n  })\n}\n\nconst formationConfig = (\n  state = { slots: 42, baseSize: 6, type: FormationType.HD },\n  action: FormationConfigActionTypes\n): FormationConfigState => {\n  switch (action.type) {\n    case SET_FORMATION_SLOTS:\n      return { ...state, slots: action.slots }\n    case SET_BASE_SIZE:\n      return { ...state, baseSize: action.baseSize }\n    case SET_FORMATION_TYPE:\n      return { ...state, type: action.formationType }\n    default:\n      return state\n  }\n}\n\nconst viewConfig = (\n  state = {\n    colorBy: ColorOption.PLANE,\n    numberBy: NumberOption.SLOT_NUM_BY_PLANE,\n    show: ShowOption.BOTH\n  },\n  action: ViewConfigActionTypes\n): ViewConfigState => {\n  switch (action.type) {\n    case SET_COLOR_BY:\n      return { ...state, colorBy: action.colorBy }\n    case SET_NUMBER_BY:\n      return { ...state, numberBy: action.numberBy }\n    case SET_SHOW:\n      return { ...state, show: action.show }\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  planesConfig,\n  formationConfig,\n  viewConfig\n})\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import \"./bootstrap\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { createStore } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport App from \"./components/App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport reducer from \"./store/reducer\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport \"typeface-roboto\"\nimport { createMuiTheme } from \"@material-ui/core\"\nimport { ThemeProvider } from \"@material-ui/styles\"\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  }\n})\n\nconst store = createStore(reducer, composeWithDevTools())\n\nReactDOM.render(\n  <Provider store={store}>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from \"react\"\n\nimport FormationContainer from \"./FormationContainer\"\nimport ConfigDrawer from \"./config/ConfigDrawer\"\n\nexport default () => (\n  <ConfigDrawer>\n    <FormationContainer />\n  </ConfigDrawer>\n)\n"],"sourceRoot":""}