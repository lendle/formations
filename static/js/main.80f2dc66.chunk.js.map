{"version":3,"sources":["bootstrap.ts","formation/PlanePosition.ts","drawing/AbstractDrawer.ts","store/types.ts","constants.ts","geometry/Polar.ts","geometry/Box.ts","drawing/planedrawers.ts","drawing/slotdatafuns.ts","drawing/PlanesDrawer.ts","drawing/FormationDrawer.ts","components/FormationComponent.tsx","util/approxeq.ts","formation/lapwrapper.ts","formation/lap.js","formation/slotify.ts","formation/buildSlots.ts","formation/components/Component.ts","formation/components/Round.ts","formation/components/Whacker.ts","formation/components/Base.ts","formation/AbstractSlotCollection.ts","formation/buildFormation.ts","selectors/getSlotOptions.ts","formation/planes.ts","formation/buildPlanes.ts","selectors/index.ts","formation/planeify.ts","components/FormationContainer.ts","components/config/PanelContext.tsx","components/config/Select.tsx","components/config/SettingsPanel.tsx","components/config/Slots.tsx","store/actions.ts","components/config/Planes.tsx","components/config/View.tsx","components/config/Panels.tsx","components/config/ConfigDrawer.tsx","serviceWorker.js","store/reducer.ts","store/configureStore.ts","index.tsx","components/App.tsx"],"names":["install","PlanePosition","AbstractDrawer","group","this","Slotting","PlaneType","ColorOption","NumberOption","ShowOption","FormationType","PI","Math","TAU","Polar","radius","theta","Object","classCallCheck","unspin","concat","other","r1","t1","r2","t2","sqrt","cos","atan2","sin","plus","rotate","over","minus","s","floor","Box","x0","y0","x1","y1","createClass","key","value","p","min","x","y","max","b","get","PLANE_SCALE_FACTOR","positionLabels","_positionLabels","defineProperty","LEAD","LT","RT","w","l","line","d3","d","OtterDrawer","_this","otterPoints","doorPoints","slotCoords","toConsumableArray","map","flatMap","planeSlotId","box","scale","g","append","attr","text","plane","position","SkyvanDrawer","_this2","skyvanPoints","redLine","style","planeDrawers","_planeDrawers","OTTER","SKYVAN","buildOrderFill","_ref","stop","buildOrder","formationSlot","domain","toString","planeFill","filter","_","i","includes","radialFill","_ref2","offset","fillFunction","colorBy","BUILD_ORDER","PLANE","RADIAL","labelFunction","numberBy","SLOT_NUM_BY_PLANE","byPlaneSlotId","formationSlotId","scaledCoord","point","type","HD","flip","scaledPosition","_ref3","formation","scaledOffset","_ref4","arc","scaledPos","dockAngle","outerRadius","innerRadius","startAngle","d3theta","endAngle","planeX","planeY","highlight","transition","ease","overshoot","unhighlight","addSlot","fill","label","classed","on","call","slotG","circle","updateSlot","select","transitionOut","exit","t","remove","PlanesDrawer","args","p2c","planes","show","viewConfig","_ref$formation","FORMATION","PLANES","positions","Map","idx","all","length","abs","BOTH","coord","planeCoordinates","labelCoord","_ref3$formation","labelPosition","slotsByPlane","Array","from","d3Group","slots","_ref5","slicedToArray","slotData","_ref6","dummyFormationSlot","reverseBuildOrder","videoSlot","planeId","videoId","hasVideo","selectAll","data","join","enter","each","_ref7","nodes","draw","undefined","_ref8","selection","baseIds","planeLabel","labelBox","HD_ABOVE","HU","translate","drawLabel","reduce","_ref9","union","FormationDrawer","flipX","FormationComponent","svg","allGrp","wrapper","zoom","formationDrawer","planesDrawer","parseInt","scaleExtent","transform","translateBy","width","height","duration","withGroup","formationBox","props","planeBox","zoomToBox","cx","cy","_this3","react_default","a","createElement","ref","element","React","Component","approxeq","eps","arguments","Number","EPSILON","combineScoreFuns","_len","funs","_key","fallback","val","fun","lapwrapper","as","bs","scoreFun","Error","badScores","score","Infinity","console","warn","result","dim","cost","cost_matrix","j","i1","j1","sum","unassignedfound","imin","prvnumfree","f","i0","k","freerow","j2","endofpath","last","low","up","h","umin","usubmin","v2","BIG","epsilon","rowsol","Int32Array","colsol","u","Float64Array","v","numfree","free","collist","matches","pred","loopcnt","lapcost","row","col","lap","memo","has","set","slice","every","r","Set","size","allScores","error","slotPlane","formationSlotIds","specialSlotScore","slot","jr","slotJr","filledSlots","baseIdIndex","findIndex","id","baseSize","slotNumOffset","checkSlot","slotPosition","waiting","range","pos","rotation","apply","parents","parent","maxBuildOrder","Round","left","right","possibleConstructorReturn","getPrototypeOf","firstRun","_prrd","c","prrd","ceil","_positionRadiusRotationDockAngle","dockPosition","leftDockPosition","rightDockPosition","dockDistance","distanceFrom","_Round$__computeRadiu","__computeRadiusTheta","angleDelta","angleTo","iters","iter","lower","upper","mid","ss","Whacker","dock","hand","_this$dock","_this$dock2","psuedoSlots","_left","_right","invisibleSlots","_this$_prrd","fixedRotation","Base","_rotation","AbstractSlotCollection","_slots","computeSlots","slotsInRing","ring","podLines","round","bridges","addRings","rings","completeRings","nextRingSlots","dockPositions","base","component","isPod","firstPods","numBridges","bridgeNum","secondPods","bridgeSecondPods","secondPod","nextDockPositions","slotGroups","slotsPerGroup","groupsWithExtraSlot","nextRing","groupNum","slotsToFill","totalSlotsInGroup","priorSlots","leftHandSlots","rightHandSlots","whackers","push","FormationImpl","components","allSlots","adjustedSlot","objectSpread","parentToChildren","child","forEach","componentToWaiting","children","numWaiting","find","slotRadi","expand","createSelector","state","formationConfig","planesConfig","_planesConfig$filter$","NONE","slotting","planeMin","FILL","planeMax","fixedMin","PlaneImpl","_AbstractSlotCollecti","hasSuperFloat","inherits","reverse","countFilledSlots","filledPlanes","_ref10","_ref11","slotUnfilledPlanes","unfilledPlanes","slotsRemaining","slotsPerPlane","lead","littlePlanes","littlePlaneLabels","minSlotsPerPlane","extras","filledLead","remainingFilled","_ref12","getSlots","getSlotOptions","getBaseSize","getFormation","flat","getPlanes","slotsMap","_ref13","_ref14","getAllSlots","planeAssignments","unslotted","planeArray","slotId","diff","componentTheta","componentPosition","penalty","planeify","planeSlotAssignments","slotify","planeIdToSortedFormationSlotIds","d3Rollup","pa","sort","formationSlotIdToByPlaneSlotId","acc","connect","createContext","expanded","setExpanded","useStyles","makeStyles","theme","root","margin","spacing","unit","minWidth","Select","onSet","opts","desc","classes","core_index_es","className","onChange","e","target","native","isMobile","opt","makeOpts","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","secondary","form","display","flexWrap","formControl","SettingsPanel","name","heading1","heading2","_useContext","useContext","PanelContext","ExpansionPanel_default","event","isExpanded","square","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","ExpansionPanelDetails_default","autoComplete","alignItems","slider","paddingLeft","paddingRight","formationTypeDesc","_formationTypeDesc","slotsOptions","formationType","dispatch","onFormationSlotsSet","formationSlots","onBaseSizeSet","onSetFormationType","_props$slotsOptions","slotItems","formationTypes","slotForm","variant","gutterBottom","Slider_default","step","Fragment","config_SettingsPanel","typeDescriptions","_typeDescriptions","PlaneMenu","_slottingDescriptions","planeConfig","setters","onPlaneSlottingSet","onPlaneTypeSet","onPlaneSlotsSet","onPlaneVideoSet","types","SPLIT","slottingDescriptions","slottings","control","checked","planeType","setPlaneType","setPlaneSlots","setPlaneSlotting","setPlaneVideo","Planes_PlaneMenu","colorBys","DEFAULT","colorByDesc","_colorByDesc","numberBys","SLOT_NUM","numberByDesc","_numberByDesc","showOptions","showOptionDesc","_showOptionDesc","onSetColorBy","setColorBy","onSetNumberBy","setNumberBy","onSetShow","setShow","Panels","_React$useState","useState","_React$useState2","Provider","config_Slots","config_Planes","config_View","drawer","breakpoints","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","flexGrow","content","flexDirection","onRefreshState","mobileOpen","setMobileOpen","handleDrawerToggle","AppBar_default","Toolbar_default","IconButton_default","aria-label","onClick","Menu_default","noWrap","Refresh_default","Hidden_default","smUp","implementation","SwipeableDrawer_default","open","onOpen","onClose","paper","ModalProps","keepMounted","xsDown","Drawer_default","Boolean","window","location","hostname","match","initialPlaneState","rootReducer","combineReducers","action","refreshingReducer","storageReduxer","storage","reducer","engine","createEngine","middleware","store","createStore","composeWithDevTools","applyMiddleware","load","createMuiTheme","useNextVariants","ReactDOM","render","es","CssBaseline_default","index_es","config_ConfigDrawer","FormationContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80f2dc66.chunk.js","sourcesContent":["import { install } from \"@material-ui/styles\"\n\ninstall()\n","enum PlanePosition {\n    LEAD='lead',\n    LT = 'lt',\n    RT = 'rt'\n}\n\nexport default PlanePosition","import { Drawer } from \"./interfaces\"\n\nexport default abstract class AbstractDrawer<Args, ReturnArgs>\n  implements Drawer<Args, ReturnArgs> {\n  group!: d3.Selection<SVGGElement, {}, null, undefined>\n\n  withGroup(group: d3.Selection<SVGGElement, {}, null, undefined>): this {\n    this.group = group\n    return this\n  }\n\n  abstract draw(args: Args, transition: any): ReturnArgs\n}\n","import PlanePosition from \"../formation/PlanePosition\"\n\nexport enum Slotting {\n  SPLIT,\n  FILL\n}\n\nexport enum PlaneType {\n  NONE,\n  OTTER,\n  SKYVAN\n}\n\nexport enum ColorOption {\n  DEFAULT,\n  PLANE,\n  BUILD_ORDER,\n  RADIAL\n}\n\nexport enum NumberOption {\n  SLOT_NUM,\n  SLOT_NUM_BY_PLANE,\n  BUILD_ORDER\n}\n\nexport enum ShowOption {\n  FORMATION,\n  PLANES,\n  BOTH\n}\n\nexport enum FormationType {\n  HD,\n  HD_ABOVE,\n  HU\n}\n\nexport interface PlaneState {\n  position: PlanePosition\n  label: string\n  slotting: Slotting\n  type: PlaneType\n  slots: number\n  hasVideo: boolean\n  hasSuperFloat: boolean\n}\n\nexport interface FormationConfigState {\n  slots: number\n  baseSize: number\n  type: FormationType\n}\n\nexport interface ViewConfigState {\n  colorBy: ColorOption\n  numberBy: NumberOption\n  show: ShowOption\n}\n\nexport const SET_PLANE_SLOTTING = \"SET_PLANE_SLOTTING\"\ninterface SetPlaneSlottingAction {\n  type: typeof SET_PLANE_SLOTTING\n  position: PlanePosition\n  slotting: Slotting\n}\n\nexport const SET_PLANE_TYPE = \"SET_PLANE_TYPE\"\ninterface SetPlaneTypeAction {\n  type: typeof SET_PLANE_TYPE\n  position: PlanePosition\n  planeType: PlaneType\n}\n\nexport const SET_PLANE_SLOTS = \"SET_PLANE_SLOTS\"\ninterface SetPlaneSlotsAction {\n  type: typeof SET_PLANE_SLOTS\n  position: PlanePosition\n  slots: number\n}\n\nexport const SET_PLANE_VIDEO = \"SET_PLANE_VIDEO\"\ninterface SetPlaneVideoAction {\n  type: typeof SET_PLANE_VIDEO\n  position: PlanePosition\n  hasVideo: boolean\n}\nexport type PlanesConfigActionTypes =\n  | SetPlaneSlottingAction\n  | SetPlaneTypeAction\n  | SetPlaneSlotsAction\n  | SetPlaneVideoAction\n\nexport const SET_FORMATION_SLOTS = \"SET_FORMATION_SLOTS\"\ninterface SetFormationSlotsAction {\n  type: typeof SET_FORMATION_SLOTS\n  slots: number\n}\nexport const SET_FORMATION_TYPE = \"SET_FORMATION_TYPE\"\ninterface SetFormationTypeAction {\n  type: typeof SET_FORMATION_TYPE\n  formationType: FormationType\n}\nexport const SET_BASE_SIZE = \"SET_BASE_SIZE\"\ninterface SetBaseSizeAction {\n  type: typeof SET_BASE_SIZE\n  baseSize: number\n}\nexport type FormationConfigActionTypes =\n  | SetFormationSlotsAction\n  | SetFormationTypeAction\n  | SetBaseSizeAction\n\nexport const SET_COLOR_BY = \"SET_COLOR_BY\"\ninterface SetColorByAction {\n  type: typeof SET_COLOR_BY\n  colorBy: ColorOption\n}\nexport const SET_NUMBER_BY = \"SET_NUMBER_BY\"\ninterface SetNumberByAction {\n  type: typeof SET_NUMBER_BY\n  numberBy: NumberOption\n}\n\nexport const SET_SHOW = \"SET_SHOW\"\ninterface SetShowAction {\n  type: typeof SET_SHOW\n  show: ShowOption\n}\nexport type ViewConfigActionTypes =\n  | SetColorByAction\n  | SetNumberByAction\n  | SetShowAction\n\nexport const REFRESH_STATE = \"REFRESH_STATE\"\nexport interface RefreshStateAction {\n  type: typeof REFRESH_STATE\n}\n","export const PI = Math.PI\nexport const TAU = 2 * PI\nexport const SCALE_FACTOR = 80\n","import { PI, TAU } from \"../constants\"\n\n// polar coordinate from origin (center of base)\nexport default class Polar {\n  radius: number\n  theta: number\n  constructor(radius: number, theta: number) {\n    this.radius = radius\n    this.theta = Polar.unspin(theta)\n  }\n\n  toString() {\n    return `(r${this.radius},∠${this.theta / TAU}τ)`\n  }\n\n  //https://math.stackexchange.com/questions/1365622/adding-two-polar-vectors\n  plus(other: Polar) {\n    const { radius: r1, theta: t1 } = this\n    const { radius: r2, theta: t2 } = other\n    return new Polar(\n      Math.sqrt(r1 * r1 + r2 * r2 + 2 * r1 * r2 * Math.cos(t2 - t1)),\n      t1 + Math.atan2(r2 * Math.sin(t2 - t1), r1 + r2 * Math.cos(t2 - t1))\n    )\n  }\n\n  minus(other: Polar) {\n    return this.plus(other.rotate(PI))\n  }\n\n  rotate(theta: number) {\n    return new Polar(this.radius, this.theta + theta)\n  }\n\n  //flip coordinate over over\n  flip(over: number) {\n    return new Polar(this.radius, -this.theta - 2 * over)\n  }\n\n  // distance from other point\n  distanceFrom(other: Polar) {\n    return this.minus(other).radius\n  }\n\n  angleFrom(other: Polar) {\n    return this.minus(other).theta\n  }\n\n  angleTo(other: Polar) {\n    return other.minus(this).theta\n  }\n\n  scale(s: number) {\n    return new Polar(this.radius * s, this.theta)\n  }\n\n  // d3 treats theta = 0 as up, but in high school, theta = 0 is right\n  // also, d3 treats increasing theta as rotating clockwise, hs went counter clock wise\n  // this maps a highschool polar angle to a d3 polar angle\n  get d3theta() {\n    return Polar.unspin(-this.theta + PI / 2)\n  }\n\n  get x() {\n    return this.radius * Math.cos(this.theta)\n  }\n\n  //svg treats positive y as going down from top of page\n  get y() {\n    return -this.radius * Math.sin(this.theta)\n  }\n\n  // map theta back to [0, 2PI)\n  static unspin(theta: number) {\n    const t = Math.floor(theta / (2 * PI))\n    return theta - t * 2 * PI\n  }\n}\n","import Polar from \"./Polar\"\n\nexport class Box {\n  x0: number\n  y0: number\n  x1: number\n  y1: number\n  constructor(x0: number, y0: number, x1: number, y1: number) {\n    this.x0 = x0\n    this.y0 = y0\n    this.x1 = x1\n    this.y1 = y1\n  }\n\n  get cx(): number {\n    return (this.x0 + this.x1) / 2\n  }\n  get cy(): number {\n    return (this.y0 + this.y1) / 2\n  }\n\n  get width(): number {\n    return this.x1 - this.x0\n  }\n\n  get height(): number {\n    return this.y1 - this.y0\n  }\n\n  //since browser/d3 coordinates flip Y\n  flipY(): Box {\n    return new Box(this.x0, -this.y1, this.x1, -this.y0)\n  }\n\n  flipX(): Box {\n    return new Box(-this.x1, this.y0, -this.x0, this.y1)\n  }\n\n  expand(p: Polar): Box {\n    return new Box(\n      Math.min(this.x0, p.x),\n      Math.min(this.y0, p.y),\n      Math.max(this.x1, p.x),\n      Math.max(this.y1, p.y)\n    )\n  }\n\n  translate(p: Polar): Box {\n    return new Box(this.x0 + p.x, this.y0 + p.y, this.x1 + p.x, this.y1 + p.y)\n  }\n\n  union(b: Box): Box {\n    return new Box(\n      Math.min(this.x0, b.x0),\n      Math.min(this.y0, b.y0),\n      Math.max(this.x1, b.x1),\n      Math.max(this.y1, b.y1)\n    )\n  }\n\n  scale(s: number): Box {\n    return new Box(this.x0 * s, this.y0 * s, this.x1 * s, this.y1 * s)\n  }\n}\n","import { PlaneDrawer, SlottedPlane } from \"./interfaces\"\nimport * as d3 from \"d3\"\nimport { Selection, BaseType } from \"d3\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport { PlaneType } from \"../store/types\"\nimport { SlotData, NumDict } from \"../formation/interfaces\"\nimport { Box } from \"../geometry/Box\"\n\nexport const PLANE_SCALE_FACTOR = 40\n\ntype XY = {\n  x: number;\n  y: number;\n}\n\nconst positionLabels = {\n  [PlanePosition.LEAD]: \"Lead\",\n  [PlanePosition.LT]: \"Left Trail\",\n  [PlanePosition.RT]: \"Right Trail\"\n}\n\nconst w = 1.5\nconst l = 6.5\n\nexport const line = d3\n  .line<XY>()\n  .x(d => d.x * PLANE_SCALE_FACTOR)\n  .y(d => d.y * PLANE_SCALE_FACTOR)\n\nexport class OtterDrawer implements PlaneDrawer {\n  private otterPoints = [\n    { x: -w, y: -l },\n    { x: w, y: -l },\n    { x: w, y: l },\n    { x: -w, y: l },\n    { x: -w, y: -l }\n  ]\n\n  private doorPoints = [{ x: -w, y: l - 6 }, { x: -w, y: l - 2 }]\n\n  /**\n   *      23 22\n   *      21 20\n   *      19 18\n   *      17 16\n   *      15 14\n   *   6  13 12\n   *   5\n   *   4  9 11\n   *   3  8 10\n   *   2  7\n   *   1\n   *   0\n   */\n  private slotCoords = [\n    //floaters\n    ...d3.range(7).map(y => ({ x: -2, y: 6 - y })),\n    //first row in door\n    ...d3.range(3).map(y => ({ x: -1, y: 3.5 - y })),\n    //2nd row in door\n    ...d3.range(2).map(y => ({ x: 0, y: 3 - y })),\n    //divers\n    ...d3.range(6).flatMap(y => [{ x: 0.5, y: -y }, { x: -0.5, y: -y }])\n  ]\n  draw(g: Selection<SVGGElement, SlottedPlane, BaseType, any>) {\n    g.append(\"path\").attr(\"d\", line(this.otterPoints)!)\n    g.append(\"path\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", line(this.doorPoints)!)\n    g.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"dominant-baseline\", \"central\")\n      .attr(\"x\", 0)\n      .attr(\"y\", (-l + 0.5) * PLANE_SCALE_FACTOR)\n      .text(d => `${positionLabels[d.plane.position]}`)\n  }\n\n  x = (d: SlotData) => this.slotCoords[d.planeSlotId].x * PLANE_SCALE_FACTOR\n  y = (d: SlotData) => this.slotCoords[d.planeSlotId].y * PLANE_SCALE_FACTOR\n\n  box = new Box(-w - 1, -l, w, l).scale(PLANE_SCALE_FACTOR)\n}\n\nexport class SkyvanDrawer implements PlaneDrawer {\n  private skyvanPoints = [\n    { x: -w, y: -l },\n    { x: w, y: -l },\n    { x: w, y: l },\n    { x: -w, y: l },\n    { x: -w, y: -l }\n  ]\n\n  private doorPoints = [{ x: -w, y: l }, { x: w, y: l }]\n  private redLine = [{ x: -w, y: l - 4 }, { x: w, y: l - 4 }]\n\n  /**\n   *      23\n   *    21  22\n   *    19  20\n   *    17  18\n   *    15  16\n   *    13  14\n   *    11  12\n   *     9  10\n   *   ---------\n   *\n   *   6   7   8\n   *   3   4   5\n   *   0   1   2\n   *\n   */\n  private slotCoords = [\n    //1st row\n    ...d3\n      .range(3)\n      .flatMap(y => [\n        { x: -1, y: 6 - y },\n        { x: 0, y: 6 - y },\n        { x: 1, y: 6 - y }\n      ]),\n    // the rest on back\n    ...d3.range(8).flatMap(y => [{ x: -0.5, y: 2 - y }, { x: 0.5, y: 2 - y }])\n  ]\n  draw(g: Selection<SVGGElement, SlottedPlane, BaseType, any>) {\n    g.append(\"path\").attr(\"d\", line(this.skyvanPoints)!)\n    g.append(\"path\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", line(this.doorPoints)!)\n\n    g.append(\"path\")\n      .attr(\"stroke-width\", 2)\n      .style(\"stroke\", \"red\")\n      .attr(\"d\", line(this.redLine)!)\n    g.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"dominant-baseline\", \"central\")\n      .attr(\"x\", 0)\n      .attr(\"y\", (-l + 1) * PLANE_SCALE_FACTOR)\n      .text(d => positionLabels[d.plane.position])\n  }\n\n  x = (d: SlotData) => this.slotCoords[d.planeSlotId].x * PLANE_SCALE_FACTOR\n  y = (d: SlotData) => this.slotCoords[d.planeSlotId].y * PLANE_SCALE_FACTOR\n\n  box = new Box(-w, -l, w, l).scale(PLANE_SCALE_FACTOR)\n}\n\nexport const planeDrawers: NumDict<PlaneDrawer> = {\n  [PlaneType.OTTER]: new OtterDrawer(),\n  [PlaneType.SKYVAN]: new SkyvanDrawer()\n}\n","import { SlotData } from \"../formation/interfaces\"\nimport * as d3 from \"d3\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport { SCALE_FACTOR, TAU, PI } from \"../constants\"\nimport { BaseType } from \"d3\"\nimport { ColorOption, NumberOption, FormationType } from \"../store/types\"\nimport { planeDrawers } from \"./planedrawers\"\nimport Polar from \"../geometry/Polar\"\n\nexport type SlotDataFun = (d: SlotData) => any\n\nconst stringRange = (stop: number): string[] =>\n  d3.range(stop).map(x => x.toString())\n\nconst buildOrderFill = ({ formationSlot: { buildOrder } }: SlotData) =>\n  d3.scaleOrdinal(d3.schemePaired).domain(stringRange(12))(\n    (buildOrder - 1).toString()\n  )\nconst planeFill = (d: SlotData) =>\n  d3\n    .scaleOrdinal(d3.schemePaired.filter((_, i) => [0, 2, 4].includes(i)))\n    .domain([PlanePosition.LEAD, PlanePosition.LT, PlanePosition.RT])(\n    d.plane.position\n  )\n\nconst radialFill = ({ formationSlot }: SlotData) => {\n  const theta = formationSlot.offset.plus(formationSlot.position).theta / TAU\n  return d3.interpolateRainbow(theta)\n}\n\nexport const fillFunction = (colorBy: ColorOption): SlotDataFun => {\n  switch (colorBy) {\n    case ColorOption.BUILD_ORDER:\n      return buildOrderFill\n    case ColorOption.PLANE:\n      return planeFill\n    case ColorOption.RADIAL:\n      return radialFill\n    default:\n      return () => d3.schemePaired[0]\n  }\n}\n\nexport const labelFunction = (numberBy: NumberOption) => {\n  switch (numberBy) {\n    case NumberOption.BUILD_ORDER:\n      return (d: SlotData) => d.formationSlot.buildOrder\n    case NumberOption.SLOT_NUM_BY_PLANE:\n      return (d: SlotData) => d.byPlaneSlotId + 1\n    default:\n      return (d: SlotData) => d.formationSlotId + 1\n  }\n}\n\n/**\n * wraps label, replacing label with \"B\" for base slots\n * \"V\" for video slots\n * @param label label function\n */\nexport const planeLabel = (label: SlotDataFun) => (d: SlotData) => {\n  return d.formation.baseIds.includes(d.formationSlotId)\n    ? \"B\"\n    : d.plane.hasVideo && d.planeSlotId === d.plane.videoId\n    ? \"V\"\n    : label(d)\n}\nconst scaledCoord = (point: Polar, type: FormationType) =>\n  (type === FormationType.HD ? point.flip(PI / 2) : point).scale(SCALE_FACTOR)\n\nconst scaledPosition = ({\n  formationSlot: { position },\n  formation: { type }\n}: SlotData) => scaledCoord(position, type)\n\nconst scaledOffset = ({\n  formationSlot: { offset },\n  formation: { type }\n}: SlotData) => scaledCoord(offset, type)\n\nexport const arc = (d: SlotData) => {\n  const scaledPos = scaledPosition(d)\n  const dockAngle = d.formationSlot.dockAngle\n  return d3.arc()({\n    outerRadius: scaledPos.radius,\n    innerRadius: scaledPos.radius,\n    startAngle: scaledPos.d3theta - dockAngle,\n    endAngle: scaledPos.d3theta + dockAngle\n  })\n}\n\nexport const x = (d: SlotData) => scaledPosition(d).x\nexport const y = (d: SlotData) => scaledPosition(d).y\nexport const translate = (d: SlotData) =>\n  `translate(${scaledOffset(d).x},${scaledOffset(d).y})`\n\nexport const planeX = (d: SlotData) => planeDrawers[d.plane.type].x(d)\nexport const planeY = (d: SlotData) => planeDrawers[d.plane.type].y(d)\n\nexport const highlight = (d: SlotData) => {\n  d3.selectAll(`[formationSlotId=\"${d.formationSlotId}\"].slot circle`)\n    .transition()\n    .ease(d3.easeBack.overshoot(3))\n    .attr(\"r\", 20)\n}\nexport const unhighlight = (d: SlotData) => {\n  d3.selectAll(`[formationSlotId=\"${d.formationSlotId}\"].slot circle`)\n    .transition()\n    .ease(d3.easeBack.overshoot(3))\n    .attr(\"r\", 16)\n}\n\nexport const addSlotGroup = <E extends BaseType>(\n  selection: d3.Selection<E, SlotData, SVGGElement, any>,\n  x: SlotDataFun,\n  y: SlotDataFun,\n  fill: SlotDataFun,\n  label: SlotDataFun\n) => {\n  return selection\n    .append(\"g\")\n    .classed(\"slot\", true)\n    .on(\"mouseover\", highlight)\n    .on(\"mouseout\", unhighlight)\n    .attr(\"formationSlotId\", d => d.formationSlotId)\n    .call(slotG =>\n      slotG\n        .append(\"circle\")\n        .attr(\"cx\", x)\n        .attr(\"cy\", y)\n        .attr(\"r\", 16)\n        .attr(\"fill\", fill)\n    )\n    .call(slotG =>\n      slotG\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"central\")\n        .attr(\"x\", x)\n        .attr(\"y\", y)\n        .text(label)\n    )\n}\n\nexport const addSlot = <E extends BaseType>(\n  g: d3.Selection<E, SlotData, SVGGElement, any>,\n  x?: SlotDataFun,\n  y?: SlotDataFun,\n  fill?: SlotDataFun,\n  label?: SlotDataFun\n) => {\n  return g\n    .append(\"g\")\n    .classed(\"slot\", true)\n    .on(\"mouseover\", highlight)\n    .on(\"mouseout\", unhighlight)\n    .attr(\"formationSlotId\", d => d.formationSlotId)\n    .call(slotG => {\n      slotG\n        .append(\"circle\")\n        .attr(\"r\", 16)\n        .call(circle => {\n          x && circle.attr(\"cx\", x)\n          y && circle.attr(\"cy\", y)\n          fill && circle.attr(\"fill\", fill)\n        })\n      slotG\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"central\")\n        .call(text => {\n          x && text.attr(\"x\", x)\n          y && text.attr(\"y\", y)\n          label && text.text(label)\n        })\n    })\n}\n\nexport const updateSlot = (\n  g: d3.Transition<SVGGElement, SlotData, SVGGElement, {}>,\n  x: SlotDataFun,\n  y: SlotDataFun,\n  fill: SlotDataFun,\n  label: SlotDataFun\n) => {\n  g.select(\"g.slot circle\")\n    .attr(\"cx\", x)\n    .attr(\"cy\", y)\n    .attr(\"fill\", fill)\n\n  g.select(\"g.slot text\")\n    .attr(\"x\", x)\n    .attr(\"y\", y)\n    .text(label)\n}\n\nexport const transitionOut = (\n  exit: d3.Selection<SVGGElement, any, SVGGElement, any>,\n  t: d3.Transition<BaseType, any, any, any>\n) =>\n  exit\n    .transition(t)\n    .attr(\"transform\", \"scale(0)\")\n    .remove()\n","import {\n  Plane,\n  SlotData,\n  Formation,\n  FormationSlot\n} from \"../formation/interfaces\"\nimport AbstractDrawer from \"./AbstractDrawer\"\nimport * as d3 from \"d3\"\nimport { group as d3Group } from \"d3-array\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport { ViewConfigState, ShowOption, FormationType } from \"../store/types\"\nimport Polar from \"../geometry/Polar\"\nimport { PI, SCALE_FACTOR, TAU } from \"../constants\"\nimport {\n  planeX,\n  planeY,\n  addSlot,\n  updateSlot,\n  transitionOut,\n  SlotDataFun,\n  planeLabel\n} from \"./slotdatafuns\"\nimport { BaseType } from \"d3\"\nimport { planeDrawers, line, PLANE_SCALE_FACTOR } from \"./planedrawers\"\nimport { SlottedPlane } from \"./interfaces\"\nimport { Box } from \"../geometry/Box\"\n\nconst planeCoordinates = ({\n  planes,\n  viewConfig: { show },\n  formation: { radius, type }\n}: PlanesArgs) => {\n  switch (show) {\n    case ShowOption.FORMATION:\n    case ShowOption.PLANES: {\n      //if we're only showing planes, then draw them in a line\n      const positions = planes.map(p => p.position)\n      const positionToCoordinate = new Map(\n        [PlanePosition.LT, PlanePosition.LEAD, PlanePosition.RT]\n          .filter(p => positions.includes(p))\n          .map((p, idx, all) => {\n            const offset = idx * 300 - (all.length - 1) * 150\n            return [p, new Polar(Math.abs(offset), offset >= 0 ? 0 : PI)]\n          })\n      )\n      return positionToCoordinate\n    }\n    case ShowOption.BOTH: {\n      //if we're showing planes and formation, draw outside of formation radius\n      const positionToCoordinate = new Map(\n        planes.map(({ position, theta }) => {\n          const coord = new Polar(\n            Math.max(7, radius + 3) * SCALE_FACTOR,\n            position === PlanePosition.LEAD ? TAU / 12 : theta\n          )\n          return [\n            position,\n            type === FormationType.HD ? coord.flip(PI / 2) : coord\n          ]\n        })\n      )\n      return positionToCoordinate\n    }\n  }\n}\n\nconst labelPosition = ({ formation: { radius, type } }: PlanesArgs) => {\n  const coord = new Polar(Math.max(7, radius + 3) * SCALE_FACTOR, TAU / 12)\n  return type === FormationType.HD ? coord : coord.flip(PI / 2) // flip on opposite side of lead plane\n}\n\nconst drawLabel = (\n  group: d3.Selection<SVGGElement, {}, null, undefined>,\n  formation: Formation,\n  t: d3.Transition<d3.BaseType, any, any, any>,\n  labelCoord: Polar,\n  show: ShowOption\n) => {\n  group\n    .selectAll<SVGGElement, Formation>(\"g.label\")\n    .data(show === ShowOption.PLANES ? [] : [formation])\n    .join(\n      enter =>\n        enter\n          .append(\"g\")\n          .classed(\"label\", true)\n          .call(g => {\n            g.append(\"path\")\n              .attr(\"d\", line([{ x: 0, y: 0 }, { x: 0, y: -4 }])!)\n              .attr(\"stroke-width\", 3)\n              .attr(\"stroke\", \"black\")\n\n            g.append(\"path\")\n              .attr(\"d\", line([{ x: -1, y: -3 }, { x: 0, y: -4 }])!)\n              .attr(\"stroke-width\", 3)\n              .attr(\"stroke\", \"black\")\n\n            g.append(\"path\")\n              .attr(\"d\", line([{ x: 1, y: -3 }, { x: 0, y: -4 }])!)\n              .attr(\"stroke-width\", 3)\n              .attr(\"stroke\", \"black\")\n            g.append(\"text\")\n              .classed(\"type\", true)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"dominant-baseline\", \"central\")\n              .attr(\"x\", 0)\n              .attr(\"y\", PLANE_SCALE_FACTOR)\n\n            g.append(\"text\")\n              .classed(\"slots\", true)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"dominant-baseline\", \"central\")\n              .attr(\"x\", 0)\n              .attr(\"y\", 2 * PLANE_SCALE_FACTOR)\n          })\n          .attr(\"transform\", \"translate(0,0) scale(0)\"),\n      undefined,\n      exit => transitionOut(exit, t)\n    )\n    .call(g => {\n      g.select(\"text.type\").text(d => {\n        switch (d.type) {\n          case FormationType.HD:\n            return \"Head Down from below\"\n          case FormationType.HD_ABOVE:\n            return \"Head Down from above\"\n          case FormationType.HU:\n            return \"Head Up\"\n          default:\n            return \"Unknown formation type\"\n        }\n      })\n      g.select(\"text.slots\").text(d => `${d.slots.length} slots`)\n    })\n    .transition(t)\n    .attr(\"transform\", `translate(${labelCoord.x}, ${labelCoord.y})`)\n\n  const labelBox =\n    show === ShowOption.PLANES\n      ? new Box(0, 0, 0, 0)\n      : new Box(-3, -2, 3, 4).scale(PLANE_SCALE_FACTOR).translate(labelCoord)\n\n  return labelBox\n}\n\ninterface PlanesArgs {\n  slots: SlotData[]\n  planes: Plane[]\n  formation: Formation\n  viewConfig: ViewConfigState\n  fill: SlotDataFun\n  label: SlotDataFun\n}\nexport default class PlanesDrawer extends AbstractDrawer<PlanesArgs, Box> {\n  draw(args: PlanesArgs, t: d3.Transition<BaseType, any, any, any>) {\n    const p2c = planeCoordinates(args)\n    const labelCoord = labelPosition(args)\n\n    const { fill, label } = args\n\n    // const label = (d: SlotData) => d.plane.slots[d.planeSlotId].jr.toString()\n\n    const slotsByPlane: SlottedPlane[] =\n      args.viewConfig.show === ShowOption.FORMATION\n        ? []\n        : Array.from(d3Group(args.slots, d => d.plane))\n            .map(([plane, slotData]) => ({ plane, slotData }))\n            .map(({ plane, slotData }) => {\n              // add in psuedo slot for video if plane has it\n\n              const dummyFormationSlot: FormationSlot = {\n                reverseBuildOrder: 0,\n                buildOrder: 0,\n                offset: new Polar(0, 0),\n                position: new Polar(0, 0),\n                dockAngle: 0\n              }\n              const videoSlot = {\n                formationSlotId: -1,\n                formation: args.formation,\n                formationSlot: dummyFormationSlot,\n                planeId: slotData[0] ? slotData[0].planeId : -1,\n                plane: plane,\n                planeSlotId: plane.videoId,\n                byPlaneSlotId: -1\n              }\n\n              if (plane.hasVideo) {\n                return {\n                  plane,\n                  slotData: [...slotData, videoSlot]\n                }\n              } else {\n                return { plane, slotData }\n              }\n            })\n\n    this.group\n      .selectAll<SVGGElement, SlottedPlane>(\"g.plane\")\n      .data<SlottedPlane>(\n        slotsByPlane,\n        d => `${d.plane.position}.${d.plane.type}`\n      )\n      .join(\n        enter =>\n          enter\n            .append(\"g\")\n            .classed(\"plane\", true)\n            .each(({ plane }, i, nodes) => {\n              //draw each plane frame\n              planeDrawers[plane.type].draw(d3.select(nodes[i]), t)\n            })\n            .attr(\"transform\", \"translate(0,0) scale(0)\"),\n        undefined,\n        exit => transitionOut(exit, t)\n      )\n      .transition(t)\n      .attr(\n        \"transform\",\n        ({ plane: { position } }) =>\n          `translate(${p2c.get(position)!.x},${p2c.get(position)!.y}) scale(1)` //transition planes from center\n      )\n      .selection()\n      .selectAll<SVGGElement, SlotData>(\"g.slot\")\n      .data(\n        d => d.slotData,\n        d => `${d.formationSlotId}.${d.planeId}.${d.plane.type}`\n      )\n      .join(\n        addSlot, //add slots on enter without initial coordinates or label\n        undefined,\n        exit => transitionOut(exit, t)\n      )\n      .transition(t)\n      .attr(\"transform\", \"scale(1)\")\n      .call(slotG => {\n        updateSlot(slotG, planeX, planeY, fill, planeLabel(label))\n      })\n\n    const labelBox = drawLabel(\n      this.group,\n      args.formation,\n      t,\n      labelCoord,\n      args.viewConfig.show\n    )\n\n    return slotsByPlane.reduce((box, { plane }) => {\n      return box.union(\n        planeDrawers[plane.type].box.translate(p2c.get(plane.position)!)\n      )\n    }, labelBox)\n  }\n}\n","import { SlotData } from \"../formation/interfaces\"\nimport AbstractDrawer from \"./AbstractDrawer\"\nimport { ViewConfigState, ShowOption, FormationType } from \"../store/types\"\nimport {\n  x,\n  y,\n  translate,\n  updateSlot,\n  addSlot,\n  arc,\n  transitionOut,\n  SlotDataFun\n} from \"./slotdatafuns\"\nimport { Transition, BaseType } from \"d3\"\nimport { SCALE_FACTOR } from \"../constants\"\nimport { Box } from \"../geometry/Box\"\n\ninterface FormationArgs {\n  slots: SlotData[]\n  viewConfig: ViewConfigState\n  fill: SlotDataFun\n  label: SlotDataFun\n}\nexport default class FormationDrawer extends AbstractDrawer<\n  FormationArgs,\n  Box\n> {\n  draw(\n    { slots, viewConfig, fill, label }: FormationArgs,\n    t: Transition<BaseType, any, any, any>\n  ) {\n    const slotData: SlotData[] =\n      viewConfig.show === ShowOption.PLANES ? [] : slots\n\n    this.group\n      .selectAll<SVGGElement, SlotData>(\"g.slotgroup\")\n      .data<SlotData>(slotData, d => d.formationSlotId.toString())\n      .join(\n        enter =>\n          enter\n            .append(\"g\")\n            .attr(\"class\", \"slotgroup\") // slot plus grips\n            .attr(\"transform\", \"translate(0,0) scale(0)\") //start scaled down\n            .call(g => {\n              g.append(\"path\") //add the grips path\n                .attr(\"class\", \"grips\")\n                .attr(\"d\", arc)\n              addSlot(g, x, y, fill, label) //add the slot circle with fill\n            }),\n        undefined, //pass through, since we want to transition both new and old points\n        exit => transitionOut(exit, t)\n      )\n      .transition(t)\n      .attr(\"transform\", d => translate(d) + \" scale(1)\") //scale up translate\n      .call(g => {\n        //basically a no op for data that just entered\n        g.select(\"path\").attr(\"d\", arc)\n        updateSlot(g, x, y, fill, label)\n      })\n\n    if (viewConfig.show === ShowOption.PLANES) {\n      return new Box(-1, -1, 1, 1).scale(SCALE_FACTOR)\n    }\n\n    const box = slotData[0].formation.box.scale(SCALE_FACTOR)\n    return slotData[0].formation.type === FormationType.HD ? box.flipX() : box\n  }\n}\n","import React from \"react\"\nimport * as d3 from \"d3\"\nimport \"./FormationComponent.css\"\n\nimport { Formation, Plane, SlotData } from \"../formation/interfaces\"\nimport PlanesDrawer from \"../drawing/PlanesDrawer\"\nimport { ViewConfigState } from \"../store/types\"\nimport FormationDrawer from \"../drawing/FormationDrawer\"\nimport { SlotDataFun } from \"../drawing/slotdatafuns\"\nimport { BaseType } from \"d3\"\nimport { Box } from \"../geometry/Box\"\n\ntype Transition = d3.Transition<BaseType, any, any, any>\n\ninterface FormationProps {\n  formation: Formation\n  planes: Plane[]\n  slots: SlotData[]\n  viewConfig: ViewConfigState\n  fill: SlotDataFun\n  label: SlotDataFun\n}\nexport default class FormationComponent extends React.Component<\n  FormationProps,\n  {}\n> {\n  svg!: d3.Selection<SVGSVGElement, {}, null, undefined>\n  allGrp!: d3.Selection<SVGGElement, {}, null, undefined>\n  wrapper!: d3.Selection<SVGGElement, {}, null, undefined>\n  zoom!: d3.ZoomBehavior<SVGSVGElement, {}>\n  formationDrawer!: FormationDrawer\n  planesDrawer!: PlanesDrawer\n\n  height() {\n    return parseInt(this.svg.style(\"height\"), 10)\n  }\n\n  width() {\n    return parseInt(this.svg.style(\"width\"), 10)\n  }\n\n  componentDidMount() {\n    this.wrapper = this.svg.append(\"g\")\n    this.allGrp = this.wrapper.append(\"g\")\n\n    this.zoom = d3\n      .zoom<SVGSVGElement, {}>()\n      .scaleExtent([0.25, 2])\n      .on(\"zoom\", () => this.wrapper.attr(\"transform\", d3.event.transform))\n\n    this.svg\n      .call(this.zoom) //allows user zoom\n      .call(this.zoom.translateBy, this.width() / 2, this.height() / 2) //set initial zoom  to center\n\n    //bounding box\n    // https://bl.ocks.org/iamkevinv/0a24e9126cd2fa6b283c6f2d774b69a2\n\n    const t = d3.transition().duration(1000) as Transition\n\n    this.formationDrawer = new FormationDrawer().withGroup(\n      this.allGrp.append(\"g\")\n    )\n    this.planesDrawer = new PlanesDrawer().withGroup(this.allGrp.append(\"g\"))\n\n    const formationBox = this.formationDrawer.draw(this.props, t)\n    const planeBox = this.planesDrawer.draw(this.props, t)\n\n    // console.log({ box, planeBox })\n\n    // this.allGrp\n    //   .append(\"rect\")\n    //   .attr(\"x\", planeBox.x0)\n    //   .attr(\"y\", planeBox.y0)\n    //   .attr(\"width\", planeBox.width)\n    //   .attr(\"height\", planeBox.height)\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"stroke-widht\", 1)\n    //   .attr(\"stroke\", \"black\")\n\n    this.zoomToBox(formationBox.union(planeBox), t)\n  }\n\n  componentDidUpdate() {\n    const t = d3.transition().duration(1000) as Transition\n    const formationBox = this.formationDrawer.draw(this.props, t)\n    const planeBox = this.planesDrawer.draw(this.props, t)\n\n    this.zoomToBox(formationBox.union(planeBox), t)\n  }\n\n  zoomToBox(box: Box, t: Transition) {\n    this.allGrp\n      .transition(t)\n      .attr(\"transform\", `translate(${-box.cx}, ${-box.cy})`)\n    this.svg\n      .transition(t)\n      .call(\n        this.zoom.transform,\n        d3.zoomIdentity\n          .translate(this.width() / 2, this.height() / 2)\n          .scale(\n            Math.min(this.width() / box.width, this.height() / box.height) *\n              0.95\n          )\n      )\n  }\n\n  render() {\n    return (\n      <svg\n        width={\"100%\"}\n        height={\"100%\"}\n        ref={element => (this.svg = d3.select(element!).attr(\"id\", \"svg\"))}\n      />\n    )\n  }\n}\n","export default function approxeq(\n  a: number,\n  b: number,\n  eps = Math.sqrt(Number.EPSILON)\n) {\n  return Math.abs(a - b) < eps\n}\n","import lap from \"./lap\"\n\ntype ScoreFun<A, B> = (a: A, b: B) => number\n\n//takes a scoreFun that takes an A and a B\n//and converts it to a function that takes i, j for i, j in [0, number of as/bs)\n//for use with lap()\nfunction cost<A, B>(as: A[], bs: B[], scoreFun: ScoreFun<A, B>) {\n  //memoize scoreFun\n  const memo = new Map<string, number>()\n  return (i: number, j: number): number => {\n    if (i >= as.length) {\n      //it's free to assign nothing from as to any b\n      return 0\n    }\n    const key = `${i}.${j}`\n    if (!memo.has(key)) {\n      const a = as[i]\n      const b = bs[j]\n      memo.set(key, scoreFun(a, b))\n    }\n    return memo.get(key)!\n  }\n}\n\n/**\n * takes two arrays of things and a function that computes a score between a pair of those things\n * and assigns each thing in the first array to a thing in the second array,\n * minimizing the sum of the scores of the assigned pairs\n *\n * The second array can be longer than the first,\n * in which case some things in the second won't get assigned to the first\n * @param as\n * @param bs\n * @param scoreFun\n */\nfunction lapwrapper<A, B>(\n  as: A[],\n  bs: B[],\n  scoreFun: ScoreFun<A, B>\n): [A, B][] {\n  if (as.length > bs.length) {\n    throw new Error(\"as can't be longer than bs\")\n  }\n\n  const badScores = as.flatMap(a =>\n    bs.flatMap(b => {\n      const score = scoreFun(a, b)\n      return score < 0 || score === Infinity ? [{ a, b, score }] : []\n    })\n  )\n\n  if (badScores.length > 0) {\n    console.warn(\"Scores should be non-negative and not infinity: \", badScores)\n  }\n\n  const result = lap(bs.length, cost(as, bs, scoreFun))\n\n  if (\n    //check everything in a got assigned to something in b\n    !result.row.slice(0, as.length).every(r => r >= 0 && r < bs.length) ||\n    //check everything in a has a unique b\n    new Set(result.row.slice(0, as.length)).size != as.length ||\n    //check the computation didn't explode\n    result.cost === Infinity\n  ) {\n    const allScores = as.flatMap(a =>\n      bs.map(b => ({ a, b, score: scoreFun(a, b) }))\n    )\n    console.error(\"something's weird\", {\n      allScores,\n      result\n    })\n  }\n\n  return Array.from(result.row.slice(0, as.length)).map(\n    (p: number, i: number) => {\n      const a = as[i]\n      const b = bs[p]\n      return [a, b]\n    }\n  )\n}\n\n/**\n * returns a function that (returns a function that) tries functions in funs(a,b) in order until it finds\n * a result that isn't undefined, and returns that. if nothing is found, fallback is used, which must be a propper\n * ScoreFun\n * @param funs score functions to try\n * @param fallback fallback score function\n */\nexport const combineScoreFuns = <A, B>(\n  ...funs: ((a: A, b: B) => number | undefined)[]\n) => (fallback: ScoreFun<A, B>) => (a: A, b: B) => {\n  for (let i = 0; i < funs.length; i++) {\n    const fun = funs[i]\n    const val = fun(a, b)\n    if (val) {\n      return val\n    }\n  }\n  return fallback(a, b)\n}\n\nexport default lapwrapper\n","//https://github.com/Fil/lap-jv\n/************************************************************************\n*\n*  lap.js -- ported to javascript from\n\n   lap.cpp\n   version 1.0 - 4 September 1996\n   author: Roy Jonker @ MagicLogic Optimization Inc.\n   e-mail: roy_jonker@magiclogic.com\n\n   Code for Linear Assignment Problem, according to\n\n   \"A Shortest Augmenting Path Algorithm for Dense and Sparse Linear\n    Assignment Problems,\" Computing 38, 325-340, 1987\n\n   by\n\n   R. Jonker and A. Volgenant, University of Amsterdam.\n\n*\n   PORTED TO JAVASCRIPT 2017-01-02 by Philippe Riviere(fil@rezo.net)\n   CHANGED 2016-05-13 by Yang Yong(yangyongeducation@163.com) in column reduction part according to\n   matlab version of LAPJV algorithm(Copyright (c) 2010, Yi Cao All rights reserved)--\n   https://www.mathworks.com/matlabcentral/fileexchange/26836-lapjv-jonker-volgenant-algorithm-for-linear-assignment-problem-v3-0:\n*\n*************************************************************************/\n\n/* This function is the jv shortest augmenting path algorithm to solve the assignment problem */\nexport default function lap(dim, cost) {\n  // input:\n  // dim        - problem size\n  // cost       - cost callback (or matrix)\n\n  // output:\n  // rowsol     - column assigned to row in solution\n  // colsol     - row assigned to column in solution\n  // u          - dual variables, row reduction numbers\n  // v          - dual variables, column reduction numbers\n\n  // convert the cost matrix (old API) to a callback (new API)\n  if (typeof cost === \"object\") {\n    var cost_matrix = cost;\n    cost = function (i, j) {\n      return cost_matrix[i][j];\n    };\n  }\n\n  var sum = 0;\n  {\n    let i1, j1;\n    for (i1 = 0; i1 < dim; i1++) {\n      for (j1 = 0; j1 < dim; j1++)\n        sum += cost(i1, j1);\n    }\n  }\n  const BIG = 10000 * (sum / dim);\n  const epsilon = sum / dim / 10000;\n  const rowsol = new Int32Array(dim),\n    colsol = new Int32Array(dim),\n    u = new Float64Array(dim),\n    v = new Float64Array(dim);\n  let unassignedfound;\n  /* row */\n  let i, imin, numfree = 0, prvnumfree, f, i0, k, freerow; // *pred, *free\n  /* col */\n  let j, j1, j2, endofpath, last, low, up; // *collist, *matches\n  /* cost */\n  let min, h, umin, usubmin, v2; // *d\n\n  const free = new Int32Array(dim); // list of unassigned rows.\n  const collist = new Int32Array(dim); // list of columns to be scanned in various ways.\n  const matches = new Int32Array(dim); // counts how many times a row could be assigned.\n  const d = new Float64Array(dim); // 'cost-distance' in augmenting path calculation.\n  const pred = new Int32Array(dim); // row-predecessor of column in augmenting/alternating path.\n\n  // init how many times a row will be assigned in the column reduction.\n  for (i = 0; i < dim; i++)\n    matches[i] = 0;\n\n  // COLUMN REDUCTION\n  for (\n    j = dim;\n    j--; // reverse order gives better results.\n\n  ) {\n    // find minimum cost over rows.\n    min = cost(0, j);\n    imin = 0;\n    for (i = 1; i < dim; i++)\n      if (cost(i, j) < min) {\n        min = cost(i, j);\n        imin = i;\n      }\n    v[j] = min;\n    if (++matches[imin] === 1) {\n      // init assignment if minimum row assigned for first time.\n      rowsol[imin] = j;\n      colsol[j] = imin;\n    } else if (v[j] < v[rowsol[imin]]) {\n      j1 = rowsol[imin];\n      rowsol[imin] = j;\n      colsol[j] = imin;\n      colsol[j1] = -1;\n    } else colsol[j] = -1; // row already assigned, column not assigned.\n  }\n\n  // REDUCTION TRANSFER\n  for (i = 0; i < dim; i++) {\n    if (\n      matches[i] === 0 // fill list of unassigned 'free' rows.\n    )\n      free[numfree++] = i;\n    else if (matches[i] === 1) {\n      // transfer reduction from rows that are assigned once.\n      j1 = rowsol[i];\n      min = BIG;\n      for (j = 0; j < dim; j++)\n        if (j !== j1)\n          if (cost(i, j) - v[j] < min + epsilon) min = cost(i, j) - v[j];\n      v[j1] = v[j1] - min;\n    }\n  }\n\n  // AUGMENTING ROW REDUCTION\n  let loopcnt = 0; // do-loop to be done twice.\n  do {\n    loopcnt++;\n\n    // scan all free rows.\n    // in some cases, a free row may be replaced with another one to be scanned next.\n    k = 0;\n    prvnumfree = numfree;\n    numfree = 0; // start list of rows still free after augmenting row reduction.\n    while (k < prvnumfree) {\n      i = free[k];\n      k++;\n\n      // find minimum and second minimum reduced cost over columns.\n      umin = cost(i, 0) - v[0];\n      j1 = 0;\n      usubmin = BIG;\n      for (j = 1; j < dim; j++) {\n        h = cost(i, j) - v[j];\n        if (h < usubmin)\n          if (h >= umin) {\n            usubmin = h;\n            j2 = j;\n          } else {\n            usubmin = umin;\n            umin = h;\n            j2 = j1;\n            j1 = j;\n          }\n      }\n\n      i0 = colsol[j1];\n      if (umin < usubmin + epsilon)\n        //         change the reduction of the minimum column to increase the minimum\n        //         reduced cost in the row to the subminimum.\n        v[j1] = v[j1] - (usubmin + epsilon - umin);\n      else if (i0 > -1) {\n        // minimum and subminimum equal.\n        // minimum column j1 is assigned.\n        // swap columns j1 and j2, as j2 may be unassigned.\n        j1 = j2;\n        i0 = colsol[j2];\n      }\n\n      // (re-)assign i to j1, possibly de-assigning an i0.\n      rowsol[i] = j1;\n      colsol[j1] = i;\n\n      if (i0 > -1)\n        if (umin < usubmin)\n          // minimum column j1 assigned earlier.\n          // put in current k, and go back to that k.\n          // continue augmenting path i - j1 with i0.\n          free[--k] = i0;\n        else\n          // no further augmenting reduction possible.\n          // store i0 in list of free rows for next phase.\n          free[numfree++] = i0;\n    }\n  } while (loopcnt < 2); // repeat once.\n\n  // AUGMENT SOLUTION for each free row.\n  for (f = 0; f < numfree; f++) {\n    freerow = free[f]; // start row of augmenting path.\n\n    // Dijkstra shortest path algorithm.\n    // runs until unassigned column added to shortest path tree.\n    for (j = dim; j--;) {\n      d[j] = cost(freerow, j) - v[j];\n      pred[j] = freerow;\n      collist[j] = j; // init column list.\n    }\n\n    low = 0; // columns in 0..low-1 are ready, now none.\n    up = 0; // columns in low..up-1 are to be scanned for current minimum, now none.\n    // columns in up..dim-1 are to be considered later to find new minimum,\n    // at this stage the list simply contains all columns\n    unassignedfound = false;\n    do {\n      if (up === low) {\n        // no more columns to be scanned for current minimum.\n        last = low - 1;\n\n        // scan columns for up..dim-1 to find all indices for which new minimum occurs.\n        // store these indices between low..up-1 (increasing up).\n        min = d[collist[up++]];\n        for (k = up; k < dim; k++) {\n          j = collist[k];\n          h = d[j];\n          if (h <= min) {\n            if (h < min) {\n              // new minimum.\n              up = low; // restart list at index low.\n              min = h;\n            }\n            // new index with same minimum, put on undex up, and extend list.\n            collist[k] = collist[up];\n            collist[up++] = j;\n          }\n        }\n        // check if any of the minimum columns happens to be unassigned.\n        // if so, we have an augmenting path right away.\n        for (k = low; k < up; k++)\n          if (colsol[collist[k]] < 0) {\n            endofpath = collist[k];\n            unassignedfound = true;\n            break;\n          }\n      }\n\n      if (!unassignedfound) {\n        // update 'distances' between freerow and all unscanned columns, via next scanned column.\n        j1 = collist[low];\n        low++;\n        i = colsol[j1];\n        h = cost(i, j1) - v[j1] - min;\n\n        for (k = up; k < dim; k++) {\n          j = collist[k];\n          v2 = cost(i, j) - v[j] - h;\n          if (v2 < d[j]) {\n            pred[j] = i;\n            if (v2 === min)\n              if (colsol[j] < 0) {\n                // new column found at same minimum value\n                // if unassigned, shortest augmenting path is complete.\n                endofpath = j;\n                unassignedfound = true;\n                break;\n              } else {\n                // else add to list to be scanned right away.\n                collist[k] = collist[up];\n                collist[up++] = j;\n              }\n            d[j] = v2;\n          }\n        }\n      }\n    } while (!unassignedfound);\n\n    // update column prices.\n    for (k = last + 1; k--;) {\n      j1 = collist[k];\n      v[j1] = v[j1] + d[j1] - min;\n    }\n\n    // reset row and column assignments along the alternating path.\n    do {\n      i = pred[endofpath];\n      colsol[endofpath] = i;\n      j1 = endofpath;\n      endofpath = rowsol[i];\n      rowsol[i] = j1;\n    } while (i !== freerow);\n  }\n\n  // calculate optimal cost.\n  let lapcost = 0;\n  for (i = dim; i--;) {\n    j = rowsol[i];\n    u[i] = cost(i, j) - v[j];\n    lapcost = lapcost + cost(i, j);\n  }\n\n  return {\n    cost: lapcost,\n    row: rowsol,\n    col: colsol,\n    u: u,\n    v: v\n  };\n}\n","import {\n  PlaneAssignment,\n  Formation,\n  Plane,\n  PlaneSlotAssignment\n} from \"./interfaces\"\nimport lapwrapper, { combineScoreFuns } from \"./lapwrapper\"\nimport * as d3 from \"d3\"\nimport PlanePosition from \"./PlanePosition\"\n\nconst slotPlane = (\n  plane: Plane,\n  formation: Formation,\n  formationSlotIds: number[]\n) => {\n  /**\n   * if formationSlotId is a base slot, should return 0 for the right base slot and a big number everywher eelse\n   * if formationSlotId is not a base slot, should return a big number if planeSlotId is a base slot\n   * @param formationSlotId\n   * @param planeSlotId\n   */\n  const baseScore = (formationSlotId: number, planeSlotId: number) => {\n    if (plane.position === PlanePosition.LEAD) {\n      if (formation.baseIds.includes(formationSlotId)) {\n        //formationSlotId is a base slot\n\n        //get which base slot it is\n        const baseIdIndex = formation.baseIds.findIndex(\n          id => id === formationSlotId\n        )\n\n        //0 score for that slot in plane, otherwise big\n        return planeSlotId === plane.baseIds[baseIdIndex] ? 0 : 10000\n      } else {\n        //formationSlotId is not a base slot\n\n        const baseSize = formation.baseIds.length\n\n        if (plane.baseIds.slice(0, baseSize).includes(planeSlotId)) {\n          //this plane slot should be in the base but isn't, give big score\n          return 10000\n        }\n      }\n    }\n  }\n\n  const specialSlotScore = (formationSlotId: number, planeSlotId: number) => {\n    if (plane.hasVideo) {\n      if (planeSlotId === plane.videoId) {\n        return 100000\n      }\n    }\n  }\n\n  const score = (formationSlotId: number, planeSlotId: number) => {\n    const slot = formation.slots[formationSlotId]\n    const { reverseBuildOrder } = slot\n    const { jr } = plane.slots[planeSlotId]\n\n    const slotJr = slot.offset.plus(slot.position).y\n\n    return Math.abs(jr) * reverseBuildOrder * 100 - slotJr * jr + 1000\n  }\n\n  return lapwrapper(\n    formationSlotIds,\n    d3.range(plane.filledSlots + (plane.hasVideo ? 1 : 0)),\n    plane.position === PlanePosition.LEAD\n      ? combineScoreFuns(specialSlotScore, baseScore)(score)\n      : combineScoreFuns(specialSlotScore)(score)\n  ).map(([formationSlotId, planeSlotId]) => ({ formationSlotId, planeSlotId }))\n}\n\nexport default function slotify(\n  formation: Formation,\n  planes: Plane[],\n  planeAssignments: PlaneAssignment[]\n): PlaneSlotAssignment[] {\n  return planes.flatMap((plane, planeId) => {\n    const formationSlotIds = planeAssignments\n      .filter(plane => plane.planeId === planeId)\n      .map(({ formationSlotId }) => formationSlotId)\n\n    const planeSlotAssignments = slotPlane(plane, formation, formationSlotIds)\n    return planeSlotAssignments.map(({ formationSlotId, planeSlotId }) => ({\n      formationSlotId,\n      planeId,\n      planeSlotId\n    }))\n  })\n}\n","import { Formation, Plane, SlotData } from \"./interfaces\"\nimport planeify from \"./planeify\"\nimport slotify from \"./slotify\"\nimport { rollup as d3Rollup } from \"d3-array\"\n\nexport default (formation: Formation, planes: Plane[]): SlotData[] => {\n  const planeAssignments = planeify(formation, planes)\n  const planeSlotAssignments = slotify(formation, planes, planeAssignments)\n\n  const planeIdToSortedFormationSlotIds = d3Rollup(\n    planeAssignments,\n    pa =>\n      pa.map(({ formationSlotId }) => formationSlotId).sort((a, b) => a - b),\n    ({ planeId }) => planeId\n  )\n\n  const formationSlotIdToByPlaneSlotId = new Map(\n    planes.flatMap((_, planeId, planes) => {\n      const priorSlots = planes\n        .slice(0, planeId)\n        .reduce((acc, p) => acc + p.filledSlots, 0)\n      return (planeIdToSortedFormationSlotIds.get(planeId) || []).map(\n        (formationSlotId, i) => [formationSlotId, priorSlots + i]\n      )\n    })\n  )\n\n  return planeSlotAssignments.map(\n    ({ formationSlotId, planeId, planeSlotId }) => ({\n      formationSlotId,\n      formation,\n      formationSlot: formation.slots[formationSlotId],\n      planeId,\n      plane: planes[planeId],\n      planeSlotId,\n      byPlaneSlotId: formationSlotIdToByPlaneSlotId.get(formationSlotId)!\n    })\n  )\n}\n","import Polar from \"../../geometry/Polar\"\n\nimport { range } from \"d3\"\nimport { FormationSlot, ComponentSlot } from \"../interfaces\"\n\nexport default abstract class Component {\n  slots: number\n  slotNumOffset: number\n\n  constructor(slots: number, slotNumOffset: number) {\n    if (slots < 0) {\n      throw new Error(`slots should be non-negative, was ${slots}`)\n    }\n    this.slots = slots\n    this.slotNumOffset = slotNumOffset\n  }\n\n  checkSlot(slot: number) {\n    if (slot < 0 || slot >= this.slots)\n      throw new Error(`slot should be in [0, ${this.slots}), was ${slot}`)\n  }\n\n  slotData(slot: number): ComponentSlot {\n    this.checkSlot(slot)\n\n    return {\n      offset: this.position(),\n      position: this.slotPosition(slot),\n      dockAngle: this.dockAngle(),\n      buildOrder: this.buildOrder(slot) + this.waiting()\n    }\n  }\n\n  allSlots(): ComponentSlot[] {\n    return range(this.slots).map(slot => this.slotData(slot))\n  }\n\n  //returns position of slot *relative to position of component*\n  slotPosition(s: number, offset = false) {\n    this.checkSlot(s)\n    const pos = new Polar(\n      this.radius(),\n      this.rotation() - 2 * s * this.dockAngle()\n    )\n    return offset ? pos.plus(this.position()) : pos\n  }\n\n  //returns position of left hand of slot *relative to center of formation*\n  dockPosition(s: number) {\n    this.checkSlot(s)\n    return this.slotPosition(s)\n      .rotate(-this.dockAngle())\n      .plus(this.position())\n  }\n\n  //how long this component is waiting before building\n  waiting(): number {\n    return Math.max(\n      ...this.parents().map(\n        parent => parent.waiting() + parent.maxBuildOrder()\n      ),\n      0\n    )\n  }\n\n  // return build order for last slot to build\n  abstract maxBuildOrder(): number\n\n  //should return build order for slot\n  abstract buildOrder(slot: number): number\n\n  //returns radius of this component\n  abstract radius(): number\n\n  //returns center of this component\n  abstract position(): Polar\n\n  //returns rotation in theta of where to place first slot\n  abstract rotation(): number\n\n  //returns angle between slot position and dock position, i.e. half of wingspan angle\n  abstract dockAngle(): number\n\n  //components this component is docked\n  abstract parents(): Component[]\n}\n","import { PI, TAU } from \"../../constants\"\nimport Component from \"./Component\"\nimport Polar from \"../../geometry/Polar\"\n\ninterface Dock {\n  c: Component\n  s: number\n}\n\nexport type PRRD = {\n  position: Polar;\n  radius: number;\n  rotation: number;\n  dockAngle: number;\n}\n\nexport default class Round extends Component {\n  left: Dock\n  right: Dock\n  firstRun: boolean\n  private _prrd: PRRD | undefined\n  /*\n  left and right are left hand and right hand docks. \n  Should be an with properties\n    - c: component\n    - s: slot index\n  */\n  constructor(slots: number, slotNumOffset: number, left: Dock, right: Dock) {\n    super(slots, slotNumOffset)\n    this.left = left\n    this.right = right\n    this.firstRun = true\n  }\n\n  parents() {\n    return Array.from(new Set([this.left.c, this.right.c]))\n  }\n\n  get prrd() {\n    if (!this._prrd) {\n      this._prrd = Round._positionRadiusRotationDockAngle(\n        this.left.c.dockPosition(this.left.s),\n        this.right.c.dockPosition(this.right.s),\n        this.slots\n      )\n    }\n    return this._prrd\n  }\n\n  //computes the centroid position\n  //component radius, and component rotation\n  //position, radius, rotation, dockangle\n  /*\n  leftDockPosition - where component's left hand dock is\n  rightDockPosition - where component's right hand dock is\n  slots - number of slots in this component\n  // parentCentroid - centroid of parent component, or center of formation. Used to pick the orien\n  */\n  static _positionRadiusRotationDockAngle(\n    leftDockPosition: Polar,\n    rightDockPosition: Polar,\n    slots: number\n  ): PRRD {\n    const dockDistance = leftDockPosition.distanceFrom(rightDockPosition)\n    const { radius, theta } = Round.__computeRadiusTheta(slots, dockDistance)\n\n    const angleDelta = leftDockPosition.angleTo(rightDockPosition)\n    const position = leftDockPosition.plus(\n      new Polar(radius, angleDelta - (PI - theta) / 2)\n    )\n\n    //the rotation is where the first slot (docking w/ right hand) goes\n    // TAU - theta is the whole arc angle, and their position is 1/(2*slots) around\n    const dockAngle = (TAU - theta) / (2 * slots)\n    const rotation = position.angleTo(rightDockPosition) - dockAngle\n\n    return { position, radius, rotation, dockAngle }\n  }\n\n  position() {\n    return this.prrd.position\n  }\n\n  radius() {\n    return this.prrd.radius\n  }\n\n  rotation() {\n    return this.prrd.rotation\n  }\n\n  dockAngle() {\n    return this.prrd.dockAngle\n  }\n\n  maxBuildOrder() {\n    return Math.ceil(this.slots / 2)\n  }\n\n  buildOrder(slot: number) {\n    this.checkSlot(slot)\n\n    //build from the ends\n    return Math.min(slot + 1, this.slots - slot)\n  }\n\n  // computes radius and angle of cutoff for a circle with the side cut off\n  // with length of the remaining curve part = s\n  // and length of flat bit = d\n  // I think it's O(-log(eps))\n  static __computeRadiusTheta(\n    s: number,\n    d: number,\n    eps = Math.sqrt(Number.EPSILON)\n  ) {\n    if (d < 0 || d > s) {\n      console.error(`d: ${d}, s: ${s}`)\n      throw new Error(\"d must be in [0, s]\")\n    }\n    var iters = 0\n    //try picking theta between lower and upper\n    function iter(lower = 0, upper = PI): number {\n      if (iters >= 100) {\n        throw new Error(\"didn't converge\")\n      }\n      iters = iters + 1\n      const mid = (upper + lower) / 2\n      // if ((upper - lower) < eps) {\n      //   return mid\n      // }\n\n      //candidate theta = mid\n      //compute radius from theta\n      const r = d / (2 * Math.sin(mid / 2))\n      //compute s from radius, theta\n      const ss = r * (TAU - mid)\n\n      if (Math.abs(ss - s) < eps) {\n        return mid\n      }\n\n      //if computed s is too big, try a bigger theta, else try smaller\n      return ss > s ? iter(mid, upper) : iter(lower, mid)\n    }\n    //iter returns theta, compute radius\n    const theta = iter()\n    return {\n      radius: s / (TAU - iter()),\n      theta: theta\n    }\n  }\n}\n","import Component from \"./Component\"\nimport Round, { PRRD } from \"./Round\"\nimport Polar from \"../../geometry/Polar\"\n\ninterface Dock {\n  c: Component\n  s: number\n}\n\nexport default class Whacker extends Component {\n  dock: Dock\n  hand: string\n  private _prrd: PRRD | undefined\n\n  /*\n  slots - \n  dock - { component, slot } this whacker is docked on\n  hand - docked with 'left' or 'right'\n \n  modeled as part of a pod (Round docked on one person) with slots * 2 + 1 slots\n  */\n  constructor(slots: number, slotNumOffset: number, dock: Dock, hand: string) {\n    super(slots, slotNumOffset)\n    this.dock = dock\n\n    if (hand !== \"left\" && hand !== \"right\")\n      throw new Error(\"Hand should be 'left' or 'right'\")\n    this.hand = hand\n  }\n\n  parents() {\n    return [this.dock.c]\n  }\n\n  //left hand dock position of the imaginary pod\n  _left() {\n    const { c, s } = this.dock\n    return this.hand === \"left\"\n      ? c.dockPosition(s)\n      : c\n          .slotPosition(s)\n          .rotate(-3 * c.dockAngle()) //move 1.5 slots to the left\n          .plus(c.position())\n  }\n\n  //right hand dock position of the imaginary pod\n  _right() {\n    const { c, s } = this.dock\n    return this.hand === \"left\"\n      ? c\n          .slotPosition(s)\n          .rotate(c.dockAngle()) //move half a slot to the right\n          .plus(c.position())\n      : c.dockPosition(s)\n  }\n\n  get prrd() {\n    if (!this._prrd) {\n      const psuedoSlots = this.slots * 2 + 1\n\n      this._prrd = Round._positionRadiusRotationDockAngle(\n        this._left(),\n        this._right(),\n        psuedoSlots\n      )\n\n      if (this.hand === \"left\") {\n        const invisibleSlots = psuedoSlots - this.slots\n        const { rotation, dockAngle } = this._prrd\n        const fixedRotation = Polar.unspin(\n          rotation - invisibleSlots * 2 * dockAngle\n        ) //rotate two slots to the right\n        this._prrd.rotation = fixedRotation\n      }\n    }\n    return this._prrd\n  }\n\n  maxBuildOrder() {\n    return this.slots\n  }\n\n  buildOrder(slot: number) {\n    this.checkSlot(slot)\n    return this.hand === \"left\" ? this.slots - slot : slot + 1\n  }\n\n  position() {\n    return this.prrd.position\n  }\n\n  radius() {\n    return this.prrd.radius\n  }\n\n  rotation() {\n    return this.prrd.rotation\n  }\n\n  dockAngle() {\n    return this.prrd.dockAngle\n  }\n}\n","import Polar from \"../../geometry/Polar\"\nimport Component from \"./Component\"\nimport { PI, TAU } from \"../../constants\"\n\nexport default class Base extends Component {\n  _rotation: number\n  constructor(slots: number, rotation = (3 * PI) / 2) {\n    super(slots, 0)\n    this._rotation = rotation\n  }\n\n  //angle to the first slot\n  rotation() {\n    return this._rotation\n  }\n\n  position() {\n    return new Polar(0, 0)\n  }\n\n  // circumference = 2 PI r\n  // circumference = # slots\n  radius() {\n    return this.slots / TAU\n  }\n\n  //angle between slot position and dock position\n  dockAngle() {\n    return TAU / (this.slots * 2)\n  }\n\n  maxBuildOrder(): number {\n    return 1\n  }\n\n  buildOrder(slot: number) {\n    this.checkSlot(slot)\n    return 1\n  }\n\n  parents() {\n    return []\n  }\n}\n","import { BaseSlot, SlotCollection, NumDict } from \"./interfaces\"\nimport arrayToDict from \"../util/arrayToDict\"\n\nexport default abstract class AbstractSlotCollection<S extends BaseSlot>\n  implements SlotCollection<S> {\n  private _slots?: S[]\n\n  protected abstract computeSlots(): S[]\n\n  get slots(): S[] {\n    if (!this._slots) {\n      this._slots = this.computeSlots()\n    }\n\n    return this._slots\n  }\n}\n","import Round from \"./components/Round\"\nimport Whacker from \"./components/Whacker\"\nimport Base from \"./components/Base\"\nimport Component from \"./components/Component\"\nimport AbstractSlotCollection from \"./AbstractSlotCollection\"\nimport { FormationSlot, Formation } from \"./interfaces\"\nimport * as d3 from \"d3\"\nimport { FormationType } from \"../store/types\"\nimport { PI } from \"../constants\"\nimport { Box } from \"../geometry/Box\"\n\ntype Ring = Component[]\ntype Dock = { c: Component; s: number }\n\n/**\n * computes the number of slots in a ring\n * @param {Number} ring index of ring,\n *         ring 0 = base,\n *         ring 1 = 1st pods\n *         ring 2 = 2nd pods\n *         ring 3 = if baseSize > 4, bridges, otherwise just pods on out\n *         ring 4 = if baseSize > 4, then pods on bridges in ring 3, otherwise just pods on podLines\n *         ring 5... pod lines on out\n */\nconst slotsInRing = (baseSize: number, ring: number): number => {\n  const podLines = Math.round(baseSize / 2)\n  const bridges = podLines > 2\n  if (ring === 0) {\n    return baseSize\n  }\n  if (ring === 1) {\n    return baseSize + podLines * 5\n  }\n  if (ring === 2) {\n    return baseSize + podLines * 10\n  }\n  if (ring === 3) {\n    return (\n      slotsInRing(baseSize, ring - 1) + (bridges ? 3 * podLines : 5 * podLines)\n    )\n  }\n  if (ring === 4) {\n    return (\n      slotsInRing(baseSize, ring - 1) + (bridges ? 5 * podLines : 5 * baseSize)\n    )\n  }\n  return (\n    slotsInRing(baseSize, 4) +\n    (ring - 4) * (bridges ? 5 * podLines : 5 * baseSize)\n  )\n}\n\n/**\n * gets dock positions for next ring given currently filled rings\n * @param rings an array of rings, 0th starting at base and going out\n */\nconst nextDockPositions = (\n  baseSize: number,\n  rings: Ring[]\n): { left: Dock; right: Dock }[] => {\n  if (rings.length > 10) {\n    throw new Error(\"somethings fucky\")\n  }\n  const bridges = baseSize !== 4\n\n  if (rings.length === 1) {\n    const base = rings[0][0]\n\n    return d3.range(0, baseSize, 2).map(slot => ({\n      left: { c: base, s: slot },\n      right: { c: base, s: (slot + baseSize - 1) % baseSize }\n    }))\n  }\n  if (\n    !bridges ||\n    rings.length === 2 ||\n    rings.length === 4 ||\n    rings.length >= 6\n  ) {\n    // if we're not using bridges\n    // or last ring (1) is 1st pods (and we need 2nd pods)\n    // or last ring (3) is bridges (and we need 2nd pods on those bridges)\n    // or we're way out (last ring >= 5)\n    // then we want pods on everything in the last ring\n    return rings[rings.length - 1].map(component => {\n      const isPod = component.slots === 5\n      return {\n        left: { c: component, s: 1 + (isPod ? 1 : 0) },\n        right: { c: component, s: 0 + (isPod ? 1 : 0) }\n      }\n    })\n  }\n  if (bridges && rings.length === 3) {\n    // ring 3 is bridges if there are bridges\n    const firstPods = rings[1]\n    const numBridges = firstPods.length\n    return d3.range(numBridges).map(bridgeNum => ({\n      left: { c: firstPods[(bridgeNum + 1) % numBridges], s: 0 },\n      right: { c: firstPods[bridgeNum], s: 3 }\n    }))\n  }\n  if (bridges && rings.length === 5) {\n    // if bridges, ring 5 is 2nd pods on bridges\n    const secondPods = rings[2]\n    const bridgeSecondPods = rings[4]\n    return secondPods\n      .flatMap((secondPod, idx) => [secondPod, bridgeSecondPods[idx]])\n      .map(component => {\n        return {\n          left: { c: component, s: component.slots === 5 ? 2 : 1 }, //5 -> pod, !5 (3) -> bridge\n          right: { c: component, s: component.slots === 5 ? 1 : 0 }\n        }\n      })\n  }\n  throw new Error(\"mmm\")\n}\n\n/**\n * this takes an array of rings starting with at least the Base, and\n * adds rings until all slots are included\n * @param {*} rings array of rings. (a ring is an array of components)\n */\nconst addRings = (slots: number, baseSize: number, rings: Ring[]): Ring[] => {\n  const completeRings = rings.length - 1\n\n  //compute slots in next ring\n  const nextRingSlots =\n    Math.min(slots, slotsInRing(baseSize, completeRings + 1)) -\n    slotsInRing(baseSize, completeRings)\n\n  if (nextRingSlots <= 0) return rings //we're done\n\n  const dockPositions = nextDockPositions(baseSize, rings)\n\n  // here a 'group' is either a pod, or, if there are less than 5 slots, two whackers\n  const slotGroups = dockPositions.length\n\n  const slotsPerGroup = Math.floor(nextRingSlots / slotGroups)\n  const groupsWithExtraSlot = nextRingSlots % slotGroups\n\n  const nextRing: Ring = dockPositions.flatMap(\n    ({ left, right }, groupNum): Ring => {\n      //slots in this group\n      const slotsToFill =\n        slotsPerGroup + (groupNum < groupsWithExtraSlot ? 1 : 0)\n      const isPod = left.c === right.c //left and right docking on same component is a pod, else bridge\n      const totalSlotsInGroup = isPod ? 5 : 3\n\n      const priorSlots =\n        slotsInRing(baseSize, completeRings) + //number of slots in prior rings\n        slotsPerGroup * groupNum + //number of slots in prior groups in this ring\n        Math.min(groupsWithExtraSlot, groupNum) //an extra slot per prior group, up to groupsWithExtraSlot\n\n      if (slotsToFill === totalSlotsInGroup) {\n        //if we have to fill the whole group, it's a pod\n        return [new Round(totalSlotsInGroup, priorSlots, left, right)]\n      } else {\n        //whackers\n        const leftHandSlots = Math.floor(slotsToFill / 2)\n        const rightHandSlots = leftHandSlots + (slotsToFill % 2) //if odd number, right hand whacker gets the extra\n        const whackers = []\n        if (rightHandSlots > 0) {\n          whackers.push(\n            new Whacker(rightHandSlots, priorSlots, right, \"right\")\n          )\n        }\n        if (leftHandSlots > 0) {\n          whackers.push(\n            new Whacker(\n              leftHandSlots,\n              priorSlots + rightHandSlots,\n              left,\n              \"left\"\n            )\n          )\n        }\n\n        return whackers\n      }\n    }\n  )\n  //recurse, add more rings to this prior plus this ring\n  return addRings(slots, baseSize, [...rings, nextRing])\n}\n\nclass FormationImpl extends AbstractSlotCollection<FormationSlot>\n  implements Formation {\n  components: Component[]\n  type: FormationType\n  constructor(components: Component[], type: FormationType) {\n    super()\n    this.components = components\n    this.type = type\n  }\n\n  protected computeSlots(): FormationSlot[] {\n    const reverseBuildOrder = this.reverseBuildOrder()\n    return this.components\n      .flatMap(c => c.allSlots())\n      .map((s, idx) => {\n        const adjustedSlot =\n          this.type === FormationType.HU\n            ? s\n            : {\n                ...s,\n                position: s.position.flip(PI / 2),\n                offset: s.offset.flip(PI / 2)\n              }\n        return { ...adjustedSlot, reverseBuildOrder: reverseBuildOrder[idx] }\n      })\n  }\n\n  get baseIds(): number[] {\n    return this.components\n      .find(c => c instanceof Base)!\n      .allSlots()\n      .map((_, idx) => idx)\n  }\n\n  get radius(): number {\n    const slotRadi = this.slots.map(\n      ({ position, offset }) => position.plus(offset).radius\n    )\n    return Math.max(...slotRadi)\n  }\n\n  get box(): Box {\n    return this.slots.reduce(\n      (b, { position, offset }) => b.expand(position.plus(offset)),\n      new Box(0, 0, 0, 0)\n    )\n  }\n\n  reverseBuildOrder() {\n    const parentToChildren = new Map(\n      this.components.map(component => [component, [] as Component[]])\n    )\n\n    this.components\n      .flatMap(child => child.parents().map(parent => ({ parent, child }))) //get all parent child pairs (many to many)\n      .forEach(({ parent, child }) =>\n        parentToChildren.get(parent)!.push(child)\n      )\n\n    const componentToWaiting = new Map<Component, number>()\n\n    const waiting = (component: Component): number => {\n      if (!componentToWaiting.has(component)) {\n        const children = parentToChildren.get(component)!\n        const numWaiting = Math.max(\n          ...children.map(child => waiting(child)! + child.maxBuildOrder()),\n          0\n        )\n\n        componentToWaiting.set(component, numWaiting)\n      }\n      return componentToWaiting.get(component)!\n    }\n    // waiting(this.components[0])\n    return this.components.flatMap(c => {\n      return d3\n        .range(c.slots)\n        .map(s => waiting(c) + c.maxBuildOrder() - c.buildOrder(s))\n    })\n  }\n}\n\n/**\n * Builds a formation using the following rules until we run out of slots\n *    1) Start with the base\n *    2) Add first pods on every other base slot, starting with the slot going up jump run moving left\n *    3) Add second pods on first pods\n *    4) If base size > 4, build bridges between frist pods\n *    5) If there are bridges, build 2nd pods on bridges\n *    6) Build pods on each pod line on out to infinity!\n *\n * If there are not enough slots to complete a ring of pods/bridges, then build whackers\n *\n * @param {Number} slots slots in this formation\n * @param {Number} baseSize\n * @returns an array of Components\n */\nexport default function buildFormation(\n  slots: number,\n  baseSize: number,\n  type: FormationType\n): Formation {\n  return new FormationImpl(\n    addRings(slots, baseSize, [[new Base(baseSize)]]).flat(),\n    type\n  )\n}\n","import { createSelector } from \"reselect\"\nimport {\n  PlaneType,\n  Slotting,\n  FormationConfigState,\n  PlaneState\n} from \"../store/types\"\nimport { AppState } from \"../store/reducer\"\n\nexport const getFormationConfig = (state: AppState): FormationConfigState =>\n  state.formationConfig\nexport const getPlanesConfig = (state: AppState): PlaneState[] =>\n  state.planesConfig\n\nexport type SlotOptions = {\n  slots: number;\n  min: number;\n  max: number;\n}\n\nconst slotOptions = (\n  formationConfig: { baseSize: number; slots: number },\n  planesConfig: PlaneState[]\n): SlotOptions => {\n  const { min, max } = planesConfig\n    .filter(({ type }) => type !== PlaneType.NONE)\n    .map(({ slotting, slots, hasVideo }) => ({\n      //compute min/max slots on each plane\n      planeMin: slotting === Slotting.FILL ? slots : 0,\n      planeMax: slots - (hasVideo ? 1 : 0)\n    }))\n    .reduce(\n      ({ min, max }, { planeMin, planeMax }) => ({\n        //add min/max slots for all planes\n        min: min + planeMin,\n        max: max + planeMax\n      }),\n      { min: 0, max: 0 }\n    )\n\n  const fixedMin = Math.max(min, formationConfig.baseSize)\n\n  return {\n    min: fixedMin,\n    max,\n    slots: Math.max(Math.min(formationConfig.slots, max), fixedMin)\n  }\n}\n\n/**\n * computes min, max, and current number of slots based on plane and formation config\n *\n * if current slots is outside of [min, max], it is set to min or max\n */\nexport default createSelector(\n  [getFormationConfig, getPlanesConfig],\n  slotOptions\n)\n","import AbstractSlotCollection from \"./AbstractSlotCollection\"\nimport { PlaneSlot, Plane } from \"./interfaces\"\nimport PlanePosition from \"./PlanePosition\"\nimport { TAU } from \"../constants\"\nimport * as d3 from \"d3\"\nimport { PlaneType } from \"../store/types\"\n\nexport class PlaneImpl extends AbstractSlotCollection<PlaneSlot>\n  implements Plane {\n  position: PlanePosition\n  filledSlots: number\n  type: PlaneType\n  hasVideo: boolean\n  hasSuperFloat: boolean\n\n  constructor(\n    position: PlanePosition,\n    filledSlots: number,\n    type: PlaneType,\n    hasVideo: boolean,\n    hasSuperFloat: boolean\n  ) {\n    super()\n    this.position = position\n    this.filledSlots = filledSlots\n    this.type = type\n    this.hasVideo = hasVideo\n    this.hasSuperFloat = hasSuperFloat\n  }\n\n  protected computeSlots(): PlaneSlot[] {\n    return d3\n      .range(24)\n      .map(x => ({ jr: x - 14 }))\n      .reverse()\n  }\n\n  get theta() {\n    switch (this.position) {\n      case PlanePosition.LEAD:\n        return (3 * TAU) / 12\n      case PlanePosition.LT:\n        return (7 * TAU) / 12\n      case PlanePosition.RT:\n        return (11 * TAU) / 12\n    }\n  }\n\n  get baseIds() {\n    switch (this.type) {\n      case PlaneType.OTTER:\n        return [7, 8, 9, 10, 11, 4, 3, 2, 5, 12]\n      case PlaneType.SKYVAN:\n        return [3, 4, 5, 8, 7, 6, 0, 1, 9, 10]\n      default:\n        return d3.range(10)\n    }\n  }\n\n  get videoId() {\n    switch (this.type) {\n      case PlaneType.OTTER:\n        return 0\n      case PlaneType.SKYVAN:\n        return 2\n      default:\n        return 10\n    }\n  }\n\n  get superFloatId() {\n    switch (this.type) {\n      case PlaneType.OTTER:\n        return 1\n      case PlaneType.SKYVAN:\n        return 0\n      default:\n        return 11\n    }\n  }\n}\n","import { PlaneState, PlaneType, Slotting } from \"../store/types\"\nimport { Plane } from \"./interfaces\"\nimport PlanePosition from \"./PlanePosition\"\nimport { PlaneImpl } from \"./planes\"\n\ntype FilledPlane = {\n  position: PlanePosition;\n  filledSlots: number;\n}\n\nconst countFilledSlots = (filledPlanes: FilledPlane[]) =>\n  filledPlanes.reduce((s, { filledSlots }) => s + filledSlots, 0)\n\n/**\n *\n * @param unfilledPlanes array of objects representing planes with slots left.\n *                       should have properties plane (lead, lt, rt), slots (total slots in plane)\n * @param slotsRemaining slots to put in unfilledPlanes\n * @param baseSize if unfilledPlanes includes lead plane, at least `baseSize` should go in it\n * @param filledPlanes array of planes already full, or partially full if slotsRemaining = 0\n */\nconst slotUnfilledPlanes = (\n  unfilledPlanes: PlaneState[],\n  slotsRemaining: number,\n  baseSize: number,\n  filledPlanes: FilledPlane[]\n): FilledPlane[] => {\n  if (unfilledPlanes.length === 0) {\n    return filledPlanes\n  }\n\n  const slotsPerPlane = slotsRemaining / unfilledPlanes.length\n\n  // if spreading remaing slots evently doesn't put enough in the lead plane for the base, fill that now\n  const lead = unfilledPlanes.find(\n    ({ position }) => position === PlanePosition.LEAD\n  )\n  if (lead && baseSize > slotsPerPlane) {\n    return slotUnfilledPlanes(\n      unfilledPlanes.filter(({ position }) => position !== PlanePosition.LEAD),\n      slotsRemaining - baseSize,\n      baseSize,\n      [{ position: PlanePosition.LEAD, filledSlots: baseSize }, ...filledPlanes]\n    )\n  }\n\n  //get planes with fewer total slots than slotsPerPlane and fill em up\n  const littlePlanes = unfilledPlanes\n    .filter(({ slots }) => slots < slotsPerPlane)\n    .map(({ position, slots }) => ({ position, filledSlots: slots }))\n\n  if (littlePlanes.length) {\n    const littlePlaneLabels = littlePlanes.map(({ position }) => position)\n    return slotUnfilledPlanes(\n      unfilledPlanes.filter(\n        ({ position }) => !littlePlaneLabels.includes(position)\n      ),\n      slotsRemaining - countFilledSlots(littlePlanes),\n      baseSize,\n      [...filledPlanes, ...littlePlanes]\n    )\n  }\n\n  // if we've gotten this far, there is room for at least slotsPerPlane on each unfilledPlane\n  const minSlotsPerPlane = Math.floor(slotsPerPlane)\n  const extras = slotsRemaining % minSlotsPerPlane\n\n  // if the lead plane is still in the mix, then always put one less on that plane\n  if (extras > 0 && lead) {\n    const filledLead = {\n      position: PlanePosition.LEAD,\n      filledSlots: minSlotsPerPlane\n    }\n    return slotUnfilledPlanes(\n      unfilledPlanes.filter(({ position }) => position !== PlanePosition.LEAD),\n      slotsRemaining - minSlotsPerPlane,\n      baseSize,\n      [filledLead, ...filledPlanes]\n    )\n  }\n\n  //okay now fill the rest. the first `extras` planes will get an extra\n  const remainingFilled = unfilledPlanes.map(({ position }, i) => ({\n    position,\n    filledSlots: minSlotsPerPlane + (extras > i ? 1 : 0)\n  }))\n\n  //phew\n  return [...filledPlanes, ...remainingFilled]\n}\n\n/**\n *\n * @param baseSize\n * @param planesConfig\n * @param slotOptions\n */\nconst filledPlanes = (\n  slots: number,\n  baseSize: number,\n  planesConfig: PlaneState[]\n): FilledPlane[] => {\n  const filledPlanes = planesConfig\n    .filter(\n      ({ type, slotting }) =>\n        type !== PlaneType.NONE && slotting === Slotting.FILL\n    )\n    .map(({ position, slots }) => ({ position, filledSlots: slots }))\n\n  const unfilledPlanes = planesConfig.filter(\n    ({ type, slotting }) =>\n      type !== PlaneType.NONE && slotting !== Slotting.FILL\n  )\n\n  return slotUnfilledPlanes(\n    unfilledPlanes,\n    slots - countFilledSlots(filledPlanes),\n    baseSize,\n    filledPlanes\n  )\n}\n\nexport default (\n  slots: number,\n  baseSize: number,\n  planesConfig: PlaneState[]\n): Plane[] => {\n  const slotsMap = new Map(\n    filledPlanes(slots, baseSize, planesConfig).map(\n      ({ position, filledSlots }) => [position, filledSlots]\n    )\n  )\n\n  return planesConfig.map(\n    ({ position, type, hasVideo, hasSuperFloat }) =>\n      new PlaneImpl(\n        position,\n        slotsMap.get(position)!,\n        type,\n        hasVideo,\n        hasSuperFloat\n      )\n  )\n}\n","import { createSelector } from \"reselect\"\nimport buildSlots from \"../formation/buildSlots\"\nimport buildFormation from \"../formation/buildFormation\"\nimport getSlotOptions from \"./getSlotOptions\"\nimport buildPlanes from \"../formation/buildPlanes\"\nimport { AppState } from \"../store/reducer\"\nimport { PlaneType, FormationType } from \"../store/types\"\n\nexport { default as getSlotOptions } from \"./getSlotOptions\"\n\nconst getSlots = (state: AppState) => getSlotOptions(state).slots\nconst getBaseSize = (state: AppState): number => state.formationConfig.baseSize\nconst getFormationType = (state: AppState): FormationType =>\n  state.formationConfig.type\nconst getFilteredPlanesConfig = (state: AppState) => {\n  return state.planesConfig.filter(({ type }) => type !== PlaneType.NONE)\n}\n\nexport const getFormation = createSelector(\n  [getSlots, getBaseSize, getFormationType],\n  buildFormation\n)\nexport const getPlanes = createSelector(\n  [getSlots, getBaseSize, getFilteredPlanesConfig],\n  buildPlanes\n)\nexport const getAllSlots = createSelector(\n  [getFormation, getPlanes],\n  buildSlots\n)\n","import { Formation, Plane, PlaneAssignment } from \"./interfaces\"\nimport PlanePosition from \"./PlanePosition\"\nimport Polar from \"../geometry/Polar\"\nimport { PI } from \"../constants\"\nimport approxeq from \"../util/approxeq\"\nimport lapwrapper, { combineScoreFuns } from \"./lapwrapper\"\nimport { range } from \"d3\"\n\n/**\n * Puts people in planes\n * @param formation\n * @param planes lead assumed to be first\n */\nexport default function planeify(\n  formation: Formation,\n  planes: Plane[]\n): PlaneAssignment[] {\n  if (planes[0].position !== PlanePosition.LEAD) {\n    throw new Error(\"lead plane should be first\")\n  }\n  const LEAD_ID = 0\n\n  // ### rule based slotting ###\n  // base in lead f\n\n  const baseScores = (slotId: number, planeId: number) => {\n    if (formation.baseIds.includes(slotId)) {\n      return planeId === LEAD_ID ? 0 : 1000\n    }\n  }\n\n  //todo add superfloat\n\n  // ### end rule based slotting ###\n\n  //using linear assignment problem formulation\n\n  const angleScore = (slotId: number, planeId: number) => {\n    const slot = formation.slots[slotId]\n    const plane = planes[planeId]\n    const slotPosition = slot.position.plus(slot.offset)\n    const diff = Polar.unspin(slotPosition.theta - plane.theta)\n\n    //penalize if component is on other side of jumprun from plane\n    //componentTheta is component angle rotated 90 right\n    // if > pi, right side of jump run. if < pi, left side of jump run\n    const componentTheta = Polar.unspin(slot.offset.theta - PI / 2)\n    const componentPosition =\n      approxeq(componentTheta, 0) || approxeq(componentTheta, PI)\n        ? PlanePosition.LEAD\n        : componentTheta > PI\n        ? PlanePosition.RT\n        : PlanePosition.LT\n\n    const penalty =\n      componentPosition === PlanePosition.LEAD ||\n      plane.position === PlanePosition.LEAD ||\n      componentPosition === plane.position\n        ? 0\n        : PI\n\n    return Math.min(diff, 2 * PI - diff) + penalty\n  }\n\n  const unslotted = range(formation.slots.length)\n  const planeArray = planes.flatMap((plane, planeId) =>\n    (Array(plane.filledSlots) as number[]).fill(planeId)\n  )\n\n  const assignments = lapwrapper(\n    unslotted,\n    planeArray,\n    combineScoreFuns(baseScores)(angleScore)\n  )\n\n  return assignments.map(([formationSlotId, planeId]) => ({\n    formationSlotId,\n    planeId\n  }))\n}\n","import { connect } from \"react-redux\"\nimport FormationComponent from \"./FormationComponent\"\nimport { getFormation, getPlanes, getAllSlots } from \"../selectors\"\nimport { AppState } from \"../store/reducer\"\nimport { fillFunction, labelFunction } from \"../drawing/slotdatafuns\"\n\nconst mapStateToProps = (state: AppState) => ({\n  formation: getFormation(state),\n  planes: getPlanes(state),\n  slots: getAllSlots(state),\n  viewConfig: state.viewConfig,\n  fill: fillFunction(state.viewConfig.colorBy),\n  label: labelFunction(state.viewConfig.numberBy)\n})\n\nexport default connect(mapStateToProps)(FormationComponent)\n\n// console.log({debounceRender})\n\n// export default connect(\n//     mapStateToProps\n// )(debounceRender.debounceRender(FormationComponent, 100))\n","import React from \"react\"\n\ntype PanelContextType = {\n  expanded: string;\n  setExpanded: (panel: string) => void;\n}\nexport default React.createContext<PanelContextType>({\n  expanded: \"\",\n  setExpanded: (_: String) => {\n    return\n  }\n})\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/styles\"\nimport { FormControl, InputLabel, Select, MenuItem } from \"@material-ui/core\"\nimport { isMobile } from \"react-device-detect\"\nimport { NumDict } from \"../../formation/interfaces\"\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing.unit,\n    minWidth: 180\n  }\n}))\n\nfunction makeOpts(opts: number[], desc?: NumDict<string>) {\n  return opts.map(opt =>\n    isMobile ? (\n      <option key={opt} value={opt}>\n        {desc ? desc[opt] : opt}\n      </option>\n    ) : (\n      <MenuItem key={opt} value={opt}>\n        {desc ? desc[opt] : opt}\n      </MenuItem>\n    )\n  )\n}\n\ntype Props = {\n  label: string;\n  opts: number[];\n  desc?: NumDict<string>;\n  value: number;\n  onSet: (value: number) => void;\n}\nexport default (props: Props) => {\n  const { label, value, onSet, opts, desc } = props\n  const classes = useStyles()\n  return (\n    <FormControl className={classes.root}>\n      <InputLabel>{label}</InputLabel>\n      <Select\n        value={value}\n        onChange={e => onSet(parseInt(e.target.value))}\n        native={isMobile}\n      >\n        {makeOpts(opts, desc)}\n      </Select>\n    </FormControl>\n  )\n}\n","import ExpansionPanel from \"@material-ui/core/ExpansionPanel\"\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\"\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\"\nimport Typography from \"@material-ui/core/Typography\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport { makeStyles } from \"@material-ui/styles\"\nimport React, { ReactNode, useContext } from \"react\"\nimport PanelContext from \"./PanelContext\"\n\nconst useStyles = makeStyles(theme => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"50%\",\n    flexShrink: 0\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary\n  },\n  form: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 180\n  }\n}))\n\ntype Props = {\n  name: string;\n  heading1: string;\n  heading2: string;\n  children?: ReactNode;\n}\nconst SettingsPanel = (props: Props) => {\n  const classes = useStyles()\n  const { name, children, heading1, heading2 } = props\n  const { expanded, setExpanded } = useContext(PanelContext)\n  const handleChange = (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n    setExpanded(isExpanded ? name : \"\")\n  }\n\n  return (\n    <ExpansionPanel expanded={expanded === name} onChange={handleChange} square>\n      <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n        <Typography className={classes.heading}>{heading1}</Typography>\n        <Typography className={classes.secondaryHeading}>{heading2}</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <form className={classes.form} autoComplete=\"off\">\n          {children}\n        </form>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  )\n}\n\nexport default SettingsPanel\n","import { FormControl, Typography } from \"@material-ui/core\"\nimport Slider from \"@material-ui/lab/Slider\"\nimport { makeStyles } from \"@material-ui/styles\"\nimport * as d3 from \"d3\"\nimport React, { Dispatch } from \"react\"\nimport { isMobile } from \"react-device-detect\"\nimport { connect } from \"react-redux\"\nimport getSlotOptions, { SlotOptions } from \"../../selectors/getSlotOptions\"\nimport {\n  baseSize,\n  formationSlots,\n  setFormationType\n} from \"../../store/actions\"\nimport { AppState } from \"../../store/reducer\"\nimport { FormationConfigActionTypes, FormationType } from \"../../store/types\"\nimport Select from \"./Select\"\nimport SettingsPanel from \"./SettingsPanel\"\n\nconst useStyles = makeStyles(theme => ({\n  slots: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  slider: {\n    paddingLeft: theme.spacing.unit,\n    paddingRight: theme.spacing.unit\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 180\n  }\n}))\n\nconst formationTypeDesc = {\n  [FormationType.HD]: \"Head Down (from below)\",\n  [FormationType.HD_ABOVE]: \"Head Down (from above)\",\n  [FormationType.HU]: \"Head Up (from above)\"\n}\n\ntype Props = {\n  slotsOptions: SlotOptions;\n  baseSize: number;\n  formationType: FormationType;\n  onFormationSlotsSet: (slots: number) => void;\n  onBaseSizeSet: (size: number) => void;\n  onSetFormationType: (formationType: FormationType) => void;\n}\nconst Slots: React.FunctionComponent<Props> = (props: Props) => {\n  const {\n    slotsOptions: { min, max, slots },\n    baseSize,\n    formationType,\n    onFormationSlotsSet,\n    onBaseSizeSet,\n    onSetFormationType\n  } = props\n\n  const classes = useStyles()\n\n  const baseSizes = [4, 6, 8, 10]\n  const slotItems = d3.range(min, max)\n  const formationTypes = [\n    FormationType.HD,\n    FormationType.HD_ABOVE,\n    FormationType.HU\n  ]\n\n  const slotForm = isMobile ? (\n    <Select\n      label=\"Slots\"\n      value={slots}\n      opts={slotItems}\n      onSet={onFormationSlotsSet}\n    />\n  ) : (\n    <FormControl className={classes.formControl}>\n      <Typography variant=\"caption\" gutterBottom>\n        Slots\n      </Typography>\n      <div className={classes.slots}>\n        <Typography>{min}</Typography>\n        <Slider\n          min={min}\n          max={max}\n          value={slots}\n          step={1}\n          className={classes.slider}\n          onChange={(_, value) => onFormationSlotsSet(value)}\n        />\n        <Typography>{max}</Typography>\n      </div>\n    </FormControl>\n  )\n\n  return (\n    <React.Fragment>\n      <SettingsPanel name=\"slots\" heading1=\"Slots\" heading2={slots.toString()}>\n        {slotForm}\n      </SettingsPanel>\n      <SettingsPanel\n        name=\"baseSize\"\n        heading1=\"BaseSize\"\n        heading2={baseSize.toString()}\n      >\n        <Select\n          label=\"Base Size\"\n          value={baseSize}\n          opts={baseSizes}\n          onSet={onBaseSizeSet}\n        />\n      </SettingsPanel>\n      <SettingsPanel\n        name=\"formationType\"\n        heading1=\"Formation Type\"\n        heading2={formationTypeDesc[formationType]}\n      >\n        <Select\n          label=\"Formation Type\"\n          value={formationType}\n          opts={formationTypes}\n          desc={formationTypeDesc}\n          onSet={onSetFormationType}\n        />\n      </SettingsPanel>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  slotsOptions: getSlotOptions(state),\n  baseSize: state.formationConfig.baseSize,\n  formationType: state.formationConfig.type\n})\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch<FormationConfigActionTypes>\n) => ({\n  onFormationSlotsSet: (slots: number) => dispatch(formationSlots(slots)),\n  onBaseSizeSet: (size: number) => dispatch(baseSize(size)),\n  onSetFormationType: (type: FormationType) => dispatch(setFormationType(type))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Slots)\n","import {\n  SET_BASE_SIZE,\n  SET_FORMATION_SLOTS,\n  SET_FORMATION_TYPE,\n  SET_PLANE_SLOTTING,\n  SET_PLANE_TYPE,\n  SET_PLANE_SLOTS,\n  SET_COLOR_BY,\n  SET_NUMBER_BY,\n  ColorOption,\n  NumberOption,\n  PlaneType,\n  Slotting,\n  FormationType,\n  FormationConfigActionTypes,\n  PlanesConfigActionTypes,\n  ViewConfigActionTypes,\n  ShowOption,\n  SET_SHOW,\n  REFRESH_STATE,\n  RefreshStateAction,\n  SET_PLANE_VIDEO\n} from \"./types\"\nimport PlanePosition from \"../formation/PlanePosition\"\n\nexport const baseSize = (baseSize: number): FormationConfigActionTypes => ({\n  type: SET_BASE_SIZE,\n  baseSize\n})\n\nexport const formationSlots = (slots: number): FormationConfigActionTypes => ({\n  type: SET_FORMATION_SLOTS,\n  slots\n})\n\nexport const setFormationType = (\n  formationType: FormationType\n): FormationConfigActionTypes => ({\n  type: SET_FORMATION_TYPE,\n  formationType\n})\n\nexport const setPlaneSlotting = (\n  position: PlanePosition,\n  slotting: Slotting\n): PlanesConfigActionTypes => ({\n  type: SET_PLANE_SLOTTING,\n  position,\n  slotting\n})\n\nexport const setPlaneType = (\n  position: PlanePosition,\n  type: PlaneType\n): PlanesConfigActionTypes => ({\n  type: SET_PLANE_TYPE,\n  position,\n  planeType: type\n})\n\nexport const setPlaneSlots = (\n  position: PlanePosition,\n  slots: number\n): PlanesConfigActionTypes => ({\n  type: SET_PLANE_SLOTS,\n  position,\n  slots\n})\n\nexport const setPlaneVideo = (\n  position: PlanePosition,\n  hasVideo: boolean\n): PlanesConfigActionTypes => ({\n  type: SET_PLANE_VIDEO,\n  position,\n  hasVideo\n})\n\nexport const setColorBy = (colorBy: ColorOption): ViewConfigActionTypes => ({\n  type: SET_COLOR_BY,\n  colorBy\n})\n\nexport const setNumberBy = (numberBy: NumberOption): ViewConfigActionTypes => ({\n  type: SET_NUMBER_BY,\n  numberBy\n})\n\nexport const setShow = (show: ShowOption): ViewConfigActionTypes => ({\n  type: SET_SHOW,\n  show\n})\n\nexport const refreshState = (): RefreshStateAction => ({ type: REFRESH_STATE })\n","import * as d3 from \"d3\"\nimport React, { Dispatch } from \"react\"\nimport { connect } from \"react-redux\"\nimport PlanePosition from \"../../formation/PlanePosition\"\nimport {\n  setPlaneSlots,\n  setPlaneSlotting,\n  setPlaneType,\n  setPlaneVideo\n} from \"../../store/actions\"\nimport { AppState } from \"../../store/reducer\"\nimport {\n  PlanesConfigActionTypes,\n  PlaneState,\n  PlaneType,\n  Slotting\n} from \"../../store/types\"\nimport Select from \"./Select\"\nimport SettingsPanel from \"./SettingsPanel\"\nimport { FormControlLabel, Switch } from \"@material-ui/core\"\n\ntype Setters = {\n  onPlaneTypeSet: (plane: PlanePosition, type: PlaneType) => void;\n  onPlaneSlotsSet: (plane: PlanePosition, slots: number) => void;\n  onPlaneSlottingSet: (plane: PlanePosition, slotting: Slotting) => void;\n  onPlaneVideoSet: (plane: PlanePosition, hasVideo: boolean) => void;\n}\n\ntype PlaneMenuProps = {\n  planeConfig: PlaneState;\n  setters: Setters;\n}\n\nconst typeDescriptions = {\n  [PlaneType.OTTER]: \"Otter\",\n  [PlaneType.SKYVAN]: \"Skyvan\",\n  [PlaneType.NONE]: \"None\"\n}\n\nconst PlaneMenu = (props: PlaneMenuProps) => {\n  const { planeConfig, setters } = props\n  const { position, label, slotting, type, slots, hasVideo } = planeConfig\n  const {\n    onPlaneSlottingSet,\n    onPlaneTypeSet,\n    onPlaneSlotsSet,\n    onPlaneVideoSet\n  } = setters\n\n  const types =\n    position === PlanePosition.LEAD\n      ? [PlaneType.OTTER, PlaneType.SKYVAN]\n      : [PlaneType.OTTER, PlaneType.SKYVAN, PlaneType.NONE]\n\n  const { FILL, SPLIT } = Slotting\n  const slottingDescriptions = {\n    [FILL]: \"Fill plane\",\n    [SPLIT]: \"Split evenly\"\n  }\n  const slottings = [SPLIT, FILL]\n\n  return (\n    <SettingsPanel\n      name={label}\n      heading1={label}\n      heading2={typeDescriptions[type]}\n    >\n      <Select\n        label=\"Type\"\n        value={type}\n        opts={types}\n        desc={typeDescriptions}\n        onSet={(t: number) => onPlaneTypeSet(position, t)}\n      />\n      <Select\n        label=\"Slots\"\n        value={slots}\n        opts={d3.range(1, 31)}\n        onSet={(s: number) => onPlaneSlotsSet(position, s)}\n      />\n      <Select\n        label=\"Slotting\"\n        value={slotting}\n        opts={slottings}\n        desc={slottingDescriptions}\n        onSet={(s: number) => onPlaneSlottingSet(position, s)}\n      />\n      <FormControlLabel\n        control={\n          <Switch\n            checked={hasVideo}\n            onChange={() => onPlaneVideoSet(position, !hasVideo)}\n            color=\"primary\"\n          />\n        }\n        label=\"Video\"\n      />\n    </SettingsPanel>\n  )\n}\n\ntype PlanesProps = {\n  planesConfig: PlaneState[];\n  setters: Setters;\n}\nconst Planes = (props: PlanesProps) => {\n  const { planesConfig, setters } = props\n\n  return (\n    <React.Fragment>\n      {planesConfig.map(planeConfig => (\n        <PlaneMenu\n          key={planeConfig.position}\n          planeConfig={planeConfig}\n          setters={setters}\n        />\n      ))}\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  planesConfig: state.planesConfig\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch<PlanesConfigActionTypes>) => ({\n  setters: {\n    onPlaneTypeSet: (plane: PlanePosition, type: PlaneType) =>\n      dispatch(setPlaneType(plane, type)),\n    onPlaneSlotsSet: (plane: PlanePosition, slots: number) =>\n      dispatch(setPlaneSlots(plane, slots)),\n    onPlaneSlottingSet: (plane: PlanePosition, slotting: Slotting) =>\n      dispatch(setPlaneSlotting(plane, slotting)),\n    onPlaneVideoSet: (plane: PlanePosition, hasVideo: boolean) =>\n      dispatch(setPlaneVideo(plane, hasVideo))\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Planes)\n","import React, { Dispatch } from \"react\"\nimport { connect } from \"react-redux\"\nimport {\n  ColorOption,\n  NumberOption,\n  ShowOption,\n  ViewConfigState,\n  ViewConfigActionTypes\n} from \"../../store/types\"\nimport { setColorBy, setNumberBy, setShow } from \"../../store/actions\"\nimport { AppState } from \"../../store/reducer\"\nimport SettingsPanel from \"./SettingsPanel\"\nimport { NumDict } from \"../../formation/interfaces\"\nimport Select from \"./Select\"\n\ntype Props = {\n  viewConfig: ViewConfigState;\n  onSetColorBy: (opt: ColorOption) => void;\n  onSetNumberBy: (opt: NumberOption) => void;\n  onSetShow: (opt: ShowOption) => void;\n}\n\nconst colorBys = [\n  ColorOption.DEFAULT,\n  ColorOption.PLANE,\n  ColorOption.BUILD_ORDER,\n  ColorOption.RADIAL\n]\nconst colorByDesc: NumDict<string> = {\n  [ColorOption.DEFAULT]: \"Default\",\n  [ColorOption.PLANE]: \"Plane\",\n  [ColorOption.BUILD_ORDER]: \"Build Order\",\n  [ColorOption.RADIAL]: \"Radial\"\n}\n\nconst numberBys = [\n  NumberOption.SLOT_NUM,\n  NumberOption.SLOT_NUM_BY_PLANE,\n  NumberOption.BUILD_ORDER\n]\n\nconst numberByDesc: NumDict<string> = {\n  [NumberOption.SLOT_NUM]: \"Slot Number\",\n  [NumberOption.SLOT_NUM_BY_PLANE]: \"Slot Number by Plane\",\n  [NumberOption.BUILD_ORDER]: \"Build Order\"\n}\n\nconst showOptions = [ShowOption.FORMATION, ShowOption.PLANES, ShowOption.BOTH]\n\nconst showOptionDesc: NumDict<string> = {\n  [ShowOption.FORMATION]: \"Formation\",\n  [ShowOption.PLANES]: \"Planes\",\n  [ShowOption.BOTH]: \"Formation & Planes\"\n}\n\nconst View = (props: Props) => {\n  const { viewConfig, onSetColorBy, onSetNumberBy, onSetShow } = props\n\n  return (\n    <React.Fragment>\n      <SettingsPanel\n        name=\"colorby\"\n        heading1=\"Color by\"\n        heading2={colorByDesc[viewConfig.colorBy]}\n      >\n        <Select\n          label=\"Color by\"\n          value={viewConfig.colorBy}\n          opts={colorBys}\n          desc={colorByDesc}\n          onSet={onSetColorBy}\n        />\n      </SettingsPanel>\n      <SettingsPanel\n        name=\"numberby\"\n        heading1=\"Number by\"\n        heading2={numberByDesc[viewConfig.numberBy]}\n      >\n        <Select\n          label=\"Number by\"\n          value={viewConfig.numberBy}\n          opts={numberBys}\n          desc={numberByDesc}\n          onSet={onSetNumberBy}\n        />\n      </SettingsPanel>\n      <SettingsPanel\n        name=\"show\"\n        heading1=\"Show\"\n        heading2={showOptionDesc[viewConfig.show]}\n      >\n        <Select\n          label=\"Show\"\n          value={viewConfig.show}\n          opts={showOptions}\n          desc={showOptionDesc}\n          onSet={onSetShow}\n        />\n      </SettingsPanel>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  viewConfig: state.viewConfig\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch<ViewConfigActionTypes>) => ({\n  onSetColorBy: (colorBy: ColorOption) => dispatch(setColorBy(colorBy)),\n  onSetNumberBy: (numberBy: NumberOption) => dispatch(setNumberBy(numberBy)),\n  onSetShow: (show: ShowOption) => dispatch(setShow(show))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(View)\n","import React from \"react\"\nimport PanelContext from \"./PanelContext\"\nimport Slots from \"./Slots\"\nimport Planes from \"./Planes\"\nimport View from \"./View\"\n\nexport default function Panels() {\n  const [expanded, setExpanded] = React.useState<string>(\"\")\n\n  return (\n    <PanelContext.Provider value={{ expanded, setExpanded }}>\n      <div style={{ width: \"100%\" }}>\n        <Slots />\n        <Planes />\n        <View />\n      </div>\n    </PanelContext.Provider>\n  )\n}\n","import AppBar from \"@material-ui/core/AppBar\"\nimport Drawer from \"@material-ui/core/Drawer\"\nimport Hidden from \"@material-ui/core/Hidden\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Typography from \"@material-ui/core/Typography\"\nimport MenuIcon from \"@material-ui/icons/Menu\"\nimport RefreshIcon from \"@material-ui/icons/Refresh\"\n\nimport { makeStyles } from \"@material-ui/styles\"\nimport React from \"react\"\nimport Panels from \"./Panels\"\nimport { RefreshStateAction } from \"../../store/types\"\nimport { Dispatch } from \"redux\"\nimport { refreshState } from \"../../store/actions\"\nimport { connect } from \"react-redux\"\n\nconst drawerWidth = 280\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    height: \"100vh\"\n  },\n  drawer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: drawerWidth,\n      flexShrink: 0\n    }\n  },\n  appBar: {\n    marginLeft: drawerWidth,\n    [theme.breakpoints.up(\"sm\")]: {\n      width: `calc(100% - ${drawerWidth}px)`\n    }\n  },\n  menuButton: {\n    marginRight: 20,\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\"\n    }\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth\n  },\n  heading: {\n    flexGrow: 1\n  },\n  content: {\n    flexGrow: 1,\n    display: \"flex\",\n    flexDirection: \"column\"\n  }\n}))\n\ninterface ConfigDrawerProps {\n  contents?: React.ReactNode\n  children?: React.ReactNode\n  onRefreshState: () => void\n}\nconst ConfigDrawer: React.FunctionComponent<ConfigDrawerProps> = (\n  props: ConfigDrawerProps\n) => {\n  const classes = useStyles()\n  const [mobileOpen, setMobileOpen] = React.useState(false)\n\n  function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen)\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"Open drawer\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography\n            variant=\"h6\"\n            color=\"inherit\"\n            noWrap\n            className={classes.heading}\n          >\n            Formations\n          </Typography>\n          <IconButton color=\"inherit\" onClick={props.onRefreshState}>\n            <RefreshIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer}>\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <SwipeableDrawer\n            variant=\"temporary\"\n            open={mobileOpen}\n            onOpen={handleDrawerToggle}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            ModalProps={{\n              keepMounted: true // Better open performance on mobile.\n            }}\n          >\n            <div className={classes.toolbar} />\n            <Panels />\n          </SwipeableDrawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            variant=\"permanent\"\n            open\n          >\n            <div className={classes.toolbar} />\n            <div />\n            <Panels />\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {props.children}\n      </main>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<RefreshStateAction>) => ({\n  onRefreshState: () => dispatch(refreshState())\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ConfigDrawer)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers, Reducer, AnyAction } from \"redux\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport {\n  PlaneState,\n  FormationConfigState,\n  ViewConfigState,\n  Slotting,\n  PlaneType,\n  FormationType,\n  ColorOption,\n  NumberOption,\n  SET_PLANE_SLOTTING,\n  SET_PLANE_SLOTS,\n  SET_PLANE_TYPE,\n  SET_FORMATION_SLOTS,\n  SET_FORMATION_TYPE,\n  SET_COLOR_BY,\n  SET_NUMBER_BY,\n  SET_BASE_SIZE,\n  FormationConfigActionTypes,\n  PlanesConfigActionTypes,\n  ViewConfigActionTypes,\n  SET_SHOW,\n  ShowOption,\n  REFRESH_STATE,\n  SET_PLANE_VIDEO\n} from \"./types\"\n\nconst { LEAD, LT, RT } = PlanePosition\n\nconst initialPlaneState: PlaneState[] = [\n  {\n    position: LEAD,\n    label: \"Lead\",\n    slotting: Slotting.SPLIT,\n    type: PlaneType.SKYVAN,\n    slots: 23,\n    hasSuperFloat: false,\n    hasVideo: true\n  },\n  {\n    position: LT,\n    label: \"Left Trail\",\n    slotting: Slotting.SPLIT,\n    type: PlaneType.NONE,\n    slots: 23,\n    hasSuperFloat: false,\n    hasVideo: false\n  },\n  {\n    position: RT,\n    label: \"Right Trail\",\n    slotting: Slotting.SPLIT,\n    type: PlaneType.OTTER,\n    slots: 23,\n    hasSuperFloat: false,\n    hasVideo: false\n  }\n]\n\nconst planesConfig = (\n  state = initialPlaneState,\n  action: PlanesConfigActionTypes\n): PlaneState[] => {\n  const position = action.position\n  return state.map(p => {\n    if (p.position !== position) {\n      return p\n    }\n    switch (action.type) {\n      case SET_PLANE_SLOTTING:\n        return { ...p, slotting: action.slotting }\n      case SET_PLANE_SLOTS:\n        return { ...p, slots: action.slots }\n      case SET_PLANE_TYPE:\n        return { ...p, type: action.planeType }\n      case SET_PLANE_VIDEO:\n        return { ...p, hasVideo: action.hasVideo }\n      default:\n        return p\n    }\n  })\n}\n\nconst formationConfig = (\n  state = { slots: 45, baseSize: 6, type: FormationType.HU }, //type: FormationType.HD\n  action: FormationConfigActionTypes\n): FormationConfigState => {\n  switch (action.type) {\n    case SET_FORMATION_SLOTS:\n      return { ...state, slots: action.slots }\n    case SET_BASE_SIZE:\n      return { ...state, baseSize: action.baseSize }\n    case SET_FORMATION_TYPE:\n      return { ...state, type: action.formationType }\n    default:\n      return state\n  }\n}\n\nconst viewConfig = (\n  state = {\n    colorBy: ColorOption.PLANE,\n    numberBy: NumberOption.SLOT_NUM_BY_PLANE,\n    show: ShowOption.BOTH\n  },\n  action: ViewConfigActionTypes\n): ViewConfigState => {\n  switch (action.type) {\n    case SET_COLOR_BY:\n      return { ...state, colorBy: action.colorBy }\n    case SET_NUMBER_BY:\n      return { ...state, numberBy: action.numberBy }\n    case SET_SHOW:\n      return { ...state, show: action.show }\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  planesConfig,\n  formationConfig,\n  viewConfig\n})\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nconst refreshingReducer: Reducer<AppState, AnyAction> = (state, action) => {\n  switch (action.type) {\n    case REFRESH_STATE:\n      return rootReducer(undefined, action)\n    default:\n      return rootReducer(state, action)\n  }\n}\n\nexport default refreshingReducer\n","import { createStore, applyMiddleware } from \"redux\"\nimport reducer from \"./reducer\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport * as storage from \"redux-storage\"\nimport createEngine from \"redux-storage-engine-localstorage\"\n\nconst storageReduxer = storage.reducer(reducer)\nconst engine = createEngine(\"redux-state\")\nconst middleware = storage.createMiddleware(engine)\nconst store = createStore(\n  storageReduxer,\n  composeWithDevTools(applyMiddleware(middleware))\n)\nconst load = storage.createLoader(engine)\nload(store)\n\nexport default () => {\n  return store\n}\n","import \"./bootstrap\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport App from \"./components/App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport \"typeface-roboto\"\nimport { createMuiTheme } from \"@material-ui/core\"\nimport { ThemeProvider } from \"@material-ui/styles\"\nimport configureStore from \"./store/configureStore\"\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  }\n})\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from \"react\"\n\nimport FormationContainer from \"./FormationContainer\"\nimport ConfigDrawer from \"./config/ConfigDrawer\"\n\nexport default () => (\n  <ConfigDrawer>\n    <FormationContainer />\n  </ConfigDrawer>\n)\n"],"sourceRoot":""}