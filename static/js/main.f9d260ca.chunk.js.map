{"version":3,"sources":["constants.js","geometry/Polar.js","formation/approxeq.js","geometry/Component.js","geometry/Base.js","formation/Formation.js","formation/lap.js","components/FormationComponent.js","actions.js","selectors/getSlotOptions.js","formation/Plane.js","geometry/Round.js","geometry/Whacker.js","formation/buildFormation.js","selectors/getFormation.js","components/FormationContainer.js","components/config/Slots.js","components/config/Planes.js","components/config/View.js","components/ConfigMenu.js","serviceWorker.js","reducer.js","index.js","components/App.js"],"names":["PI","Math","TAU","Polar","radius","theta","Object","classCallCheck","this","unspin","concat","other","r1","t1","r2","t2","sqrt","cos","atan2","sin","plus","rotate","minus","s","floor","approxeq","a","b","eps","arguments","length","undefined","Number","EPSILON","abs","Component","slots","extraSlotProps","Error","_","isFunction","isArray","slot","checkSlot","thisComponent","extraProps","reduce","obj","f","objectSpread","call","isObject","console","error","assign","offset","position","slotPosition","dockAngle","id","buildOrder","_this","range","map","slotData","pos","rotation","Base","possibleConstructorReturn","getPrototypeOf","_rotation","Formation","components","planes","config","check","planeify","mustFill","filter","p","fill","acc","totalSlots","planeSlots","positions","Set","size","flatMap","c","allSlotData","_slotted$lead","s2ci","sd","i","slotNum","_ref","unslotted","slotted","baseSlots","find","lead","push","apply","toConsumableArray","pull","planeArray","times","filledSlots","scoreFun","dim","cost","cost_matrix","j","i1","j1","sum","unassignedfound","imin","prvnumfree","i0","k","freerow","j2","endofpath","last","low","up","min","h","umin","usubmin","v2","BIG","epsilon","rowsol","Int32Array","colsol","u","Float64Array","v","numfree","free","collist","matches","d","pred","loopcnt","lapcost","row","col","lap","plane","diff","componentTheta","componentSide","penalty","forEach","slotNum2Plane","entries","_ref2","_ref3","slicedToArray","_ref4","component","idx2num","fromEntries","arc","scaledPos","scale","d3","outerRadius","innerRadius","startAngle","d3theta","endAngle","arcFun","x","y","translate","addSlot","g","label","append","attr","style","text","transitionSlot","oldData","changedSlots","old","get","each","delays","sort","gg","delay","select","FormationComponent","_this$props","props","formation","_this$props$viewConfi","viewConfig","colorBy","numberBy","numColors","DEFAULT","BUILD_ORDER","domain","PLANE","includes","SLOT_NUM","slotGroups","formationGrp","selectAll","set","data","t","duration","transition","enter","selection","exit","remove","node","getBBox","r","m","max","height","width","svg","zoom","scaleTo","translateTo","transform","parseInt","scaleExtent","on","zoomed","translateBy","showFormation","_this2","react_default","createElement","ref","element","React","SlottingOptions","PlaneTypes","ColorOptions","NumberOptions","FormationTypes","getPlanesConfig","state","planesConfig","createSelector","formationConfig","_planesConfig$filter$","type","slotting","planeMin","planeMax","fixedMin","baseSize","Plane","lt","rt","Round","left","right","firstRun","prrd","waiting","ceil","_prrd","_positionRadiusRotationDockAngle","dockPosition","leftDockPosition","rightDockPosition","dockDistance","distanceFrom","_Round$__computeRadiu","__computeRadiusTheta","angleDelta","angleTo","iters","iter","lower","upper","mid","ss","Whacker","dock","hand","_this$dock","_this$dock2","psuedoSlots","_left","_right","invisibleSlots","_this$_prrd","fixedRotation","buildFormation","slotsInRing","ring","podLines","round","bridges","flatten","addRings","rings","completeRings","nextRingSlots","dockPositions","base","isPod","firstPods","numBridges","bridgeNum","secondPods","bridgeSecondPods","zip","value","nextDockPositions","slotsPerGroup","groupsWithExtraSlot","nextRing","groupNum","slotsToFill","slotNumFun","extra","leftHandSlots","rightHandSlots","whackers","countFilledSlots","filledPlanes","getBaseSize","getPlaneSlotsSelector","getSlotOptions","slotOptions","_ref10","_ref11","slotUnfilledPlanes","unfilledPlanes","slotsRemaining","lenth","slotsPerPlane","littlePlanes","_ref5","littlePlaneLabels","_ref6","_ref7","minSlotsPerPlane","extras","filledLead","_ref8","remainingFilled","_ref9","_ref12","getPlanesSelector","planeSlotDict","_ref13","defineProperty","_ref14","_ref15","connect","getFormation","debounceRender","trigger","Icon","name","slotsOptions","dispatch","onFormationSlotsSet","payload","formationSlots","onBaseSizeSet","_props$slotsOptions","Dropdown","pointing","className","Menu","Item","onChange","e","target","bs","key","onClick","active","PlaneMenu","_slottingDescriptions","planeConfig","setters","onPlaneSlottingSet","onPlaneTypeSet","onPlaneSlotsSet","types","FILL","SPLIT","slottingDescriptions","slottings","fluid","Header","Divider","setPlaneType","setPlaneSlots","setPlaneSlotting","numPlanes","item","Planes_PlaneMenu","onSetColorBy","setColorBy","onSetNumberBy","setNumberBy","colorBys","opt","desc","numberBys","ConfigMenu","secondary","config_Slots","config_Planes","config_View","Boolean","window","location","hostname","match","initialPlaneState","combineReducers","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","Container","marginTop","FormationContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9d260ca.chunk.js","sourcesContent":["\nexport const PI = Math.PI\nexport const TAU = 2 * PI","import {PI, TAU} from '../constants'\n\n// polar coordinate from origin (center of base)\nexport default class Polar {\n    constructor(radius, theta) {\n      this.radius=radius\n      this.theta=Polar.unspin(theta)\n    }\n    \n    toString() {\n      return `(r${this.radius},∠${this.theta/TAU}τ)`\n    }\n    \n    //https://math.stackexchange.com/questions/1365622/adding-two-polar-vectors\n    plus(other) {\n      const {radius: r1, theta: t1} = this\n      const {radius: r2, theta: t2} = other\n      return new Polar(\n        Math.sqrt(r1*r1 + r2*r2 + 2*r1*r2*Math.cos(t2-t1)),\n        t1 + Math.atan2(r2 * Math.sin(t2-t1), r1 + r2 * Math.cos(t2-t1))\n      )\n    }\n    \n    minus(other) {\n      return this.plus(other.rotate(PI))\n    }\n    \n    rotate(theta) {\n      return new Polar(this.radius, this.theta + theta)\n    }\n    \n    // distance from other point\n    distanceFrom(other) {\n      return this.minus(other).radius\n    }\n    \n    angleFrom(other) {\n      return this.minus(other).theta\n    }\n    \n    angleTo(other) {\n      return other.minus(this).theta\n    }\n    \n    scale(s) {\n      return new Polar(this.radius * s, this.theta)\n    }\n    \n    // d3 treats theta = 0 as up, but in high school, theta = 0 is right\n    // also, d3 treats increasing theta as rotating clockwise, hs went counter clock wise\n    // this maps a highschool polar angle to a d3 polar angle\n    get d3theta() {\n      return Polar.unspin(-this.theta + PI/2)\n    }\n    \n    get x() {\n      return this.radius * Math.cos(this.theta)\n    }\n    \n    //svg treats positive y as going down from top of page\n    get y() {\n      return - this.radius * Math.sin(this.theta)\n    }\n    \n    // map theta back to [0, 2PI)\n    static unspin(theta) {\n      const t = Math.floor(theta / (2 * PI))\n      return theta - (t * 2 * PI)\n    }\n  }","export default function approxeq(a, b, eps = Math.sqrt(Number.EPSILON)) {\n    return Math.abs(a - b) < eps\n}","import Polar from \"./Polar\"\nimport _ from 'lodash'\n\nimport {range} from 'd3'\n\nexport default class Component {\n  \n    constructor(slots, extraSlotProps) {\n      if (slots < 0) {\n        throw new Error(`slots should be non-negative, was ${slots}`)\n      }\n      this.slots=slots\n      \n      if (_.isFunction(extraSlotProps)) {\n        this.extraSlotProps = [extraSlotProps]\n      } else if (_.isArray(extraSlotProps)) {\n        this.extraSlotProps = extraSlotProps\n      } else if (extraSlotProps === undefined) {\n        this.extraSlotProps = []          \n      } else {\n        throw new Error('extraSlotProps should be a function, array, or undefined/null')\n      }\n    }\n  \n    checkSlot(slot) {\n      if (slot < 0 || slot >= this.slots) throw new Error(`slot should be in [0, ${this.slots}), was ${slot}`)\n    }\n  \n    slotData(slot) {\n      this.checkSlot(slot)\n  \n      const thisComponent = this\n  \n      const extraProps = this.extraSlotProps.reduce((obj, f) => ({ \n          ...obj, \n          ...f.call(thisComponent, slot, obj)\n        }), {})\n  \n      if (!_.isObject(extraProps)) {\n        console.error(`Extra props for slot ${slot} couldn't be constructed, ignoring. Was: `, extraProps)\n      }\n      \n      return Object.assign(\n        {},//always start with a fresh object\n        _.isObject(extraProps) ? extraProps: {},\n        {\n          offset: this.position(),\n          position: this.slotPosition(slot),\n          dockAngle: this.dockAngle(),\n          id: slot,\n          buildOrder: this.buildOrder(slot)\n        })\n    }\n  \n    allSlotData() {\n      return range(this.slots).map(slot => this.slotData(slot))\n    }\n  \n    //returns position of slot *relative to position of component*\n    slotPosition(s, offset=false) {\n      this.checkSlot(s)\n      const pos = new Polar(this.radius(),\n                            this.rotation() - 2 * s * this.dockAngle())\n      return offset? pos.plus(this.position()) : pos\n    }\n  \n    //returns position of left hand of slot *relative to center of formation*\n    dockPosition(s) {\n      this.checkSlot(s)\n      return this.slotPosition(s)\n        .rotate(-this.dockAngle())\n        .plus(this.position())\n    }\n    \n    //should return build order for slot, or if slot is not defined, return build order for last slot\n    buildOrder(slot) { throw new Error(\"build order not implemented\") }\n    \n    //returns radius of this component\n    radius() { throw new Error(\"radius not implemented\") }\n  \n    //returns center of this component\n    position() { throw new Error(\"position not implemented\") }\n  \n    //returns rotation in theta of where to place first slot\n    rotation() { throw new Error(\"rotation not implemented\") }\n  \n    //returns angle between slot position and dock position, i.e. half of wingspan angle\n    dockAngle() { throw new Error(\"dockAngle not implemented\") }\n  }\n\n  ","import Polar from \"./Polar\";\nimport Component from \"./Component\";\nimport { PI, TAU } from \"../constants\";\n\nexport default class Base extends Component {\n    constructor(slots, extraSlotProps, rotation = 3 * PI / 2) {\n        super(slots, extraSlotProps)\n        this._rotation = rotation\n    }\n\n    //angle to the first slot\n    rotation() {\n        return this._rotation\n    }\n\n    position() {\n        return new Polar(0, 0)\n    }\n\n    // circumference = 2 PI r\n    // circumference = # slots\n    radius() {\n        return this.slots / TAU\n    }\n\n    //angle between slot position and dock position\n    dockAngle() {\n        return TAU / (this.slots * 2)\n    }\n\n    buildOrder(slot) {\n        this.checkSlot(slot)\n        return 1\n    }\n}","import Polar from \"../geometry/Polar\";\nimport _ from 'lodash'\nimport { PI } from \"../constants\";\nimport lap from \"./lap\";\nimport approxeq from \"./approxeq\";\nimport Base from \"../geometry/Base\";\n\nexport default class Formation {\n  constructor(components, planes, config) {\n    this.components = components\n    this.planes = planes\n    this.config = config\n    this.check()\n    this.planeify()\n  }\n  \n  get slots() {\n    return this.components.reduce((acc, c) => acc + c.slots, 0)\n  }\n  \n  check() {\n    const mustFill = this.planes.filter(p => p.fill).reduce((acc, p) => acc + p.totalSlots, 0)\n    if (this.slots < mustFill) {\n      throw new Error(\"can't fill all the planes\")\n    }\n    \n    const planeSlots = this.planes.reduce((acc, p) => acc + p.totalSlots, 0)\n    if (this.slots > planeSlots) {\n      throw new Error(\"not enough room in planes\")\n    }\n    \n    const positions = this.planes.map(p => p.position)\n    if (new Set(positions).size !== positions.length) {\n      throw new Error(\"plane positions are not unique\")\n    }\n    \n  }\n  \n  allSlotData() {\n    return this.components.flatMap(c => c.allSlotData())\n  }\n  \n  \n  /**\n   * Puts people in planes\n   */\n  planeify() {\n    \n    //slotnum to { c: component, i: slotIndex }\n    const s2ci = this.components\n    .flatMap(c => c.allSlotData().map((sd, i) => ({ slotNum: sd.slotNum, c, i })))\n    .reduce((obj, { slotNum, c, i }) => { obj[slotNum] = { c, i }; return obj }, {})\n    \n    const unslotted = this.allSlotData().map(s => s.slotNum)\n    \n    // plane position to array of slotNums\n    const slotted = this.planes.reduce((obj, p) => { obj[p.position] = []; return obj }, {})\n    \n    // ### rule based slotting ###\n    // base in lead f\n    const baseSlots = this.components.find(c => c instanceof Base)\n    .allSlotData().map(s => s.slotNum)\n    slotted.lead.push(...baseSlots)\n    _.pull(unslotted, ...baseSlots)\n    \n    //todo add superfloat\n\n    // ### end rule based slotting ###\n    \n    //using linear assignment problem formulation\n    \n    //array with plane repeated for the number of remaining slots in that plane\n    //should have the same length as unslotted\n    const planeArray = this.planes.flatMap(p => _.times(p.filledSlots - slotted[p.position].length, () => p))\n        \n    if (planeArray.length !== unslotted.length) {\n      throw new Error(\"planeArray and unslotted have diff lenghts\")\n    }\n    \n    const angleScore = (slotNum, plane) => {\n      const slotPosition = s2ci[slotNum].c.slotPosition(s2ci[slotNum].i, true)//true -> with offset\n      const diff = Polar.unspin(slotPosition.theta - plane.theta)\n      \n      //penalize if component is on other side of jumprun from plane\n      //componentTheta is component angle rotated 90 right\n      // if > pi, right side of jump run. if < pi, left side of jump run\n      const componentTheta = Polar.unspin(s2ci[slotNum].c.position().theta - PI / 2)\n      const componentSide = approxeq(componentTheta, 0) || approxeq(componentTheta, PI) ? \"center\" :\n      componentTheta > PI ? \"rt\" : \"lt\"\n      const penalty = (componentSide === \"center\" || componentSide === plane.position || plane.position === \"lead\") ? 0 : PI\n      \n      return Math.min(diff, 2 * PI - diff) + penalty\n    }\n    \n    //   const distScore = (slotNum, plane) => {\n    //     const slotPosition = s2ci[slotNum].c.slotPosition(s2ci[slotNum].i, true)//true -> with offset\n    //     return Math.abs(slotPosition.distanceFrom(new Polar(100, plane.theta)))\n    //   }\n    \n    \n    //takes a scoreFun that takes a slotNum and plane, \n    //and converts it to a function that takes i, j for i, j in [0, unslotted.length)\n    //for use with lap()\n    const cost = (scoreFun) => (i, j) => {\n      const slotNum = unslotted[i]\n      const plane = planeArray[j]\n      return scoreFun(slotNum, plane)\n    }\n    \n    const assignments = lap(unslotted.length, cost(angleScore)).row\n    \n    assignments.forEach((p, i) => {\n      const plane = planeArray[p].position\n      const slotNum = unslotted[i]\n      slotted[plane].push(slotNum)\n      // _.pull(unslotted, slotNum)\n    })\n    \n    const slotNum2Plane = Object.entries(slotted).flatMap(\n      ([p, slotNums]) => slotNums.map(s => ({ p, s }))\n      ).reduce((obj, { p, s }) => { obj[s] = p; return obj }, {})\n      \n      this.components.forEach(component => {\n        const idx2num = Object.fromEntries(component.allSlotData().map((s, i) => [i, s.slotNum]))\n        component.extraSlotProps.push(s => ({ plane: slotNum2Plane[idx2num[s]] }))\n      })\n    }\n    \n  }","//https://github.com/Fil/lap-jv\n/************************************************************************\n*\n*  lap.js -- ported to javascript from\n\n   lap.cpp\n   version 1.0 - 4 September 1996\n   author: Roy Jonker @ MagicLogic Optimization Inc.\n   e-mail: roy_jonker@magiclogic.com\n\n   Code for Linear Assignment Problem, according to\n\n   \"A Shortest Augmenting Path Algorithm for Dense and Sparse Linear\n    Assignment Problems,\" Computing 38, 325-340, 1987\n\n   by\n\n   R. Jonker and A. Volgenant, University of Amsterdam.\n\n*\n   PORTED TO JAVASCRIPT 2017-01-02 by Philippe Riviere(fil@rezo.net)\n   CHANGED 2016-05-13 by Yang Yong(yangyongeducation@163.com) in column reduction part according to\n   matlab version of LAPJV algorithm(Copyright (c) 2010, Yi Cao All rights reserved)--\n   https://www.mathworks.com/matlabcentral/fileexchange/26836-lapjv-jonker-volgenant-algorithm-for-linear-assignment-problem-v3-0:\n*\n*************************************************************************/\n\n/* This function is the jv shortest augmenting path algorithm to solve the assignment problem */\nexport default function lap(dim, cost) {\n    // input:\n    // dim        - problem size\n    // cost       - cost callback (or matrix)\n  \n    // output:\n    // rowsol     - column assigned to row in solution\n    // colsol     - row assigned to column in solution\n    // u          - dual variables, row reduction numbers\n    // v          - dual variables, column reduction numbers\n  \n    // convert the cost matrix (old API) to a callback (new API)\n    if (typeof cost === \"object\") {\n      var cost_matrix = cost;\n      cost = function(i, j) {\n        return cost_matrix[i][j];\n      };\n    }\n  \n    var sum = 0;\n    {\n      let i1, j1;\n      for (i1 = 0; i1 < dim; i1++) {\n        for (j1 = 0; j1 < dim; j1++)\n          sum += cost(i1, j1);\n      }\n    }\n    const BIG = 10000 * (sum / dim);\n    const epsilon = sum / dim / 10000;\n    const rowsol = new Int32Array(dim),\n      colsol = new Int32Array(dim),\n      u = new Float64Array(dim),\n      v = new Float64Array(dim);\n    let unassignedfound;\n    /* row */\n    let i, imin, numfree = 0, prvnumfree, f, i0, k, freerow; // *pred, *free\n    /* col */\n    let j, j1, j2, endofpath, last, low, up; // *collist, *matches\n    /* cost */\n    let min, h, umin, usubmin, v2; // *d\n  \n    const free = new Int32Array(dim); // list of unassigned rows.\n    const collist = new Int32Array(dim); // list of columns to be scanned in various ways.\n    const matches = new Int32Array(dim); // counts how many times a row could be assigned.\n    const d = new Float64Array(dim); // 'cost-distance' in augmenting path calculation.\n    const pred = new Int32Array(dim); // row-predecessor of column in augmenting/alternating path.\n  \n    // init how many times a row will be assigned in the column reduction.\n    for (i = 0; i < dim; i++)\n      matches[i] = 0;\n  \n    // COLUMN REDUCTION\n    for (\n      j = dim;\n      j--; // reverse order gives better results.\n  \n    ) {\n      // find minimum cost over rows.\n      min = cost(0, j);\n      imin = 0;\n      for (i = 1; i < dim; i++)\n        if (cost(i, j) < min) {\n          min = cost(i, j);\n          imin = i;\n        }\n      v[j] = min;\n      if (++matches[imin] === 1) {\n        // init assignment if minimum row assigned for first time.\n        rowsol[imin] = j;\n        colsol[j] = imin;\n      } else if (v[j] < v[rowsol[imin]]) {\n        j1 = rowsol[imin];\n        rowsol[imin] = j;\n        colsol[j] = imin;\n        colsol[j1] = -1;\n      } else colsol[j] = -1; // row already assigned, column not assigned.\n    }\n  \n    // REDUCTION TRANSFER\n    for (i = 0; i < dim; i++) {\n      if (\n        matches[i] === 0 // fill list of unassigned 'free' rows.\n      )\n        free[numfree++] = i;\n      else if (matches[i] === 1) {\n        // transfer reduction from rows that are assigned once.\n        j1 = rowsol[i];\n        min = BIG;\n        for (j = 0; j < dim; j++)\n          if (j !== j1)\n            if (cost(i, j) - v[j] < min + epsilon) min = cost(i, j) - v[j];\n        v[j1] = v[j1] - min;\n      }\n    }\n  \n    // AUGMENTING ROW REDUCTION\n    let loopcnt = 0; // do-loop to be done twice.\n    do {\n      loopcnt++;\n  \n      // scan all free rows.\n      // in some cases, a free row may be replaced with another one to be scanned next.\n      k = 0;\n      prvnumfree = numfree;\n      numfree = 0; // start list of rows still free after augmenting row reduction.\n      while (k < prvnumfree) {\n        i = free[k];\n        k++;\n  \n        // find minimum and second minimum reduced cost over columns.\n        umin = cost(i, 0) - v[0];\n        j1 = 0;\n        usubmin = BIG;\n        for (j = 1; j < dim; j++) {\n          h = cost(i, j) - v[j];\n          if (h < usubmin)\n            if (h >= umin) {\n              usubmin = h;\n              j2 = j;\n            } else {\n              usubmin = umin;\n              umin = h;\n              j2 = j1;\n              j1 = j;\n            }\n        }\n  \n        i0 = colsol[j1];\n        if (umin < usubmin + epsilon)\n          //         change the reduction of the minimum column to increase the minimum\n          //         reduced cost in the row to the subminimum.\n          v[j1] = v[j1] - (usubmin + epsilon - umin);\n        else if (i0 > -1) {\n          // minimum and subminimum equal.\n          // minimum column j1 is assigned.\n          // swap columns j1 and j2, as j2 may be unassigned.\n          j1 = j2;\n          i0 = colsol[j2];\n        }\n  \n        // (re-)assign i to j1, possibly de-assigning an i0.\n        rowsol[i] = j1;\n        colsol[j1] = i;\n  \n        if (i0 > -1)\n          if (umin < usubmin)\n            // minimum column j1 assigned earlier.\n            // put in current k, and go back to that k.\n            // continue augmenting path i - j1 with i0.\n            free[--k] = i0;\n          else\n            // no further augmenting reduction possible.\n            // store i0 in list of free rows for next phase.\n            free[numfree++] = i0;\n      }\n    } while (loopcnt < 2); // repeat once.\n  \n    // AUGMENT SOLUTION for each free row.\n    for (f = 0; f < numfree; f++) {\n      freerow = free[f]; // start row of augmenting path.\n  \n      // Dijkstra shortest path algorithm.\n      // runs until unassigned column added to shortest path tree.\n      for (j = dim; j--; ) {\n        d[j] = cost(freerow, j) - v[j];\n        pred[j] = freerow;\n        collist[j] = j; // init column list.\n      }\n  \n      low = 0; // columns in 0..low-1 are ready, now none.\n      up = 0; // columns in low..up-1 are to be scanned for current minimum, now none.\n      // columns in up..dim-1 are to be considered later to find new minimum,\n      // at this stage the list simply contains all columns\n      unassignedfound = false;\n      do {\n        if (up === low) {\n          // no more columns to be scanned for current minimum.\n          last = low - 1;\n  \n          // scan columns for up..dim-1 to find all indices for which new minimum occurs.\n          // store these indices between low..up-1 (increasing up).\n          min = d[collist[up++]];\n          for (k = up; k < dim; k++) {\n            j = collist[k];\n            h = d[j];\n            if (h <= min) {\n              if (h < min) {\n                // new minimum.\n                up = low; // restart list at index low.\n                min = h;\n              }\n              // new index with same minimum, put on undex up, and extend list.\n              collist[k] = collist[up];\n              collist[up++] = j;\n            }\n          }\n          // check if any of the minimum columns happens to be unassigned.\n          // if so, we have an augmenting path right away.\n          for (k = low; k < up; k++)\n            if (colsol[collist[k]] < 0) {\n              endofpath = collist[k];\n              unassignedfound = true;\n              break;\n            }\n        }\n  \n        if (!unassignedfound) {\n          // update 'distances' between freerow and all unscanned columns, via next scanned column.\n          j1 = collist[low];\n          low++;\n          i = colsol[j1];\n          h = cost(i, j1) - v[j1] - min;\n  \n          for (k = up; k < dim; k++) {\n            j = collist[k];\n            v2 = cost(i, j) - v[j] - h;\n            if (v2 < d[j]) {\n              pred[j] = i;\n              if (v2 === min)\n                if (colsol[j] < 0) {\n                  // new column found at same minimum value\n                  // if unassigned, shortest augmenting path is complete.\n                  endofpath = j;\n                  unassignedfound = true;\n                  break;\n                } else {\n                  // else add to list to be scanned right away.\n                  collist[k] = collist[up];\n                  collist[up++] = j;\n                }\n              d[j] = v2;\n            }\n          }\n        }\n      } while (!unassignedfound);\n  \n      // update column prices.\n      for (k = last + 1; k--; ) {\n        j1 = collist[k];\n        v[j1] = v[j1] + d[j1] - min;\n      }\n  \n      // reset row and column assignments along the alternating path.\n      do {\n        i = pred[endofpath];\n        colsol[endofpath] = i;\n        j1 = endofpath;\n        endofpath = rowsol[i];\n        rowsol[i] = j1;\n      } while (i !== freerow);\n    }\n  \n    // calculate optimal cost.\n    let lapcost = 0;\n    for (i = dim; i--; ) {\n      j = rowsol[i];\n      u[i] = cost(i, j) - v[j];\n      lapcost = lapcost + cost(i, j);\n    }\n  \n    return {\n      cost: lapcost,\n      row: rowsol,\n      col: colsol,\n      u: u,\n      v: v\n    };\n  }\n  ","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './FormationComponent.css'\n\nimport * as d3 from 'd3'\nimport Formation from '../formation/Formation';\n\nconst SCALE_FACTOR = 80\n\nconst arcFun = ({ position, dockAngle }) => {\n    const scaledPos = position.scale(SCALE_FACTOR)\n    return d3.arc()\n        .outerRadius(scaledPos.radius)\n        .innerRadius(scaledPos.radius)\n        .startAngle(scaledPos.d3theta - dockAngle)\n        .endAngle(scaledPos.d3theta + dockAngle)\n}\n\nconst arc = d => arcFun(d)()\nconst x = d => d.position.scale(SCALE_FACTOR).x\nconst y = d => d.position.scale(SCALE_FACTOR).y\nconst translate = d => `translate(${d.offset.scale(SCALE_FACTOR).x},${d.offset.scale(SCALE_FACTOR).y})`\n\n/**\n * \n * @param g a selection (of g)\n * @param fill function mapping slotData to a fill color\n * @param label function mapping slotData to a label\n */\nconst addSlot = (g, fill, label) => {\n    g.append(\"path\")\n        .attr(\"class\", \"grips\")\n        .attr(\"d\", arc)\n\n    g.append(\"circle\")\n        .attr(\"cx\", x)\n        .attr(\"cy\", y)\n        .attr(\"r\", 16)\n        .style(\"fill\", d => fill(d))\n\n    g.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"central\")\n        .attr(\"x\", x)\n        .attr(\"y\", y)\n        .text(label)\n}\n\n/**\n * \n * @param g a selection (of g)\n * @param fill function mapping slotData to a fill color\n * @param label function mapping slotData to a label\n * @param oldData a d3.local of values of data before transition\n */\nconst transitionSlot = (g, fill, label, oldData) => {\n    function changed(d) {\n        const old = oldData.get(this, d)\n        return x(d) !== x(old) || y(d) !== y(old)\n    }\n    const changedSlots = []\n\n    g.filter(changed).each(d => changedSlots.push(d.slotNum))\n\n    const delays = changedSlots.sort().reduce((acc, s, i) => { acc[s] = i; return acc }, {})\n\n    const gg = g.delay(d => delays[d.slotNum] * 10 || 0)\n    gg.attr(\"transform\", d => translate(d) + \" scale(1)\")\n\n    gg.select(\"path\")\n        .attr(\"d\", arc)\n\n    gg.select(\"circle\")\n        .attr(\"cx\", x)\n        .attr(\"cy\", y)\n        .style(\"fill\", fill)\n\n    gg.select(\"text\")\n        .attr(\"x\", x)\n        .attr(\"y\", y)\n        .text(label)\n}\n\nexport default class FormationComponent extends React.Component {\n    showFormation() {\n        const { formation, viewConfig: { colorBy, numberBy } } = this.props\n\n        const slotData = formation.allSlotData()\n\n        const oldData = d3.local()\n\n        const numColors = new Set(slotData.map(d => d.buildOrder)).size\n\n        const buildOrderFill = (d) => d3.scaleOrdinal(d3.schemePaired).domain(d3.range(numColors))(d.buildOrder - 1)\n        const planeFill = (d) => d3.scaleOrdinal(d3.schemePaired.filter((_, i) => [0, 2, 4].includes(i))).domain([\"left\", \"rt\", \"lt\"])(d.plane)\n\n        const fills = {\n            DEFAULT: () => null,\n            BUILD_ORDER: buildOrderFill,\n            PLANE: planeFill\n        }\n\n        const fill = fills[colorBy]\n\n        const labels = {\n            SLOT_NUM: d => d.slotNum + 1,\n            BUILD_ORDER: d => d.buildOrder\n        }\n\n        const label = labels[numberBy]\n\n        const slotGroups = this.formationGrp.selectAll(\"g.slot\")\n            .each(function (d) { oldData.set(this, d) })\n            .data(slotData, d => d.slotNum)\n\n        const t = d3.transition().duration(1000)\n\n        slotGroups\n            .transition(t)\n            .call(transitionSlot, fill, label, oldData)\n\n        slotGroups.enter().append(\"g\")\n            .attr(\"class\", \"slot\")\n            .attr(\"transform\", () => \"translate(0,0) scale(0)\")\n            .transition(t)\n            .attr(\"transform\", d => translate(d) + \" scale(1)\")\n            .selection()\n            .call(addSlot, fill, label)\n\n\n\n        slotGroups.exit().transition(t)\n            .attr(\"transform\", \"translate(0,0) scale(0)\")\n            .remove()\n\n        this.formationGrp.node().getBBox()\n\n\n        const r = formation.components\n            .flatMap(c => d3.range(c.slots).map(s => c.slotPosition(s, true)))\n            .reduce((m, p) => Math.max(m, p.radius), 0)\n\n        \n\n        const s =(Math.min(this.height(), this.width())/2)/((r+0.5))/94\n        \n        this.svg.transition(t).call(this.zoom.scaleTo, s)\n        this.svg.transition(t).call(this.zoom.translateTo, 0,0) //recenters on update\n        \n    }\n\n    zoomed() {\n        this.formationGrp.attr(\"transform\", d3.event.transform);\n    }\n\n    height() {\n        return parseInt(this.svg.style('height'), 10)\n    }\n\n    width() {\n        return parseInt(this.svg.style('width'), 10)\n    }\n\n    componentDidMount() {\n        this.formationGrp = this.svg.append(\"g\")\n        this.zoom = d3.zoom()\n            .scaleExtent([.5, 2])\n            .on(\"zoom\", () => this.zoomed())\n        \n        this.svg.call(this.zoom) //allows user zoom\n                .call(this.zoom.translateBy, this.width() / 2, this.height() / 2) //translates to center\n\n        \n    \n        // https://bl.ocks.org/iamkevinv/0a24e9126cd2fa6b283c6f2d774b69a2\n        \n        this.showFormation()\n    }\n\n    componentDidUpdate() {\n        \n\n        this.showFormation()\n    }\n\n    componentWillUnmount() {\n        // window.removeEventListener('resize', this.showFormation().bind(this));\n    }\n\n    render() {\n        return <svg\n            width={\"100%\"}\n            height={\"100%\"}\n            ref={element => (this.svg = d3.select(element))}\n            />\n    }\n\n}\nFormationComponent.propTypes = {\n    formation: PropTypes.instanceOf(Formation),\n    viewConfig: PropTypes.object\n}\n","export const SET_PLANE_SLOTTING = 'SET_PLANE_SLOTTING'\nexport const SET_PLANE_TYPE = 'SET_PLANE_TYPE'\nexport const SET_PLANE_SLOTS = 'SET_PLANE_SLOTS'\nexport const SET_FORMATION_SLOTS = 'SET_FORMATION_SLOTS'\nexport const SET_FORMATION_TYPE = 'SET_FORMATION_TYPE'\nexport const SET_BASE_SIZE = 'SET_BASE_SIZE'\nexport const SET_COLOR_BY = 'SET_COLOR_BY'\nexport const SET_NUMBER_BY = 'SET_NUMBER_BY'\n\nexport const SlottingOptions = {\n    SPLIT: 'Split',\n    FILL: 'Fill'\n}\n\nexport const PlaneTypes = {\n    NONE: 'None',\n    OTTER: 'Otter',\n    SKYVAN: 'Skyvan'\n}\n\nexport const ColorOptions = {\n    DEFAULT: 'DEFAULT',\n    PLANE: 'PLANE',\n    BUILD_ORDER: 'BUILD_ORDER'\n}\n\nexport const NumberOptions = {\n    SLOT_NUM: 'SLOT_NUM',\n    BUILD_ORDER: 'BUILD_ORDER'\n}\n\nexport const FormationTypes = {\n    HD: 'HD',\n    SD: 'SD'\n}\n\nexport const baseSize = baseSize => ({\n    type: SET_BASE_SIZE, \n    payload: baseSize\n})\n\nexport const formationSlots = slots => ({\n    type: SET_FORMATION_SLOTS,\n    payload: slots\n})\n\nexport const setFormationType = formationType => ({\n    type: SET_FORMATION_TYPE,\n    payload: formationType\n})\n\nexport const setPlaneSlotting = (plane, slotting) => ({\n    type: SET_PLANE_SLOTTING,\n    plane: plane,\n    payload: slotting\n})\n\nexport const setPlaneType = (plane, type) => ({\n    type: SET_PLANE_TYPE,\n    plane: plane,\n    payload: type\n})\n\nexport const setPlaneSlots = (plane, slots) => ({\n    type: SET_PLANE_SLOTS,\n    plane: plane,\n    payload: slots\n})\n\nexport const setColorBy = colorBy => ({\n    type: SET_COLOR_BY,\n    payload: colorBy\n})\n\nexport const setNumberBy = numberBy => ({\n    type: SET_NUMBER_BY,\n    payload: numberBy\n})","import { createSelector } from \"reselect\";\nimport { PlaneTypes, SlottingOptions } from \"../actions\";\n\nexport const getFormationConfig = state => state.formationConfig\nexport const getPlanesConfig = state => state.planesConfig\n\n/**\n* computes min, max, and current number of slots based on plane and formation config\n* \n* if current slots is outside of [min, max], it is set to min or max\n*/\nexport default createSelector([getFormationConfig, getPlanesConfig],\n    (formationConfig, planesConfig) => {\n        const {min,max} = planesConfig.filter(({type}) => type !== PlaneTypes.NONE)\n        .map(({slotting, slots}) => ({ //compute min/max slots on each plane\n            planeMin: slotting === SlottingOptions.FILL? slots: 0,\n            planeMax: slots\n        })).reduce(({min, max}, {planeMin, planeMax}) => ({ //add min/max slots for all planes\n            min: min + planeMin,\n            max: max + planeMax\n        }), {min: 0, max: 0}) \n        \n        const fixedMin = Math.max(min, formationConfig.baseSize)\n        \n        return {\n            min: fixedMin,\n            max,\n            slots: Math.max(Math.min(formationConfig.slots, max), fixedMin)\n        }   \n    })\n    ","import {PI} from '../constants'\n\nexport default class Plane {\n    constructor(filledSlots, position, type) {\n      this.filledSlots = filledSlots\n      this.position = position\n      this.type=type\n    }\n    \n    get theta() {\n      return { lead: PI/2, lt: 7 * PI/6, rt: 11 * PI / 6 }[this.position]\n    }\n  }","import { PI, TAU } from \"../constants\";\nimport Component from \"./Component\";\nimport Polar from \"./Polar\";\n\nexport default class Round extends Component {\n    /*\n    left and right are left hand and right hand docks. \n    Should be an with properties\n      - c: component\n      - s: slot index\n    */\n    constructor(slots, extraSlotProps, left, right) {\n      super(slots, extraSlotProps)\n      this.left = left\n      this.right = right\n      this.firstRun = true\n    }\n  \n    get prrd() {\n      if (!this._prrd) {\n        this._prrd = Round._positionRadiusRotationDockAngle(\n        this.left.c.dockPosition(this.left.s),\n        this.right.c.dockPosition(this.right.s), \n        this.slots\n        )\n      }\n      return this._prrd\n    }\n    \n    //computes the centroid position\n    //component radius, and component rotation\n    //position, radius, rotation, dockangle\n    /*\n    leftDockPosition - where component's left hand dock is\n    rightDockPosition - where component's right hand dock is\n    slots - number of slots in this component\n    // parentCentroid - centroid of parent component, or center of formation. Used to pick the orien\n    */\n    static _positionRadiusRotationDockAngle(leftDockPosition, rightDockPosition, slots, \n                                             parentCentroid = new Polar(0,0)) {\n  \n      const dockDistance = leftDockPosition.distanceFrom(rightDockPosition)\n      const {radius, theta} = Round.__computeRadiusTheta(slots, dockDistance)\n  \n  \n  \n      const angleDelta = leftDockPosition.angleTo(rightDockPosition)\n      const position = leftDockPosition.plus(new Polar(radius, angleDelta - (PI - theta)/2))\n  \n      //the rotation is where the first slot (docking w/ right hand) goes\n      // TAU - theta is the whole arc angle, and their position is 1/(2*slots) around\n      const dockAngle = (TAU - theta)/(2*slots)\n      const rotation = position.angleTo(rightDockPosition) - dockAngle\n      \n      return { position, radius, rotation, dockAngle } \n    }\n    \n    position() {\n      return this.prrd.position\n    }\n    \n    radius() {\n      return this.prrd.radius\n    }\n    \n    rotation() {\n      return this.prrd.rotation\n    }\n  \n    dockAngle() {\n      return this.prrd.dockAngle\n    }\n  \n    buildOrder(slot) { \n      this.checkSlot(slot)\n      const waiting = Math.max(this.left.c.buildOrder(), this.right.c.buildOrder())\n      if (slot === undefined) {\n        return waiting + Math.ceil(this.slots/2)\n      }\n      //build from the ends\n      return waiting + Math.min(slot + 1, this.slots - slot)\n    }\n  \n    // computes radius and angle of cutoff for a circle with the side cut off\n    // with length of the remaining curve part = s\n    // and length of flat bit = d\n    // I think it's O(-log(eps))\n    static __computeRadiusTheta(s, d, eps = Math.sqrt(Number.EPSILON)) {\n      if (d < 0 || d > s) {\n        console.error(`d: ${d}, s: ${s}`)\n        throw new Error(\"d must be in [0, s]\")\n      }\n      var iters = 0\n      //try picking theta between lower and upper\n      function iter(lower=0, upper=PI) {\n        if (iters >= 100) {\n          throw new Error(\"didn't converge\")\n        }\n        iters = iters + 1\n        const mid = (upper + lower)/2\n        // if ((upper - lower) < eps) {\n        //   return mid\n        // }\n  \n        //candidate theta = mid\n        //compute radius from theta\n        const r = d / (2 * Math.sin(mid / 2))\n        //compute s from radius, theta\n        const ss = r * (TAU - mid)\n        \n        if (Math.abs(ss - s) < eps) {\n          return mid\n        }\n        \n        //if computed s is too big, try a bigger theta, else try smaller\n        return ss > s ? iter(mid, upper) : iter(lower, mid)\n      }\n      //iter returns theta, compute radius\n      const theta = iter()\n      return {\n        radius: s / (TAU-iter()),\n        theta: theta \n      }\n    }\n  }","import Component from \"./Component\";\nimport Round from \"./Round\";\nimport Polar from \"./Polar\";\n\nexport default class Whacker extends Component {\n\n    /*\n    slots - \n    dock - { component, slot } this whacker is docked on\n    hand - docked with 'left' or 'right'\n  \n    modeled as part of a pod (Round docked on one person) with slots * 2 + 1 slots\n    */\n    constructor(slots, extraSlotProps, dock, hand) {\n      super(slots, extraSlotProps)\n      this.dock = dock\n      \n      if (hand !== \"left\" && hand !== \"right\" )  throw new Error(\"Hand should be 'left' or 'right'\")\n      this.hand = hand\n    }\n  \n    //left hand dock position of the imaginary pod\n    _left() {\n      const {c, s} = this.dock\n      return this.hand === \"left\" ?\n        c.dockPosition(s) :\n      c.slotPosition(s)\n        .rotate(- 3 * c.dockAngle()) //move 1.5 slots to the left\n        .plus(c.position())\n    }\n  \n    //right hand dock position of the imaginary pod\n    _right() {\n      const {c, s} = this.dock\n      return this.hand === \"left\" ? \n        c.slotPosition(s)\n        .rotate(c.dockAngle()) //move half a slot to the right\n        .plus(c.position()) :\n      c.dockPosition(s)\n    }\n  \n  \n  \n    get prrd() {\n      if (! this._prrd) {\n        const psuedoSlots = this.slots*2+1\n  \n        this._prrd = Round._positionRadiusRotationDockAngle(\n          this._left(), \n          this._right(),\n          psuedoSlots\n        )\n  \n        if (this.hand === \"left\") {\n          const invisibleSlots = psuedoSlots - this.slots\n          const {rotation, dockAngle} = this._prrd\n          const fixedRotation = Polar.unspin(rotation - invisibleSlots * 2 * dockAngle) //rotate two slots to the right\n          this._prrd.rotation = fixedRotation\n        }\n      }\n      return this._prrd\n    }\n    \n    buildOrder(slot) { \n      this.checkSlot(slot)\n      const waiting = this.dock.c.buildOrder()\n      if (slot === undefined) {\n        return waiting + this.slots\n      }\n      return waiting + (this.hand === \"left\"? this.slots - slot : slot + 1)\n    }\n    \n    position() {\n      return this.prrd.position\n    }\n    \n    radius() {\n      return this.prrd.radius\n    }\n    \n    rotation() {\n      return this.prrd.rotation\n    }\n  \n    dockAngle() {\n      return this.prrd.dockAngle\n    }\n  }","import _ from 'lodash'\nimport Round from '../geometry/Round';\nimport Whacker from '../geometry/Whacker';\nimport Base from '../geometry/Base';\n\nexport default function buildFormation(slots, baseSize) {\n    // const baseSize = parseInt(mutable mbaseSize)\n    // const slots = parseInt(mutable mslots)\n    \n    //ring 0 = base,\n    //ring 1 = 1st pods\n    //ring 2 = 2nd pods\n    //ring 3 = if baseSize > 4, bridges, otherwise just pods on out\n    //ring 4 = if baseSize > 4, then pods on bridges in ring 3, otherwise just pods on podLines\n    //ring 5... pod lines on out\n    const slotsInRing = (ring) => {\n      const podLines = Math.round(baseSize/2)\n      const bridges = podLines > 2\n      if (ring === 0) { return baseSize }\n      if (ring === 1) { return baseSize + podLines * 5 }\n      if (ring === 2) { return baseSize + podLines * 10 }\n      if (ring === 3) { return slotsInRing(ring-1) + (bridges ? 3 * podLines : 5 * podLines) }\n      if (ring === 4) { return slotsInRing(ring-1) + (bridges ? 5 * podLines : 5 * baseSize) }\n      return slotsInRing(4) + (ring - 4) * (bridges ? 5 * podLines : 5 * baseSize)\n    }\n   \n    //gets dock positions for next ring given currently filled rings\n    const nextDockPositions = (rings) => {\n      if (rings.length > 10) {\n        throw new Error(\"somethings fucky\")\n      }\n      const bridges = baseSize !== 4\n      \n      if (rings.length === 1) {\n        const base = rings[0]\n        return _.range(0, baseSize, 2).map(slot => ({\n          left: {c: base, s: slot},\n          right: {c: base, s: (slot + baseSize - 1) % baseSize}\n        }))\n      }\n      if (!bridges || rings.length === 2 || rings.length === 4 || rings.length >= 6) {\n        // if we're not using bridges\n        // or last ring (1) is 1st pods (and we need 2nd pods)\n        // or last ring (3) is bridges (and we need 2nd pods on those bridges)\n        // or we're way out (last ring >= 5)\n        // then we want pods on everything in the last ring\n        return rings[rings.length-1].map(component => {\n          const isPod = component.slots === 5\n          return {\n            left: {c: component, s: 1 + (isPod ? 1 : 0)},\n            right: {c: component, s: 0 + (isPod ? 1 : 0)}\n          }\n        })\n      } \n      if (bridges && rings.length === 3) {\n        // ring 3 is bridges if there are bridges\n        const firstPods = rings[1]\n        const numBridges = firstPods.length\n        return _.range(numBridges).map(bridgeNum => ({\n          left: {c: firstPods[(bridgeNum+1)%numBridges], s: 0},\n          right: {c: firstPods[bridgeNum], s: 3}\n        }))\n      }\n      if (bridges && rings.length === 5) {\n        // if bridges, ring 5 is 2nd pods on bridges\n        const secondPods = rings[2]\n        const bridgeSecondPods = rings[4]\n        return _().zip(secondPods, bridgeSecondPods).flatten().map(component => {\n          return ({\n          left: {c: component, s: component.slots === 5? 2: 1}, //5 -> pod, !5 (3) -> bridge\n          right: {c: component, s: component.slots === 5? 1: 0}\n        })}).value()\n      }\n      throw new Error(\"mmm\")\n    }\n    \n    const addRings = (rings) => {\n      const completeRings = rings.length - 1\n      \n      // if (slotsInRing(completeRings) !== _.flatten(rings).map(c => c.slots).reduce((acc, x) => acc + x, 0)){\n      //   console.log({completeRings, slotsInRing: slotsInRing(completeRings), rings})\n      // }\n      const nextRingSlots = Math.min(slots, slotsInRing(completeRings + 1)) - \n                            slotsInRing(completeRings)\n      \n      if (nextRingSlots <= 0) return rings\n      \n      const dockPositions = nextDockPositions(rings)\n      const slotGroups = dockPositions.length\n  \n      \n      const slotsPerGroup = Math.floor(nextRingSlots/slotGroups)\n      const groupsWithExtraSlot = nextRingSlots % slotGroups\n      \n      const nextRing = dockPositions.flatMap(({left, right}, groupNum) => {\n        //slots in this group\n        const slotsToFill = slotsPerGroup + (groupNum < groupsWithExtraSlot ? 1 : 0)\n        const isPod = left.c === right.c //left and right docking on same component is a pod, else bridge\n        const totalSlots = isPod? 5 : 3\n        const slotNumFun = (extra=0) => s => ({slotNum: s + \n                                               slotsInRing(completeRings) + \n                                               slotsPerGroup * groupNum +\n                                               Math.min(groupsWithExtraSlot, groupNum) +\n                                               extra\n                                 })\n        // const priorSlots =  + totalSlots * groupNum//todo\n        if (slotsToFill === totalSlots) {\n          return [new Round(totalSlots, slotNumFun(), left, right)]\n        } else {\n          //whackers\n          const leftHandSlots = Math.floor(slotsToFill/2)\n          const rightHandSlots = leftHandSlots + slotsToFill % 2 //maybe one extra\n          const whackers = []\n          if (leftHandSlots > 0) {\n            whackers.push(new Whacker(leftHandSlots, slotNumFun(rightHandSlots), left, \"left\"))\n          }\n          if (rightHandSlots > 0) {\n            whackers.push(new Whacker(rightHandSlots, slotNumFun(), right, \"right\"))\n          }\n          return whackers\n        }\n      })\n      return addRings([...rings, nextRing])\n    }\n    return _.flatten(addRings([new Base(baseSize, s => ({slotNum: s}))]))\n    \n  }","import { createSelector } from \"reselect\";\nimport { PlaneTypes, SlottingOptions } from \"../actions\";\nimport getSlotOptions, { getPlanesConfig } from \"./getSlotOptions\";\nimport Plane from \"../formation/Plane\";\nimport Formation from \"../formation/Formation\";\nimport buildFormation from \"../formation/buildFormation\";\n\nconst countFilledSlots = filledPlanes => filledPlanes.reduce((s, {filledSlots}) => s+filledSlots, 0)\n/**\n * takes planes with slots available and returns array {plane: (plane position), filledSlots: number of slots filled}\n * lead plane will always have at least `baseSize` slots filled\n * @param {{plane:String, slots:Number}[]} unfilledPlanes array of objects representing planes with slots left. \n *                           should have properties plane (lead, lt, rt), slots (total slots in plane)\n * @param {*} slotsRemaining slots to put in unfilledPlanes\n * @param {*} baseSize if unfilledPlanes includes lead plane, at least `baseSize` should go in it\n * @param {{plane:String, filledSlots:Number}[]} filledPlanes array of planes already full, or partially full if slotsRemaining = 0\n */\nconst slotUnfilledPlanes = (unfilledPlanes, slotsRemaining, baseSize, filledPlanes = []) => {\n    if (unfilledPlanes.lenth === 0) {\n        return filledPlanes\n    }\n\n    const slotsPerPlane = slotsRemaining / unfilledPlanes.length\n\n    // if spreading remaing slots evently doesn't put enough in the lead plane for the base, fill that now\n    const lead = unfilledPlanes.find(({plane}) => plane === \"lead\")\n    if (lead && baseSize > slotsPerPlane) {\n        return slotUnfilledPlanes(\n            unfilledPlanes.filter(({plane}) => plane !== \"lead\"),\n            slotsRemaining - baseSize,\n            baseSize,\n            [{plane: 'lead', filledSlots: baseSize}, ...filledPlanes]\n        )  \n    }\n\n\n    //get planes with fewer total slots than slotsPerPlane and fill em up\n    const littlePlanes = unfilledPlanes.filter(({slots}) => slots < slotsPerPlane)\n        .map(({plane, slots}) => ({plane, filledSlots: slots}))\n\n    if (littlePlanes.length) {\n        const littlePlaneLabels = littlePlanes.map(({plane}) => plane)\n        return slotUnfilledPlanes(\n            unfilledPlanes.filter(({plane}) => !littlePlaneLabels.includes(plane)),\n            slotsRemaining - countFilledSlots(littlePlanes),\n            baseSize,\n            [...filledPlanes, ...littlePlanes]\n        )\n    }\n\n    // if we've gotten this far, there is room for at least slotsPerPlane on each unfilledPlane\n    const minSlotsPerPlane = Math.floor(slotsPerPlane)\n    const extras = slotsRemaining % minSlotsPerPlane\n\n    // if the lead plane is still in the mix, then always put one less on that plane\n    if (extras > 0 && lead) {\n        const filledLead = {plane: 'lead', filledSlots: minSlotsPerPlane}\n        return slotUnfilledPlanes(\n            unfilledPlanes.filter(({plane}) => plane !== 'lead'),\n            slotsRemaining - minSlotsPerPlane,\n            baseSize, \n            [filledLead, ...filledPlanes]\n        )\n    }\n\n    //okay now fill the rest. the first `extras` planes will get an extra\n    const remainingFilled = unfilledPlanes.map(({plane}, i) => ({plane, filledSlots: minSlotsPerPlane + (extras > i? 1: 0)}))\n\n    //phew\n    return [...filledPlanes, ...remainingFilled]\n}\n\nconst getBaseSize = state => state.formationConfig.baseSize\n\n/**\n * @param {Number} baseSize \n * @param {Object[]} planesConfig \n * @param {Object} slotOptions \n * \n * @returns {{plane: String, filledSlots: Number}[]} array of plane & filledSlots\n */\nconst getPlaneSlots = (baseSize, planesConfig, slotOptions) => {\n    //using getSlotOptions to compute actual slots\n    const slots = slotOptions.slots\n\n    const filledPlanes = planesConfig\n    .filter(({type, slotting}) => type !== PlaneTypes.NONE && slotting === SlottingOptions.FILL)\n    .map(({plane, slots}) => ({plane, filledSlots: slots}))\n\n    const unfilledPlanes = planesConfig.filter(({type, slotting}) => type !== PlaneTypes.NONE && slotting !== SlottingOptions.FILL)\n\n    return slotUnfilledPlanes(\n        unfilledPlanes,\n        slots - countFilledSlots(filledPlanes),\n        baseSize,\n        filledPlanes\n        )\n}\n\n/**\n * \n * @param {*} planesConfig \n * @param {*} planeSlots \n * @returns {Plane[]} \n */\nconst getPlanes = (planesConfig, planeSlots) => {\n    const planeSlotDict = planeSlots.reduce((obj, {plane, filledSlots}) => ({...obj, [plane]: filledSlots}), {})\n\n    return planesConfig\n        .filter(({type}) => type !== PlaneTypes.NONE)\n        .map(({plane, type}) => new Plane(planeSlotDict[plane], plane, type))\n}\n\nconst getPlaneSlotsSelector = createSelector([getBaseSize, getPlanesConfig, getSlotOptions], getPlaneSlots)\n\nconst getPlanesSelector = createSelector([getPlanesConfig, getPlaneSlotsSelector], getPlanes)\n\nconst getFormation = (slotOptions, baseSize, planes) => new Formation(buildFormation(slotOptions.slots, baseSize), planes)\n\nexport default createSelector([getSlotOptions, getBaseSize, getPlanesSelector], getFormation)","import { connect } from 'react-redux'\nimport FormationComponent from './FormationComponent';\nimport debounceRender from 'react-debounce-render'\nimport { getFormation } from '../selectors'\n\nconst mapStateToProps = (state) => ({\n    formation: getFormation(state),\n    viewConfig: state.viewConfig\n})\n\nexport default connect(\n    mapStateToProps\n)(debounceRender(FormationComponent, 100))","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Dropdown, Icon } from \"semantic-ui-react\";\nimport { getSlotOptions } from '../../selectors';\nimport { formationSlots, baseSize } from '../../actions';\n\nconst trigger = slots => <span>\n    <Icon name='users' /> <strong>Slots:</strong> {slots}\n</span>\n\nconst Slots = props => {\n    const { slotsOptions: { min, max, slots }, baseSize, onFormationSlotsSet, onBaseSizeSet } = props\n\n    return <Dropdown trigger={trigger(slots)} pointing className='link item'>\n        <Dropdown.Menu>\n            <Dropdown.Item>\n                <span>{min} </span>\n                <input type=\"range\" value={slots} min={min} max={max}\n                    onChange={e => onFormationSlotsSet(e.target.value)} />\n                <span> {max}</span>\n            </Dropdown.Item>\n            <Dropdown.Item>\n                <Dropdown trigger={<span><strong>Base Size</strong>: {baseSize}</span>}>\n                    <Dropdown.Menu>\n                        {[4, 6, 8, 10].map(bs =>\n                            <Dropdown.Item key={bs} onClick={() => onBaseSizeSet(bs)} active={baseSize === bs}>\n                                {bs}\n                            </Dropdown.Item>)}\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Dropdown.Item>\n        </Dropdown.Menu>\n    </Dropdown>\n}\n\n\nconst mapStateToProps = (state) => ({\n    slotsOptions: getSlotOptions(state),\n    baseSize: state.formationConfig.baseSize\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onFormationSlotsSet: slots => dispatch(formationSlots(slots)),\n    onBaseSizeSet: size => dispatch(baseSize(size))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Slots)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Dropdown, Icon } from \"semantic-ui-react\";\nimport { setPlaneType, setPlaneSlots, setPlaneSlotting, PlaneTypes, SlottingOptions } from '../../actions';\n\n\n\n\n\nconst PlaneMenu = ({ planeConfig, setters }) => {\n    const { plane, label, slotting, type, slots } = planeConfig\n    const { onPlaneSlottingSet, onPlaneTypeSet, onPlaneSlotsSet } = setters\n    const trigger = <div><strong>{label}</strong>: {type}{type !== PlaneTypes.NONE ? `, ${slots} slots, ${slotting === SlottingOptions.FILL ? 'filled' : 'slotted evenly'}` : null}</div>\n\n    const types = plane === 'lead' ? [PlaneTypes.OTTER, PlaneTypes.SKYVAN] : [PlaneTypes.OTTER, PlaneTypes.SKYVAN, PlaneTypes.NONE]\n\n    const { FILL, SPLIT } = SlottingOptions\n    const slottingDescriptions = {\n        [FILL]: 'Fill plane',\n        [SPLIT]: 'Split evenly'\n    }\n    const slottings = [SPLIT, FILL]\n\n    return (\n        <Dropdown.Item>\n            <Dropdown trigger={trigger} fluid>\n                <Dropdown.Menu>\n                    <Dropdown.Header>Type</Dropdown.Header>\n                    {types.map(t =>\n                        <Dropdown.Item key={t} onClick={() => onPlaneTypeSet(plane, t)} active={type===t}>\n                            {t}\n                        </Dropdown.Item>)\n                    }\n                    <Dropdown.Divider />\n                    <Dropdown.Header>Slotting</Dropdown.Header>\n                    {slottings.map(s =>\n                        <Dropdown.Item key={s} onClick={() => onPlaneSlottingSet(plane, s)} active={slotting===s}>\n                            {slottingDescriptions[s]}\n                        </Dropdown.Item>)\n                    }\n                    <Dropdown.Divider />\n                    <Dropdown.Header>Slots: {slots}</Dropdown.Header>\n                    <Dropdown.Item>\n                        <span>0 </span>\n                        <input type=\"range\" value={slots} min={0} max={30}\n                            onChange={e => onPlaneSlotsSet(plane, parseInt(e.target.value))} />\n                        <span> {30}</span>\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </Dropdown.Item>\n    )\n}\n\nconst Planes = props => {\n    const { planesConfig, setters } = props\n\n    const numPlanes = planesConfig.filter(({ type }) => type !== PlaneTypes.NONE).length\n\n    const trigger = <span><Icon name='plane'/> <strong>Planes:</strong> {numPlanes}</span>\n\n    return <Dropdown trigger={trigger} item>\n        <Dropdown.Menu>\n            {planesConfig.map(planeConfig => <PlaneMenu key={planeConfig.plane} planeConfig={planeConfig} setters={setters} />)}\n        </Dropdown.Menu>\n    </Dropdown>\n}\n\n\nconst mapStateToProps = (state) => ({\n    planesConfig: state.planesConfig,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setters: {\n        onPlaneTypeSet: (plane, type) => dispatch(setPlaneType(plane, type)),\n        onPlaneSlotsSet: (plane, slots) => dispatch(setPlaneSlots(plane, slots)),\n        onPlaneSlottingSet: (plane, slotting) => dispatch(setPlaneSlotting(plane, slotting)),\n    }\n})\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Planes)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Dropdown, Icon } from \"semantic-ui-react\";\nimport { ColorOptions, setColorBy, setNumberBy, NumberOptions } from '../../actions';\n\n\n\n\n\n\n\nconst View = props => {\n    const { viewConfig, onSetColorBy, onSetNumberBy } = props\n\n    const trigger = <span><Icon name='eye' /> <strong>View</strong></span>\n\n    const colorBys = [\n        { opt: ColorOptions.DEFAULT, desc: 'Default' },\n        { opt: ColorOptions.PLANE, desc: 'Plane' },\n        { opt: ColorOptions.BUILD_ORDER, desc: 'Build Order' }\n    ].map(({ opt, desc }) =>\n        <Dropdown.Item key={opt} onClick={() => onSetColorBy(opt)} active={viewConfig.colorBy === opt} >{desc}</Dropdown.Item>)\n\n\n    const numberBys = [\n        { opt: NumberOptions.SLOT_NUM, desc: 'Slot Number' },\n        { opt: NumberOptions.BUILD_ORDER, desc: 'Build Order' }\n    ].map(({opt, desc}) => \n        <Dropdown.Item key={opt} onClick={() => onSetNumberBy(opt)} active={viewConfig.numberBy === opt} >{desc}</Dropdown.Item>)\n    \n\n\n    return <Dropdown trigger={trigger} item>\n        <Dropdown.Menu>\n            <Dropdown.Header>Color by</Dropdown.Header>\n            {colorBys}\n            <Dropdown.Divider />\n            <Dropdown.Header>Number by</Dropdown.Header>\n            {numberBys}\n        </Dropdown.Menu>\n    </Dropdown>\n}\n\n\nconst mapStateToProps = (state) => ({\n    viewConfig: state.viewConfig,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onSetColorBy: colorBy => dispatch(setColorBy(colorBy)),\n    onSetNumberBy: numberBy => dispatch(setNumberBy(numberBy))\n})\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(View)","import React from 'react'\nimport { Menu } from 'semantic-ui-react'\nimport Slots from './config/Slots';\nimport Planes from './config/Planes';\nimport View from './config/View';\n\nexport default () =>\n  <Menu size={\"mini\"} secondary>\n    <Slots/>\n    <Planes/>\n    <View/>\n  </Menu>\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ColorOptions, NumberOptions, SET_COLOR_BY, SET_NUMBER_BY, FormationTypes, SET_FORMATION_SLOTS, SET_BASE_SIZE, SET_FORMATION_TYPE, SET_PLANE_SLOTS, SET_PLANE_SLOTTING, SET_PLANE_TYPE, SlottingOptions, PlaneTypes } from \"./actions\";\nimport { combineReducers } from \"redux\";\n\nconst initialPlaneState = [\n    {\n        plane: 'lead',\n        label: 'Lead',\n        slotting: SlottingOptions.SPLIT,\n        type: PlaneTypes.OTTER,\n        slots: 23\n    },\n    {\n        plane: 'lt',\n        label: 'Left Trail',\n        slotting: SlottingOptions.SPLIT,\n        type: PlaneTypes.NONE,\n        slots: 23\n    },\n    {\n        plane: 'rt',\n        label: 'Right Trail',\n        slotting: SlottingOptions.SPLIT,\n        type: PlaneTypes.OTTER,\n        slots: 23\n    }\n]\n\nconst planesConfig = (state = initialPlaneState, { type, plane, payload }) => {\n    return state.map(p => {\n        if (p.plane !== plane) {\n            return p\n        }\n        switch (type) {\n            case SET_PLANE_SLOTS:\n                return { ...p, slots: payload }\n            case SET_PLANE_SLOTTING:\n                return { ...p, slotting: payload }\n            case SET_PLANE_TYPE:\n                return { ...p, type: payload }\n            default:\n                return p\n        }\n    })\n}\n\nconst formationConfig = (state = { slots: 42, baseSize: 6, type: FormationTypes.HD }, { type, payload }) => {\n    switch (type) {\n        case SET_FORMATION_SLOTS:\n            return { ...state, slots: payload }\n        case SET_BASE_SIZE:\n            return { ...state, baseSize: payload }\n        case SET_FORMATION_TYPE:\n            return { ...state, type: payload }\n        default:\n            return state\n    }\n\n}\n\nconst viewConfig = (\n    state = { colorBy: ColorOptions.PLANE, numberBy: NumberOptions.SLOT_NUM },\n    { type, payload }) => {\n    switch (type) {\n        case SET_COLOR_BY:\n            return { ...state, colorBy: payload }\n        case SET_NUMBER_BY:\n            return { ...state, numberBy: payload }\n        default:\n            return state\n    }\n}\n\nexport default combineReducers({ planesConfig, formationConfig, viewConfig })","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux'\n\nimport reducer from './reducer'\n\nconst store = createStore(\n    reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n); \n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport { Container } from 'semantic-ui-react'\nimport FormationContainer from './FormationContainer';\nimport ConfigMenu from './ConfigMenu';\n\nexport default () =>\n  <Container fluid style={{ marginTop: '10px', height: '100vh' }}>\n    <ConfigMenu/>\n    <FormationContainer />\n  </Container>"],"sourceRoot":""}