{"version":3,"sources":["formation/PlanePosition.ts","drawing/AbstractDrawer.ts","store/types.ts","constants.ts","geometry/Polar.ts","drawing/slotdatafuns.ts","drawing/PlanesDrawer.ts","drawing/FormationDrawer.ts","components/FormationComponent.tsx","util/approxeq.ts","formation/lapwrapper.ts","formation/lap.js","formation/slotify.ts","formation/buildSlots.ts","formation/components/Component.ts","formation/components/Round.ts","formation/components/Whacker.ts","formation/components/Base.ts","formation/AbstractSlotCollection.ts","formation/buildFormation.ts","selectors/getSlotOptions.ts","formation/planes.ts","formation/buildPlanes.ts","selectors/index.ts","formation/planeify.ts","components/FormationContainer.ts","components/config/Slots.tsx","store/actions.ts","components/config/Planes.tsx","components/config/View.tsx","components/ConfigMenu.tsx","serviceWorker.js","store/reducer.ts","index.tsx","components/App.tsx"],"names":["PlanePosition","AbstractDrawer","group","this","Slotting","PlaneType","ColorOption","NumberOption","ShowOption","FormationType","PI","Math","TAU","Polar","radius","theta","Object","classCallCheck","unspin","concat","other","r1","t1","r2","t2","sqrt","cos","atan2","sin","plus","rotate","minus","s","floor","arc","_ref","_ref$formationSlot","formationSlot","position","dockAngle","scaledPos","scale","d3","outerRadius","innerRadius","startAngle","d3theta","endAngle","FILL_FUNCTIONS","DEFAULT","BUILD_ORDER","_ref2","stop","buildOrder","domain","map","x","toString","PLANE","d","filter","_","i","includes","LEAD","LT","RT","plane","RADIAL","_ref3","offset","LABEL_FUNCTIONS","SLOT_NUM","formationSlotId","_ref4","y","_ref5","planeX","planeSlot","FORMATION_SCALE_FACTOR","planeY","highlight","transition","ease","overshoot","attr","unhighlight","addSlot","g","fill","label","append","classed","on","call","slotG","circle","text","updateSlot","select","transitionOut","exit","t","remove","w","otterPoints","doorPoints","l","line","PlanesDrawer","args","p2c","planes","show","viewConfig","formation","FORMATION","Map","PLANES","positions","p","idx","all","length","abs","BOTH","max","planeCoordinates","slotsByPlane","Array","from","slots","reduce","slotData","array","get","push","set","slicedToArray","duration","selectAll","data","join","enter","gg","undefined","selection","planeId","FormationDrawer","_ref6","translate","FormationComponent","svg","allGrp","zoom","formationDrawer","planesDrawer","parseInt","style","_this2","scaleExtent","transform","translateBy","width","height","withGroup","draw","props","_this3","react_default","a","createElement","ref","element","React","Component","approxeq","b","eps","arguments","Number","EPSILON","lapwrapper","as","bs","scoreFun","Error","result","dim","cost","cost_matrix","j","i1","j1","sum","unassignedfound","imin","prvnumfree","f","i0","k","freerow","j2","endofpath","last","low","up","min","h","umin","usubmin","v2","BIG","epsilon","rowsol","Int32Array","colsol","u","Float64Array","v","numfree","free","collist","matches","pred","loopcnt","lapcost","row","col","lap","memo","key","has","every","r","Set","size","allScores","flatMap","score","console","log","slotPlane","formationSlotIds","filledSlots","planeSlotId","slot","reverseBuildOrder","jr","slotJr","slotNumOffset","checkSlot","slotPosition","waiting","_this","range","pos","rotation","apply","toConsumableArray","parents","parent","maxBuildOrder","Round","left","right","possibleConstructorReturn","getPrototypeOf","firstRun","_prrd","c","prrd","ceil","_positionRadiusRotationDockAngle","dockPosition","leftDockPosition","rightDockPosition","dockDistance","distanceFrom","_Round$__computeRadiu","__computeRadiusTheta","angleDelta","angleTo","error","iters","iter","lower","upper","mid","ss","Whacker","dock","hand","_this$dock","_this$dock2","psuedoSlots","_left","_right","invisibleSlots","_this$_prrd","fixedRotation","Base","_rotation","AbstractSlotCollection","_slots","computeSlots","slotsInRing","baseSize","ring","podLines","round","bridges","addRings","rings","completeRings","nextRingSlots","dockPositions","base","component","isPod","firstPods","numBridges","bridgeNum","secondPods","bridgeSecondPods","secondPod","nextDockPositions","slotGroups","slotsPerGroup","groupsWithExtraSlot","nextRing","groupNum","slotsToFill","totalSlotsInGroup","priorSlots","leftHandSlots","rightHandSlots","whackers","FormationImpl","components","allSlots","objectSpread","parentToChildren","child","forEach","componentToWaiting","children","numWaiting","find","slotRadi","createSelector","state","formationConfig","planesConfig","_planesConfig$filter$","type","NONE","slotting","planeMin","FILL","planeMax","fixedMin","Otter","_AbstractPlane","_getPrototypeOf2","_len","_key","jrOffset","inherits","createClass","value","floaters","inDoor","inDoor2","divers","AbstractPlane","countFilledSlots","filledPlanes","_ref10","_ref11","slotUnfilledPlanes","unfilledPlanes","slotsRemaining","slotsPerPlane","lead","littlePlanes","littlePlaneLabels","_ref7","minSlotsPerPlane","extras","filledLead","_ref8","remainingFilled","_ref9","_ref12","getSlots","getSlotOptions","getBaseSize","getFormation","flat","getPlanes","slotsMap","_ref13","_ref14","OTTER","SKYVAN","planeFactory","getAllSlots","planeAssignments","slotify","_slotted$","slotted","baseIds","unslotted","keys","planeArray","remainigToFill","slotId","diff","componentTheta","componentPosition","penalty","slotIds","planeify","connect","colorBy","numberBy","slotsOptions","dispatch","onFormationSlotsSet","formationSlots","onBaseSizeSet","_props$slotsOptions","trigger","Icon","name","Dropdown","pointing","className","Menu","Item","onChange","e","target","onClick","active","PlaneMenu","_slottingDescriptions","planeConfig","setters","onPlaneSlottingSet","onPlaneTypeSet","onPlaneSlotsSet","types","SPLIT","slottingDescriptions","defineProperty","slottings","fluid","Header","Divider","planeType","setPlaneType","setPlaneSlots","setPlaneSlotting","numPlanes","item","Planes_PlaneMenu","onSetColorBy","setColorBy","onSetNumberBy","setNumberBy","onSetShow","setShow","colorBys","opt","desc","numberBys","ConfigMenu","secondary","config_Slots","config_Planes","config_View","Boolean","window","location","hostname","match","initialPlaneState","rootReducer","combineReducers","action","HD","formationType","store","createStore","reducer","composeWithDevTools","ReactDOM","render","es","Container","marginTop","FormationContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAKA,qICEyBC,mDAE5BC,mEAEUA,GAER,OADAC,KAAKD,MAAQA,EACNC,wBDRNH,iDAMUA,IEJHI,EAKAC,EAMAC,EAOAC,EAKAC,EAMAC,EFzBGT,cEJHI,sDAKAC,wEAMAC,0GAOAC,0EAKAC,8FAMAC,mCAyBL,ICxDMC,EAAKC,KAAKD,GACVE,EAAM,EAAIF,ECEFG,aAGjB,SAAAA,EAAYC,EAAgBC,GAAgBC,OAAAC,EAAA,EAAAD,CAAAb,KAAAU,GAAAV,KAF9CW,YAE6C,EAAAX,KAD7CY,WAC6C,EACzCZ,KAAKW,OAAOA,EACZX,KAAKY,MAAMF,EAAMK,OAAOH,0DAIxB,WAAAI,OAAYhB,KAAKW,OAAjB,WAAAK,OAA4BhB,KAAKY,MAAMH,EAAvC,wCAIGQ,GAAc,IACFC,EAAiBlB,KAAzBW,OAAmBQ,EAAMnB,KAAbY,MACJQ,EAAiBH,EAAzBN,OAAmBU,EAAMJ,EAAbL,MACnB,OAAO,IAAIF,EACTF,KAAKc,KAAKJ,EAAGA,EAAKE,EAAGA,EAAK,EAAEF,EAAGE,EAAGZ,KAAKe,IAAIF,EAAGF,IAC9CA,EAAKX,KAAKgB,MAAMJ,EAAKZ,KAAKiB,IAAIJ,EAAGF,GAAKD,EAAKE,EAAKZ,KAAKe,IAAIF,EAAGF,mCAI1DF,GACJ,OAAOjB,KAAK0B,KAAKT,EAAMU,OAAOpB,mCAGzBK,GACL,OAAO,IAAIF,EAAMV,KAAKW,OAAQX,KAAKY,MAAQA,wCAIhCK,GACX,OAAOjB,KAAK4B,MAAMX,GAAON,yCAGjBM,GACR,OAAOjB,KAAK4B,MAAMX,GAAOL,sCAGnBK,GACN,OAAOA,EAAMW,MAAM5B,MAAMY,oCAGrBiB,GACJ,OAAO,IAAInB,EAAMV,KAAKW,OAASkB,EAAG7B,KAAKY,uCAOvC,OAAOF,EAAMK,QAAQf,KAAKY,MAAQL,EAAG,6BAIrC,OAAOP,KAAKW,OAASH,KAAKe,IAAIvB,KAAKY,iCAKnC,OAASZ,KAAKW,OAASH,KAAKiB,IAAIzB,KAAKY,wCAIzBA,GAEZ,OAAOA,EAAa,EADVJ,KAAKsB,MAAMlB,GAAS,EAAIL,IACVA,WC3DjBwB,EAAM,SAAAC,GAA0D,IAAAC,EAAAD,EAAvDE,cAAiBC,EAAsCF,EAAtCE,SAAUC,EAA4BH,EAA5BG,UACzCC,EAAYF,EAASG,MFTD,IEU1B,OAAOC,MAAS,CACdC,YAAaH,EAAU1B,OACvB8B,YAAaJ,EAAU1B,OACvB+B,WAAYL,EAAUM,QAAUP,EAChCQ,SAAUP,EAAUM,QAAUP,KAuBrBS,EAA0C,CACrDC,QAAS,kBAAM,MACfC,YAlBqB,SAAAC,GAAA,IAHFC,EAGsBC,EAApBF,EAAGd,cAAiBgB,WAApB,OACrBX,IAAgBA,KAAiBY,QAJdF,EAIiC,GAHpDV,IAASU,GAAMG,IAAI,SAAAC,GAAC,OAAIA,EAAEC,cAG1Bf,EACGW,EAAa,GAAGI,aAiBnBC,MAfgB,SAACC,GAAD,OAChBjB,IACgBA,IAAgBkB,OAAO,SAACC,EAAGC,GAAJ,MAAU,CAAC,EAAG,EAAG,GAAGC,SAASD,MACjER,OAAO,CAACtD,EAAcgE,KAAMhE,EAAciE,GAAIjE,EAAckE,IAF/DxB,CAGEiB,EAAEQ,MAAM7B,WAYV8B,OATiB,SAAAC,GAAiC,IAA9BhC,EAA8BgC,EAA9BhC,cACdtB,EAAQsB,EAAciC,OAAOzC,KAAKQ,EAAcC,UAAUvB,MAAQH,EACxE,OAAO8B,IAAsB3B,KAUlBwD,EAA2C,CACtDC,SAAU,SAACb,GAAD,OAAiBA,EAAEc,gBAAkB,GAC/CvB,YAAa,SAACS,GAAD,OAAiBA,EAAEtB,cAAcgB,aAInCG,EAAI,SAAAkB,GAAA,OAAAA,EAAGrC,cAAiBC,SAC1BG,MFnDiB,IEmDGe,GAClBmB,EAAI,SAAAC,GAAA,OAAAA,EAAGvC,cAAiBC,SAC1BG,MFrDiB,IEqDGkC,GAIlBE,EAAS,SAAClB,GAAD,OAAiBA,EAAEmB,UAAUtB,EAAIuB,GAC1CC,EAAS,SAACrB,GAAD,OAAiBA,EAAEmB,UAAUH,EAAII,GAE1CA,EAAyB,GAEzBE,EAAY,SAACtB,GACxBjB,IAAA,qBAAAvB,OAAkCwC,EAAEc,gBAApC,mBACGS,aACAC,KAAKzC,IAAY0C,UAAU,IAC3BC,KAAK,IAAK,KAEFC,EAAc,SAAC3B,GAC1BjB,IAAA,qBAAAvB,OAAkCwC,EAAEc,gBAApC,mBACGS,aACAC,KAAKzC,IAAY0C,UAAU,IAC3BC,KAAK,IAAK,KAmCFE,EAAU,SACrBC,EACAhC,EACAmB,EACAc,EACAC,GAEA,OAAOF,EACJG,OAAO,KACPC,QAAQ,QAAQ,GAChBC,GAAG,YAAaZ,GAChBY,GAAG,WAAYP,GACfD,KAAK,kBAAmB,SAAA1B,GAAC,OAAIA,EAAEc,kBAC/BqB,KAAK,SAAAC,GACJA,EACGJ,OAAO,UACPN,KAAK,IAAK,IACVS,KAAK,SAAAE,GACJxC,GAAKwC,EAAOX,KAAK,KAAM7B,GACvBmB,GAAKqB,EAAOX,KAAK,KAAMV,GACvBc,GAAQO,EAAOX,KAAK,OAAQI,KAEhCM,EACGJ,OAAO,QACPN,KAAK,cAAe,UACpBA,KAAK,oBAAqB,WAC1BS,KAAK,SAAAG,GACJzC,GAAKyC,EAAKZ,KAAK,IAAK7B,GACpBmB,GAAKsB,EAAKZ,KAAK,IAAKV,GACpBe,GAASO,EAAKA,KAAKP,QAKhBQ,EAAa,SACxBV,EACAhC,EACAmB,EACAc,EACAC,GAEAF,EAAEW,OAAO,iBACNd,KAAK,KAAM7B,GACX6B,KAAK,KAAMV,GACXU,KAAK,OAAQI,GAEhBD,EAAEW,OAAO,eACNd,KAAK,IAAK7B,GACV6B,KAAK,IAAKV,GACVsB,KAAKP,IAGGU,EAAgB,SAC3BC,EACAC,GAF2B,OAI3BD,EACGnB,WAAWoB,GACXjB,KAAK,YAAa,YAClBkB,UC5ICC,EAAI,IAEJC,EAAc,CAClB,CAAEjD,GAAIgD,EAAG7B,GAAG,GACZ,CAAEnB,EAAGgD,EAAG7B,GAAG,GACX,CAAEnB,EAAGgD,EAAG7B,EAJA,GAKR,CAAEnB,GAAIgD,EAAG7B,EALD,GAMR,CAAEnB,GAAIgD,EAAG7B,GAAG,IAGR+B,EAAa,CAAC,CAAElD,GAAIgD,EAAG7B,EAAGgC,GAAS,CAAEnD,GAAIgD,EAAG7B,EAAGgC,IAE/CC,EAAOlE,MAEVc,EAAE,SAAAG,GAAC,OAAIA,EAAEH,EAAIuB,IACbJ,EAAE,SAAAhB,GAAC,OAAIA,EAAEgB,EAAII,IA+CK8B,+KACdC,GACH,IAAMC,EA/Ce,SAAA5E,GAIP,IAHhB6E,EAGgB7E,EAHhB6E,OACcC,EAEE9E,EAFhB+E,WAAcD,KACDnG,EACGqB,EADhBgF,UAAarG,OAEb,OAAQmG,GACN,KAAKzG,EAAW4G,UACd,OAAO,IAAIC,IACb,KAAK7G,EAAW8G,OACd,IAAMC,EAAYP,EAAOzD,IAAI,SAAAiE,GAAC,OAAIA,EAAElF,WASpC,OAR6B,IAAI+E,IAC/B,CAACrH,EAAciE,GAAIjE,EAAcgE,KAAMhE,EAAckE,IAClDN,OAAO,SAAA4D,GAAC,OAAID,EAAUxD,SAASyD,KAC/BjE,IAAI,SAACiE,EAAGC,EAAKC,GACZ,IAAMpD,EAAe,IAANmD,EAA+B,KAAlBC,EAAIC,OAAS,GACzC,MAAO,CAACH,EAAG,IAAI3G,EAAMF,KAAKiH,IAAItD,GAASA,GAAU,EAAI,EAAI5D,OAKjE,KAAKF,EAAWqH,KAYd,OAX6B,IAAIR,IAC/BL,EAAOzD,IAAI,SAAAJ,GAAyB,IAAtBb,EAAsBa,EAAtBb,SAAUvB,EAAYoC,EAAZpC,MACtB,MAAO,CACLuB,EACA,IAAIzB,EHpEY,GGqEdF,KAAKmH,IAAI,EAAGhH,EAAS,GACrBwB,IAAatC,EAAcgE,KAAOpD,EAAM,GAAKG,QAoB3CgH,CAAiBjB,GAErBrB,EAAgBqB,EAAhBrB,KAAMC,EAAUoB,EAAVpB,MAERsC,EAAeC,MAAMC,KACzBpB,EAAKqB,MAAMC,OAAO,SAAC7E,EAAK8E,GACtB,IAAMC,EAAQ/E,EAAIgF,IAAIF,EAASlE,QAAU,GAEzC,OADAmE,EAAME,KAAKH,GACJ9E,EAAIkF,IAAIJ,EAASlE,MAAOmE,IAC9B,IAAIjB,MACP9D,IAAI,SAAAc,GAAA,IAAAK,EAAA1D,OAAA0H,EAAA,EAAA1H,CAAAqD,EAAA,SAAwB,CAAEF,MAA1BO,EAAA,GAAiC2D,SAAjC3D,EAAA,MAEA4B,EAAI5D,MAAgBiG,SAAS,KAOnCxI,KAAKD,MACF0I,UAAqC,WACrCC,KAAmBb,EAAc,SAAArE,GAAC,OAAIA,EAAEQ,MAAM7B,WAC9CwG,KACC,SAAAC,GAAK,OACHA,EACGpD,OAAO,KACPC,QAAQ,SAAS,GACjBE,KAAK,SAAAkD,GACJA,EAAGrD,OAAO,QAAQN,KAAK,IAAKuB,EAAKH,IACjCuC,EAAGrD,OAAO,QACPN,KAAK,eAAgB,GACrBA,KAAK,IAAKuB,EAAKF,IAClBsC,EAAGrD,OAAO,QACPN,KAAK,cAAe,UACpBA,KAAK,oBAAqB,WAC1BA,KAAK,IAAK,GACVA,KAAK,KAAM,KACXY,KAAK,SAAAtC,GAAC,OAAIA,EAAEQ,MAAM7B,aAEtB+C,KAAK,YAAa,iCACvB4D,EACA,SAAA5C,GAAI,OAAID,EAAcC,EAAMC,KAE7BpB,WAAWoB,GACXjB,KACC,YACA,SAAAT,GAAA,IAAYtC,EAAZsC,EAAGT,MAAS7B,SAAZ,mBAAAnB,OACe4F,EAAIwB,IAAIjG,GAAWkB,EADlC,KAAArC,OACuC4F,EAAIwB,IAAIjG,GAAWqC,EAD1D,gBAGDuE,YACAN,UAAiC,UACjCC,KAAe,SAAAlF,GAAC,OAAIA,EAAE0E,UAAU,SAAA1E,GAAC,SAAAxC,OAAOwC,EAAEc,gBAAT,KAAAtD,OAA4BwC,EAAEwF,WAC/DL,KAAK,SAAAC,GAAK,OAAIxD,EAAQwD,SAAQE,EAAW,SAAA5C,GAAI,OAAID,EAAcC,EAAMC,KACrEpB,WAAWoB,GACXjB,KAAK,YAAa,YAClBS,KAAK,SAAAC,GACJG,EAAWH,EAAOlB,EAAQG,EAAQS,EAAMC,YA1DNzF,GClErBmJ,kLAIqC,IAAjDjB,EAAiDhG,EAAjDgG,MAAOjB,EAA0C/E,EAA1C+E,WAAYzB,EAA8BtD,EAA9BsD,KAAMC,EAAwBvD,EAAxBuD,MACxB2C,EACJnB,EAAWD,OAASzG,EAAW8G,OAAS,GAAKa,EAEzC7B,EAAI5D,MAAgBiG,SAAS,KAOnCxI,KAAKD,MACF0I,UAAiC,eACjCC,KAAeR,EAAU,SAAA1E,GAAC,OAAIA,EAAEc,gBAAgBhB,aAChDqF,KACC,SAAAC,GAAK,OACHA,EACGpD,OAAO,KACPN,KAAK,QAAS,aACdA,KAAK,YAAa,2BAClBS,KAAK,SAAAN,GACJA,EAAEG,OAAO,QACNN,KAAK,QAAS,SACdA,KAAK,IAAKnD,GACbqD,EAAQC,EAAGhC,EAAGmB,EAAGc,EAAMC,WAE7BuD,EACA,SAAA5C,GAAI,OAAID,EAAcC,EAAMC,KAE7BpB,WAAWoB,GACXjB,KAAK,YAAa,SAAA1B,GAAC,OFFD,SAAA0F,GAAA,IAAoB/E,EAApB+E,EAAGhH,cAAiBiC,OAApB,mBAAAnD,OACVmD,EAAO7B,MFvDM,IEuDce,EADjB,KAAArC,OACsBmD,EAAO7B,MFvD1B,IEuD8CkC,EADjD,KEEK2E,CAAU3F,GAAK,cACtCmC,KAAK,SAAAN,GACJA,EAAEW,OAAO,QAAQd,KAAK,IAAKnD,GAC3BgE,EAAWV,EAAGhC,EAAGmB,EAAGc,EAAMC,YArCWzF,GCNxBsJ,6MAInBC,aACAC,gBACAC,cACAC,yBACAC,4FAGE,OAAOC,SAAS1J,KAAKqJ,IAAIM,MAAM,UAAW,oCAI1C,OAAOD,SAAS1J,KAAKqJ,IAAIM,MAAM,SAAU,gDAGvB,IAAAC,EAAA5J,KAClBA,KAAKsJ,OAAStJ,KAAKqJ,IAAI7D,OAAO,KAE9BxF,KAAKuJ,KAAOhH,MAETsH,YAAY,CAAC,GAAK,IAClBnE,GAAG,OAAQ,kBAAMkE,EAAKN,OAAOpE,KAAK,YAAa3C,IAASuH,aAE3D9J,KAAKqJ,IACF1D,KAAK3F,KAAKuJ,MACV5D,KAAK3F,KAAKuJ,KAAKQ,YAAa/J,KAAKgK,QAAU,EAAGhK,KAAKiK,SAAW,GAKjEjK,KAAKwJ,iBAAkB,IAAIP,GAAkBiB,UAC3ClK,KAAKsJ,OAAO9D,OAAO,MAErBxF,KAAKwJ,gBAAgBW,KAAKnK,KAAKoK,OAE/BpK,KAAKyJ,cAAe,IAAI/C,GAAewD,UAAUlK,KAAKsJ,OAAO9D,OAAO,MACpExF,KAAKyJ,aAAaU,KAAKnK,KAAKoK,oDAI5BpK,KAAKwJ,gBAAgBW,KAAKnK,KAAKoK,OAC/BpK,KAAKyJ,aAAaU,KAAKnK,KAAKoK,wCAGrB,IAAAC,EAAArK,KACP,OACEsK,EAAAC,EAAAC,cAAA,OACER,MAAO,OACPC,OAAQ,OACRQ,IAAK,SAAAC,GAAO,OAAKL,EAAKhB,IAAM9G,IAAUmI,aApDEC,IAAMC,2BClBvC,SAASC,EACtBN,EACAO,GAEA,IADAC,EACAC,UAAAxD,OAAA,QAAAsB,IAAAkC,UAAA,GAAAA,UAAA,GADMxK,KAAKc,KAAK2J,OAAOC,SAEvB,OAAO1K,KAAKiH,IAAI8C,EAAIO,GAAKC,EC4DZI,MAtCf,SACEC,EACAC,EACAC,GAEA,GAAIF,EAAG5D,SAAW6D,EAAG7D,OACnB,MAAM,IAAI+D,MAAM,+BAGlB,IAAMC,ECRO,SAAaC,EAAKC,GAY/B,GAAoB,kBAATA,EAAmB,CAC5B,IAAIC,EAAcD,EAClBA,EAAO,SAAU/H,EAAGiI,GAClB,OAAOD,EAAYhI,GAAGiI,IAI1B,IAEMC,EAAIC,EAFNC,EAAM,EAGR,IAAKF,EAAK,EAAGA,EAAKJ,EAAKI,IACrB,IAAKC,EAAK,EAAGA,EAAKL,EAAKK,IACrBC,GAAOL,EAAKG,EAAIC,GAGtB,IAMIE,EAEArI,EAAGsI,EAAmBC,EAAYC,EAAGC,EAAIC,EAAGC,EAE5CV,EAAGE,EAAIS,EAAIC,EAAWC,EAAMC,EAAKC,EAEjCC,EAAKC,EAAGC,EAAMC,EAASC,EAZrBC,EAAelB,EAAMN,EAAf,IACNyB,EAAUnB,EAAMN,EAAM,IACtB0B,EAAS,IAAIC,WAAW3B,GAC5B4B,EAAS,IAAID,WAAW3B,GACxB6B,EAAI,IAAIC,aAAa9B,GACrB+B,EAAI,IAAID,aAAa9B,GAGVgC,EAAU,EAMjBC,EAAO,IAAIN,WAAW3B,GACtBkC,EAAU,IAAIP,WAAW3B,GACzBmC,EAAU,IAAIR,WAAW3B,GACzBjI,EAAI,IAAI+J,aAAa9B,GACrBoC,EAAO,IAAIT,WAAW3B,GAG5B,IAAK9H,EAAI,EAAGA,EAAI8H,EAAK9H,IACnBiK,EAAQjK,GAAK,EAGf,IACEiI,EAAIH,EACJG,KAEA,CAIA,IAFAgB,EAAMlB,EAAK,EAAGE,GACdK,EAAO,EACFtI,EAAI,EAAGA,EAAI8H,EAAK9H,IACf+H,EAAK/H,EAAGiI,GAAKgB,IACfA,EAAMlB,EAAK/H,EAAGiI,GACdK,EAAOtI,GAEX6J,EAAE5B,GAAKgB,EACiB,MAAlBgB,EAAQ3B,IAEZkB,EAAOlB,GAAQL,EACfyB,EAAOzB,GAAKK,GACHuB,EAAE5B,GAAK4B,EAAEL,EAAOlB,KACzBH,EAAKqB,EAAOlB,GACZkB,EAAOlB,GAAQL,EACfyB,EAAOzB,GAAKK,EACZoB,EAAOvB,IAAO,GACTuB,EAAOzB,IAAM,EAItB,IAAKjI,EAAI,EAAGA,EAAI8H,EAAK9H,IACnB,GACiB,IAAfiK,EAAQjK,GAER+J,EAAKD,KAAa9J,OACf,GAAmB,IAAfiK,EAAQjK,GAAU,CAIzB,IAFAmI,EAAKqB,EAAOxJ,GACZiJ,EAAMK,EACDrB,EAAI,EAAGA,EAAIH,EAAKG,IACfA,IAAME,GACJJ,EAAK/H,EAAGiI,GAAK4B,EAAE5B,GAAKgB,EAAMM,IAASN,EAAMlB,EAAK/H,EAAGiI,GAAK4B,EAAE5B,IAChE4B,EAAE1B,GAAM0B,EAAE1B,GAAMc,EAKpB,IAAIkB,EAAU,EACd,GAQE,IAPAA,IAIAzB,EAAI,EACJH,EAAauB,EACbA,EAAU,EACHpB,EAAIH,GAAY,CAQrB,IAPAvI,EAAI+J,EAAKrB,GACTA,IAGAS,EAAOpB,EAAK/H,EAAG,GAAK6J,EAAE,GACtB1B,EAAK,EACLiB,EAAUE,EACLrB,EAAI,EAAGA,EAAIH,EAAKG,KACnBiB,EAAInB,EAAK/H,EAAGiI,GAAK4B,EAAE5B,IACXmB,IACFF,GAAKC,GACPC,EAAUF,EACVN,EAAKX,IAELmB,EAAUD,EACVA,EAAOD,EACPN,EAAKT,EACLA,EAAKF,IAIXQ,EAAKiB,EAAOvB,GACRgB,EAAOC,EAAUG,EAGnBM,EAAE1B,GAAM0B,EAAE1B,IAAOiB,EAAUG,EAAUJ,GAC9BV,GAAM,IAIbN,EAAKS,EACLH,EAAKiB,EAAOd,IAIdY,EAAOxJ,GAAKmI,EACZuB,EAAOvB,GAAMnI,EAETyI,GAAM,IACJU,EAAOC,EAITW,IAAOrB,GAAKD,EAIZsB,EAAKD,KAAarB,UAEjB0B,EAAU,GAGnB,IAAK3B,EAAI,EAAGA,EAAIsB,EAAStB,IAAK,CAK5B,IAJAG,EAAUoB,EAAKvB,GAIVP,EAAIH,EAAKG,KACZpI,EAAEoI,GAAKF,EAAKY,EAASV,GAAK4B,EAAE5B,GAC5BiC,EAAKjC,GAAKU,EACVqB,EAAQ/B,GAAKA,EAGfc,EAAM,EACNC,EAAK,EAGLX,GAAkB,EAClB,EAAG,CACD,GAAIW,IAAOD,EAAK,CAOd,IALAD,EAAOC,EAAM,EAIbE,EAAMpJ,EAAEmK,EAAQhB,MACXN,EAAIM,EAAIN,EAAIZ,EAAKY,KAEpBQ,EAAIrJ,EADJoI,EAAI+B,EAAQtB,MAEHO,IACHC,EAAID,IAEND,EAAKD,EACLE,EAAMC,GAGRc,EAAQtB,GAAKsB,EAAQhB,GACrBgB,EAAQhB,KAAQf,GAKpB,IAAKS,EAAIK,EAAKL,EAAIM,EAAIN,IACpB,GAAIgB,EAAOM,EAAQtB,IAAM,EAAG,CAC1BG,EAAYmB,EAAQtB,GACpBL,GAAkB,EAClB,OAIN,IAAKA,EAOH,IALAF,EAAK6B,EAAQjB,GACbA,IAEAG,EAAInB,EADJ/H,EAAI0J,EAAOvB,GACCA,GAAM0B,EAAE1B,GAAMc,EAErBP,EAAIM,EAAIN,EAAIZ,EAAKY,IAGpB,IADAW,EAAKtB,EAAK/H,EADViI,EAAI+B,EAAQtB,IACMmB,EAAE5B,GAAKiB,GAChBrJ,EAAEoI,GAAI,CAEb,GADAiC,EAAKjC,GAAKjI,EACNqJ,IAAOJ,EACT,IAAIS,EAAOzB,GAAK,EAAG,CAGjBY,EAAYZ,EACZI,GAAkB,EAClB,MAGA2B,EAAQtB,GAAKsB,EAAQhB,GACrBgB,EAAQhB,KAAQf,EAEpBpI,EAAEoI,GAAKoB,UAILhB,GAGV,IAAKK,EAAII,EAAO,EAAGJ,KAEjBmB,EADA1B,EAAK6B,EAAQtB,IACLmB,EAAE1B,GAAMtI,EAAEsI,GAAMc,EAI1B,GACEjJ,EAAIkK,EAAKrB,GACTa,EAAOb,GAAa7I,EACpBmI,EAAKU,EACLA,EAAYW,EAAOxJ,GACnBwJ,EAAOxJ,GAAKmI,QACLnI,IAAM2I,GAIjB,IAAIyB,EAAU,EACd,IAAKpK,EAAI8H,EAAK9H,KACZiI,EAAIuB,EAAOxJ,GACX2J,EAAE3J,GAAK+H,EAAK/H,EAAGiI,GAAK4B,EAAE5B,GACtBmC,GAAoBrC,EAAK/H,EAAGiI,GAG9B,MAAO,CACLF,KAAMqC,EACNC,IAAKb,EACLc,IAAKZ,EACLC,EAAGA,EACHE,EAAGA,GDjQUU,CAAI9C,EAAG5D,OA/BxB,SAAoB4D,EAASC,EAASC,GAEpC,IAAM6C,EAAO,IAAIjH,IACjB,OAAO,SAACvD,EAAWiI,GACjB,IAAMwC,EAAG,GAAApN,OAAM2C,EAAN,KAAA3C,OAAW4K,GACpB,IAAKuC,EAAKE,IAAID,GAAM,CAClB,IAAM7D,EAAIa,EAAGzH,GACPmH,EAAIO,EAAGO,GACbuC,EAAK7F,IAAI8F,EAAK9C,EAASf,EAAGO,IAE5B,OAAOqD,EAAK/F,IAAIgG,IAqBY1C,CAAKN,EAAIC,EAAIC,IAE3C,IACGE,EAAOwC,IAAIM,MAAM,SAAAC,GAAC,OAAIA,GAAK,GAAKA,EAAInD,EAAG5D,UACxC,IAAIgH,IAAIhD,EAAOwC,KAAKS,MAAQrD,EAAG5D,OAC/B,CACA,IAAMkH,EAAYtD,EAAGuD,QAAQ,SAAApE,GAAC,OAC5Bc,EAAGjI,IAAI,SAAA0H,GAAC,MAAK,CAAEP,IAAGO,IAAG8D,MAAOtD,EAASf,EAAGO,QAE1C+D,QAAQC,IAAI,oBAAqB,CAC/BJ,YACAlD,WAWJ,OAAO1D,MAAMC,KAAKyD,EAAOwC,KAAK5K,IAAI,SAACiE,EAAW1D,GAG5C,MAAO,CAFGyH,EAAGzH,GACH0H,EAAGhE,OExDjB,IAAM0H,GAAY,SAChB/K,EACAgD,EACAgI,GAWA,OAAO7D,EAAW6D,EAAkBzM,IAASyB,EAAMiL,aATrC,SAAC3K,EAAyB4K,GACtC,IAAMC,EAAOnI,EAAUgB,MAAM1D,GACrB8K,EAAsBD,EAAtBC,kBACAC,EAAOrL,EAAMgE,MAAMkH,GAAnBG,GAEFC,EAASH,EAAKhL,OAAOzC,KAAKyN,EAAKhN,UAAUqC,EAE/C,OAAOhE,KAAKiH,IAAI4H,GAAMD,EAAoB,IAAME,EAASD,IAEajM,IACtE,SAAApB,GAAA,IAAAgB,EAAAnC,OAAA0H,EAAA,EAAA1H,CAAAmB,EAAA,SAAqC,CAAEsC,gBAAvCtB,EAAA,GAAwDkM,YAAxDlM,EAAA,OCfW,aCCe4H,cAI5B,SAAAA,EAAY5C,EAAeuH,GACzB,GADiD1O,OAAAC,EAAA,EAAAD,CAAAb,KAAA4K,GAAA5K,KAHnDgI,WAGkD,EAAAhI,KAFlDuP,mBAEkD,EAC5CvH,EAAQ,EACV,MAAM,IAAIuD,MAAJ,qCAAAvK,OAA+CgH,IAEvDhI,KAAKgI,MAAQA,EACbhI,KAAKuP,cAAgBA,wDAGbJ,GACR,GAAIA,EAAO,GAAKA,GAAQnP,KAAKgI,MAC3B,MAAM,IAAIuD,MAAJ,yBAAAvK,OAAmChB,KAAKgI,MAAxC,WAAAhH,OAAuDmO,qCAGxDA,GAGP,OAFAnP,KAAKwP,UAAUL,GAER,CACLhL,OAAQnE,KAAKmC,WACbA,SAAUnC,KAAKyP,aAAaN,GAC5B/M,UAAWpC,KAAKoC,YAChBc,WAAYlD,KAAKkD,WAAWiM,GAAQnP,KAAK0P,8CAIjB,IAAAC,EAAA3P,KAC1B,OAAO4P,YAAM5P,KAAKgI,OAAO5E,IAAI,SAAA+L,GAAI,OAAIQ,EAAKzH,SAASiH,0CAIxCtN,GAA2B,IAAhBsC,EAAgB6G,UAAAxD,OAAA,QAAAsB,IAAAkC,UAAA,IAAAA,UAAA,GACtChL,KAAKwP,UAAU3N,GACf,IAAMgO,EAAM,IAAInP,EACdV,KAAKW,SACLX,KAAK8P,WAAa,EAAIjO,EAAI7B,KAAKoC,aAEjC,OAAO+B,EAAS0L,EAAInO,KAAK1B,KAAKmC,YAAc0N,uCAIjChO,GAEX,OADA7B,KAAKwP,UAAU3N,GACR7B,KAAKyP,aAAa5N,GACtBF,QAAQ3B,KAAKoC,aACbV,KAAK1B,KAAKmC,8CAKb,OAAO3B,KAAKmH,IAALoI,MAAAvP,KAAIK,OAAAmP,EAAA,EAAAnP,CACNb,KAAKiQ,UAAU7M,IAChB,SAAA8M,GAAM,OAAIA,EAAOR,UAAYQ,EAAOC,mBAF7BnP,OAAA,CAIT,cC7CeoP,eAWnB,SAAAA,EAAYpI,EAAeuH,EAAuBc,EAAYC,GAAa,IAAAX,EAAA,OAAA9O,OAAAC,EAAA,EAAAD,CAAAb,KAAAoQ,IACzET,EAAA9O,OAAA0P,EAAA,EAAA1P,CAAAb,KAAAa,OAAA2P,EAAA,EAAA3P,CAAAuP,GAAAzK,KAAA3F,KAAMgI,EAAOuH,KAXfc,UAU2E,EAAAV,EAT3EW,WAS2E,EAAAX,EAR3Ec,cAQ2E,EAAAd,EAPnEe,WAOmE,EAEzEf,EAAKU,KAAOA,EACZV,EAAKW,MAAQA,EACbX,EAAKc,UAAW,EAJyDd,yEAQzE,OAAO7H,MAAMC,KAAK,IAAIyG,IAAI,CAACxO,KAAKqQ,KAAKM,EAAG3Q,KAAKsQ,MAAMK,wCA6CnD,OAAO3Q,KAAK4Q,KAAKzO,0CAIjB,OAAOnC,KAAK4Q,KAAKjQ,0CAIjB,OAAOX,KAAK4Q,KAAKd,6CAIjB,OAAO9P,KAAK4Q,KAAKxO,kDAIjB,OAAO5B,KAAKqQ,KAAK7Q,KAAKgI,MAAQ,sCAGrBmH,GAIT,OAHAnP,KAAKwP,UAAUL,GAGR3O,KAAKoM,IAAIuC,EAAO,EAAGnP,KAAKgI,MAAQmH,gCAzDvC,OAPKnP,KAAK0Q,QACR1Q,KAAK0Q,MAAQN,EAAMU,iCACjB9Q,KAAKqQ,KAAKM,EAAEI,aAAa/Q,KAAKqQ,KAAKxO,GACnC7B,KAAKsQ,MAAMK,EAAEI,aAAa/Q,KAAKsQ,MAAMzO,GACrC7B,KAAKgI,QAGFhI,KAAK0Q,iEAaZM,EACAC,EACAjJ,GAEA,IAAMkJ,EAAeF,EAAiBG,aAAaF,GAD7CG,EAEoBhB,EAAMiB,qBAAqBrJ,EAAOkJ,GAApDvQ,EAFFyQ,EAEEzQ,OAAQC,EAFVwQ,EAEUxQ,MAEV0Q,EAAaN,EAAiBO,QAAQN,GACtC9O,EAAW6O,EAAiBtP,KAChC,IAAIhB,EAAMC,EAAQ2Q,GAAc/Q,EAAKK,GAAS,IAK1CwB,GAAa3B,EAAMG,IAAU,EAAIoH,GACjC8H,EAAW3N,EAASoP,QAAQN,GAAqB7O,EAEvD,MAAO,CAAED,WAAUxB,SAAQmP,WAAU1N,0DAmCrCP,EACA2B,GAEA,IADAuH,EACAC,UAAAxD,OAAA,QAAAsB,IAAAkC,UAAA,GAAAA,UAAA,GADMxK,KAAKc,KAAK2J,OAAOC,SAEvB,GAAI1H,EAAI,GAAKA,EAAI3B,EAEf,MADAgN,QAAQ2C,MAAR,MAAAxQ,OAAoBwC,EAApB,SAAAxC,OAA6Ba,IACvB,IAAI0J,MAAM,uBAElB,IAAIkG,EAAQ,EAEZ,SAASC,IAAoC,IAA/BC,EAA+B3G,UAAAxD,OAAA,QAAAsB,IAAAkC,UAAA,GAAAA,UAAA,GAAvB,EAAG4G,EAAoB5G,UAAAxD,OAAA,QAAAsB,IAAAkC,UAAA,GAAAA,UAAA,GAAZzK,EAC/B,GAAIkR,GAAS,IACX,MAAM,IAAIlG,MAAM,mBAElBkG,GAAgB,EAChB,IAAMI,GAAOD,EAAQD,GAAS,EASxBG,EAFItO,GAAK,EAAIhD,KAAKiB,IAAIoQ,EAAM,KAElBpR,EAAMoR,GAEtB,OAAIrR,KAAKiH,IAAIqK,EAAKjQ,GAAKkJ,EACd8G,EAIFC,EAAKjQ,EAAI6P,EAAKG,EAAKD,GAASF,EAAKC,EAAOE,GAGjD,IAAMjR,EAAQ8Q,IACd,MAAO,CACL/Q,OAAQkB,GAAKpB,EAAMiR,KACnB9Q,MAAOA,UApIsBgK,ICPdmH,eAYnB,SAAAA,EAAY/J,EAAeuH,EAAuByC,EAAYC,GAAc,IAAAtC,EAI1E,GAJ0E9O,OAAAC,EAAA,EAAAD,CAAAb,KAAA+R,IAC1EpC,EAAA9O,OAAA0P,EAAA,EAAA1P,CAAAb,KAAAa,OAAA2P,EAAA,EAAA3P,CAAAkR,GAAApM,KAAA3F,KAAMgI,EAAOuH,KAZfyC,UAW4E,EAAArC,EAV5EsC,UAU4E,EAAAtC,EATpEe,WASoE,EAE1Ef,EAAKqC,KAAOA,EAEC,SAATC,GAA4B,UAATA,EACrB,MAAM,IAAI1G,MAAM,oCALwD,OAM1EoE,EAAKsC,KAAOA,EAN8DtC,yEAU1E,MAAO,CAAC3P,KAAKgS,KAAKrB,mCAIZ,IAAAuB,EACWlS,KAAKgS,KAAdrB,EADFuB,EACEvB,EAAG9O,EADLqQ,EACKrQ,EACX,MAAqB,SAAd7B,KAAKiS,KACRtB,EAAEI,aAAalP,GACf8O,EACGlB,aAAa5N,GACbF,QAAQ,EAAIgP,EAAEvO,aACdV,KAAKiP,EAAExO,6CAIP,IAAAgQ,EACUnS,KAAKgS,KAAdrB,EADDwB,EACCxB,EAAG9O,EADJsQ,EACItQ,EACX,MAAqB,SAAd7B,KAAKiS,KACRtB,EACGlB,aAAa5N,GACbF,OAAOgP,EAAEvO,aACTV,KAAKiP,EAAExO,YACVwO,EAAEI,aAAalP,2CA0BnB,OAAO7B,KAAKgI,yCAGHmH,GAET,OADAnP,KAAKwP,UAAUL,GACM,SAAdnP,KAAKiS,KAAkBjS,KAAKgI,MAAQmH,EAAOA,EAAO,qCAIzD,OAAOnP,KAAK4Q,KAAKzO,0CAIjB,OAAOnC,KAAK4Q,KAAKjQ,0CAIjB,OAAOX,KAAK4Q,KAAKd,6CAIjB,OAAO9P,KAAK4Q,KAAKxO,uCA3CjB,IAAKpC,KAAK0Q,MAAO,CACf,IAAM0B,EAA2B,EAAbpS,KAAKgI,MAAY,EAQrC,GANAhI,KAAK0Q,MAAQN,GAAMU,iCACjB9Q,KAAKqS,QACLrS,KAAKsS,SACLF,GAGgB,SAAdpS,KAAKiS,KAAiB,CACxB,IAAMM,EAAiBH,EAAcpS,KAAKgI,MADlBwK,EAEQxS,KAAK0Q,MAA7BZ,EAFgB0C,EAEhB1C,SAAU1N,EAFMoQ,EAENpQ,UACZqQ,EAAgB/R,EAAMK,OAC1B+O,EAA4B,EAAjByC,EAAqBnQ,GAElCpC,KAAK0Q,MAAMZ,SAAW2C,GAG1B,OAAOzS,KAAK0Q,aAlEqB9F,ICLhB8H,eAEnB,SAAAA,EAAY1K,GAAwC,IAAA2H,EAAzBG,EAAyB9E,UAAAxD,OAAA,QAAAsB,IAAAkC,UAAA,GAAAA,UAAA,GAAb,EAAIzK,EAAM,EAAG,OAAAM,OAAAC,EAAA,EAAAD,CAAAb,KAAA0S,IAClD/C,EAAA9O,OAAA0P,EAAA,EAAA1P,CAAAb,KAAAa,OAAA2P,EAAA,EAAA3P,CAAA6R,GAAA/M,KAAA3F,KAAMgI,EAAO,KAFf2K,eACoD,EAElDhD,EAAKgD,UAAY7C,EAFiCH,0EAOlD,OAAO3P,KAAK2S,6CAIZ,OAAO,IAAIjS,EAAM,EAAG,oCAMpB,OAAOV,KAAKgI,MAAQvH,sCAKpB,OAAOA,GAAoB,EAAbT,KAAKgI,+CAInB,OAAO,qCAGEmH,GAET,OADAnP,KAAKwP,UAAUL,GACR,oCAIP,MAAO,UArCuBvE,ICDJgI,oDAEpBC,gEASN,OAJK7S,KAAK6S,SACR7S,KAAK6S,OAAS7S,KAAK8S,gBAGd9S,KAAK6S,gBCOVE,GAAc,SAAdA,EAAeC,EAAkBC,GACrC,IAAMC,EAAW1S,KAAK2S,MAAMH,EAAW,GACjCI,EAAUF,EAAW,EAC3B,OAAa,IAATD,EACKD,EAEI,IAATC,EACKD,EAAsB,EAAXE,EAEP,IAATD,EACKD,EAAsB,GAAXE,EAEP,IAATD,EAEAF,EAAYC,EAAUC,EAAO,IAAMG,EAAU,EAAIF,EAAW,EAAIA,GAGvD,IAATD,EAEAF,EAAYC,EAAUC,EAAO,IAAMG,EAAU,EAAIF,EAAW,EAAIF,GAIlED,EAAYC,EAAU,IACrBC,EAAO,IAAMG,EAAU,EAAIF,EAAW,EAAIF,IA0EzCK,GAAW,SAAXA,EAAYrL,EAAegL,EAAkBM,GACjD,IAAMC,EAAgBD,EAAM9L,OAAS,EAG/BgM,EACJhT,KAAKoM,IAAI5E,EAAO+K,GAAYC,EAAUO,EAAgB,IACtDR,GAAYC,EAAUO,GAExB,GAAIC,GAAiB,EAAG,OAAOF,EAE/B,IAAMG,EA5EkB,SACxBT,EACAM,GAEA,GAAIA,EAAM9L,OAAS,GACjB,MAAM,IAAI+D,MAAM,oBAElB,IAAM6H,EAAuB,IAAbJ,EAEhB,GAAqB,IAAjBM,EAAM9L,OAAc,CACtB,IAAMkM,EAAOJ,EAAM,GAAG,GAEtB,OAAO/Q,IAAS,EAAGyQ,EAAU,GAAG5P,IAAI,SAAA+L,GAAI,MAAK,CAC3CkB,KAAM,CAAEM,EAAG+C,EAAM7R,EAAGsN,GACpBmB,MAAO,CAAEK,EAAG+C,EAAM7R,GAAIsN,EAAO6D,EAAW,GAAKA,MAGjD,IACGI,GACgB,IAAjBE,EAAM9L,QACW,IAAjB8L,EAAM9L,QACN8L,EAAM9L,QAAU,EAOhB,OAAO8L,EAAMA,EAAM9L,OAAS,GAAGpE,IAAI,SAAAuQ,GACjC,IAAMC,EAA4B,IAApBD,EAAU3L,MACxB,MAAO,CACLqI,KAAM,CAAEM,EAAGgD,EAAW9R,EAAG,GAAK+R,EAAQ,EAAI,IAC1CtD,MAAO,CAAEK,EAAGgD,EAAW9R,EAAG,GAAK+R,EAAQ,EAAI,OAIjD,GAAIR,GAA4B,IAAjBE,EAAM9L,OAAc,CAEjC,IAAMqM,EAAYP,EAAM,GAClBQ,EAAaD,EAAUrM,OAC7B,OAAOjF,IAASuR,GAAY1Q,IAAI,SAAA2Q,GAAS,MAAK,CAC5C1D,KAAM,CAAEM,EAAGkD,GAAWE,EAAY,GAAKD,GAAajS,EAAG,GACvDyO,MAAO,CAAEK,EAAGkD,EAAUE,GAAYlS,EAAG,MAGzC,GAAIuR,GAA4B,IAAjBE,EAAM9L,OAAc,CAEjC,IAAMwM,EAAaV,EAAM,GACnBW,EAAmBX,EAAM,GAC/B,OAAOU,EACJrF,QAAQ,SAACuF,EAAW5M,GAAZ,MAAoB,CAAC4M,EAAWD,EAAiB3M,MACzDlE,IAAI,SAAAuQ,GACH,MAAO,CACLtD,KAAM,CAAEM,EAAGgD,EAAW9R,EAAuB,IAApB8R,EAAU3L,MAAc,EAAI,GACrDsI,MAAO,CAAEK,EAAGgD,EAAW9R,EAAuB,IAApB8R,EAAU3L,MAAc,EAAI,MAI9D,MAAM,IAAIuD,MAAM,OAkBM4I,CAAkBnB,EAAUM,GAG5Cc,EAAaX,EAAcjM,OAE3B6M,EAAgB7T,KAAKsB,MAAM0R,EAAgBY,GAC3CE,EAAsBd,EAAgBY,EAEtCG,EAAiBd,EAAc9E,QACnC,SAAA3M,EAAkBwS,GAAmB,IAAlCnE,EAAkCrO,EAAlCqO,KAAMC,EAA4BtO,EAA5BsO,MAEDmE,EACJJ,GAAiBG,EAAWF,EAAsB,EAAI,GAElDI,EADQrE,EAAKM,IAAML,EAAMK,EACG,EAAI,EAEhCgE,EACJ5B,GAAYC,EAAUO,GACtBc,EAAgBG,EAChBhU,KAAKoM,IAAI0H,EAAqBE,GAEhC,GAAIC,IAAgBC,EAElB,MAAO,CAAC,IAAItE,GAAMsE,EAAmBC,EAAYtE,EAAMC,IAGvD,IAAMsE,EAAgBpU,KAAKsB,MAAM2S,EAAc,GACzCI,EAAiBD,EAAiBH,EAAc,EAChDK,EAAW,GAgBjB,OAfIF,EAAgB,GAClBE,EAASzM,KACP,IAAI0J,GACF6C,EACAD,EAAaE,EACbxE,EACA,SAIFwE,EAAiB,GACnBC,EAASzM,KACP,IAAI0J,GAAQ8C,EAAgBF,EAAYrE,EAAO,UAG5CwE,IAKb,OAAOzB,EAASrL,EAAOgL,EAAR,GAAAhS,OAAAH,OAAAmP,EAAA,EAAAnP,CAAsByS,GAAtB,CAA6BiB,MAGxCQ,eAGJ,SAAAA,EAAYC,GAAyB,IAAArF,EAAA,OAAA9O,OAAAC,EAAA,EAAAD,CAAAb,KAAA+U,IACnCpF,EAAA9O,OAAA0P,EAAA,EAAA1P,CAAAb,KAAAa,OAAA2P,EAAA,EAAA3P,CAAAkU,GAAApP,KAAA3F,QAFFgV,gBACqC,EAEnCrF,EAAKqF,WAAaA,EAFiBrF,8EAMnC,IAAMP,EAAoBpP,KAAKoP,oBAC/B,OAAOpP,KAAKgV,WACTrG,QAAQ,SAAAgC,GAAC,OAAIA,EAAEsE,aACf7R,IAAI,SAACvB,EAAGyF,GAAJ,OAAAzG,OAAAqU,GAAA,EAAArU,CAAA,GAAkBgB,EAAlB,CAAqBuN,kBAAmBA,EAAkB9H,mDAkBjE,IAAM6N,EAAmB,IAAIjO,IAC3BlH,KAAKgV,WAAW5R,IAAI,SAAAuQ,GAAS,MAAI,CAACA,EAAW,OAG/C3T,KAAKgV,WACFrG,QAAQ,SAAAyG,GAAK,OAAIA,EAAMnF,UAAU7M,IAAI,SAAA8M,GAAM,MAAK,CAAEA,SAAQkF,aAC1DC,QAAQ,SAAArS,GAAA,IAAGkN,EAAHlN,EAAGkN,OAAQkF,EAAXpS,EAAWoS,MAAX,OACPD,EAAiB/M,IAAI8H,GAAS7H,KAAK+M,KAGvC,IAAME,EAAqB,IAAIpO,IAe/B,OAAOlH,KAAKgV,WAAWrG,QAAQ,SAAAgC,GAC7B,OAAOpO,IACEoO,EAAE3I,OACR5E,IAAI,SAAAvB,GAAC,OAhBM,SAAV6N,EAAWiE,GACf,IAAK2B,EAAmBjH,IAAIsF,GAAY,CACtC,IAAM4B,EAAWJ,EAAiB/M,IAAIuL,GAChC6B,EAAahV,KAAKmH,IAALoI,MAAAvP,KAAIK,OAAAmP,EAAA,EAAAnP,CAClB0U,EAASnS,IAAI,SAAAgS,GAAK,OAAI1F,EAAQ0F,GAAUA,EAAMjF,mBAD5BnP,OAAA,CAErB,KAGFsU,EAAmBhN,IAAIqL,EAAW6B,GAEpC,OAAOF,EAAmBlN,IAAIuL,GAMlBjE,CAAQiB,GAAKA,EAAER,gBAAkBQ,EAAEzN,WAAWrB,uCA1C5D,OAAO7B,KAAKgV,WACTS,KAAK,SAAA9E,GAAC,OAAIA,aAAa+B,KACvBuC,WACA7R,IAAI,SAACvB,EAAGyF,GAAJ,OAAYA,mCAInB,IAAMoO,EAAW1V,KAAKgI,MAAM5E,IAC1B,SAAAc,GAAA,IAAG/B,EAAH+B,EAAG/B,SAAUgC,EAAbD,EAAaC,OAAb,OAA0BhC,EAAST,KAAKyC,GAAQxD,SAElD,OAAOH,KAAKmH,IAALoI,MAAAvP,KAAIK,OAAAmP,EAAA,EAAAnP,CAAQ6U,WA1BK9C,IC5KrB,IA6CQ+C,eACb,CA9CgC,SAACC,GAAD,OAChCA,EAAMC,iBACuB,SAACD,GAAD,OAC7BA,EAAME,eAQY,SAClBD,EACAC,GACgB,IAAAC,EACKD,EAClBrS,OAAO,SAAAzB,GAAA,OAAAA,EAAGgU,OAAoB9V,EAAU+V,OACxC7S,IAAI,SAAAJ,GAAA,IAAGkT,EAAHlT,EAAGkT,SAAUlO,EAAbhF,EAAagF,MAAb,MAA0B,CAE7BmO,SAAUD,IAAajW,EAASmW,KAAOpO,EAAQ,EAC/CqO,SAAUrO,KAEXC,OACC,SAAA/D,EAAAK,GAAA,IAAGqI,EAAH1I,EAAG0I,IAAKjF,EAARzD,EAAQyD,IAAR,MAA2C,CAEzCiF,IAAKA,EAFPrI,EAAiB4R,SAGfxO,IAAKA,EAHPpD,EAA2B8R,WAK3B,CAAEzJ,IAAK,EAAGjF,IAAK,IAbXiF,EADQmJ,EACRnJ,IAAKjF,EADGoO,EACHpO,IAgBP2O,EAAW9V,KAAKmH,IAAIiF,EAAKiJ,EAAgB7C,UAE/C,MAAO,CACLpG,IAAK0J,EACL3O,MACAK,MAAOxH,KAAKmH,IAAInH,KAAKoM,IAAIiJ,EAAgB7N,MAAOL,GAAM2O,MCD7CC,GAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAA7M,EAAA/I,OAAAC,EAAA,EAAAD,CAAAb,KAAAuW,GAAA,QAAAG,EAAA1L,UAAAxD,OAAAb,EAAA,IAAAmB,MAAA4O,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAhQ,EAAAgQ,GAAA3L,UAAA2L,GAAA,OAAA/M,EAAA/I,OAAA0P,EAAA,EAAA1P,CAAAb,MAAAyW,EAAA5V,OAAA2P,EAAA,EAAA3P,CAAA0V,IAAA5Q,KAAAoK,MAAA0G,EAAA,CAAAzW,MAAAgB,OAAA2F,MAMUiQ,SAAW,EANrBhN,EAAA,OAAA/I,OAAAgW,EAAA,EAAAhW,CAAA0V,EAAAC,GAAA3V,OAAAiW,EAAA,EAAAjW,CAAA0V,EAAA,EAAAnI,IAAA,eAAA2I,MAAA,WAOwC,IAAA1M,EAAArK,KAE9BgX,EAAWzU,IACR,GACNa,IAAI,SAAAoB,GAAC,MAAK,CAAEnB,GAAI,EAAGmB,EAAGgC,IAAUhC,EAAG6K,IAAK7K,EAAI6F,EAAKuM,SAAW,KACzDK,EAAS1U,IACN,GACNa,IAAI,SAAAoB,GAAC,MAAK,CAAEnB,GAAI,EAAGmB,EAAGgC,EAAQhC,EAAG6K,IAAK7K,EAAI6F,EAAKuM,SAAW,KACvDM,EAAU3U,IACP,GACNa,IAAI,SAAAoB,GAAC,MAAK,CAAEnB,EAAG,EAAGmB,EAAGgC,IAAUhC,EAAG6K,IAAK7K,EAAI6F,EAAKuM,UAAY,KACzDO,EAAS5U,IACN,GACNoM,QAAQ,SAAAnK,GAAC,MAAI,CACZ,CAAEnB,GAAI,GAAKmB,GAAI,GAAMA,EAAG6K,IAAK,EAAI7K,EAAI6F,EAAKuM,SAAW,GACrD,CAAEvT,EAAG,GAAKmB,GAAI,GAAMA,EAAG6K,IAAK,EAAI7K,EAAI6F,EAAKuM,SAAW,MAExD,SAAA5V,OAAAH,OAAAmP,EAAA,EAAAnP,CAAWmW,GAAXnW,OAAAmP,EAAA,EAAAnP,CAAwBoW,GAAxBpW,OAAAmP,EAAA,EAAAnP,CAAmCqW,GAAnCrW,OAAAmP,EAAA,EAAAnP,CAA+CsW,QAxBnDZ,EAAA,aAhCE,SAAAa,EAAYjV,EAAyB8M,GAAqB,IAAAU,EAAA,OAAA9O,OAAAC,EAAA,EAAAD,CAAAb,KAAAoX,IACxDzH,EAAA9O,OAAA0P,EAAA,EAAA1P,CAAAb,KAAAa,OAAA2P,EAAA,EAAA3P,CAAAuW,GAAAzR,KAAA3F,QAJFmC,cAG0D,EAAAwN,EAF1DV,iBAE0D,EAExDU,EAAKxN,SAAWA,EAChBwN,EAAKV,YAAcA,EAHqCU,qEAOxD,OAAQ3P,KAAKmC,UACX,KAAKtC,EAAcgE,KACjB,OAAQ,EAAIpD,EAAO,GACrB,KAAKZ,EAAciE,GACjB,OAAQ,EAAIrD,EAAO,GACrB,KAAKZ,EAAckE,GACjB,OAAQ,GAAKtD,EAAO,WAlBSmS,KCG/ByE,GAAmB,SAACC,GAAD,OACvBA,EAAarP,OAAO,SAACpG,EAADG,GAAA,OAAwBH,EAAxBG,EAAMiN,aAAmC,IAsFzDqI,GAAe,SACnBtP,EACAgL,EACA8C,GAEA,IAAMwB,EAAexB,EAClBrS,OACC,SAAA8T,GAAA,IAAGvB,EAAHuB,EAAGvB,KAAME,EAATqB,EAASrB,SAAT,OACEF,IAAS9V,EAAU+V,MAAQC,IAAajW,EAASmW,OAEpDhT,IAAI,SAAAoU,GAAA,MAA0B,CAAErV,SAA5BqV,EAAGrV,SAAmC8M,YAAtCuI,EAAaxP,SAOpB,OA7FyB,SAArByP,EACJC,EACAC,EACA3E,EACAsE,GAEA,GAA8B,IAA1BI,EAAelQ,OACjB,OAAO8P,EAGT,IAAMM,EAAgBD,EAAiBD,EAAelQ,OAGhDqQ,EAAOH,EAAejC,KAC1B,SAAAzS,GAAA,OAAAA,EAAGb,WAA4BtC,EAAcgE,OAE/C,GAAIgU,GAAQ7E,EAAW4E,EACrB,OAAOH,EACLC,EAAejU,OAAO,SAAAS,GAAA,OAAAA,EAAG/B,WAA4BtC,EAAcgE,OACnE8T,EAAiB3E,EACjBA,EAHuB,CAItB,CAAE7Q,SAAUtC,EAAcgE,KAAMoL,YAAa+D,IAJvBhS,OAAAH,OAAAmP,EAAA,EAAAnP,CAIsCyW,KAKjE,IAAMQ,EAAeJ,EAClBjU,OAAO,SAAAc,GAAA,OAAAA,EAAGyD,MAAoB4P,IAC9BxU,IAAI,SAAAqB,GAAA,MAA0B,CAAEtC,SAA5BsC,EAAGtC,SAAmC8M,YAAtCxK,EAAauD,SAEpB,GAAI8P,EAAatQ,OAAQ,CACvB,IAAMuQ,EAAoBD,EAAa1U,IAAI,SAAA8F,GAAA,OAAAA,EAAG/G,WAC9C,OAAOsV,EACLC,EAAejU,OACb,SAAAuU,GAAA,IAAG7V,EAAH6V,EAAG7V,SAAH,OAAmB4V,EAAkBnU,SAASzB,KAEhDwV,EAAiBN,GAAiBS,GAClC9E,EALuB,GAAAhS,OAAAH,OAAAmP,EAAA,EAAAnP,CAMnByW,GANmBzW,OAAAmP,EAAA,EAAAnP,CAMFiX,KAKzB,IAAMG,EAAmBzX,KAAKsB,MAAM8V,GAC9BM,EAASP,EAAiBM,EAGhC,GAAIC,EAAS,GAAKL,EAAM,CACtB,IAAMM,EAAa,CACjBhW,SAAUtC,EAAcgE,KACxBoL,YAAagJ,GAEf,OAAOR,EACLC,EAAejU,OAAO,SAAA2U,GAAA,OAAAA,EAAGjW,WAA4BtC,EAAcgE,OACnE8T,EAAiBM,EACjBjF,EAHuB,CAItBmF,GAJsBnX,OAAAH,OAAAmP,EAAA,EAAAnP,CAIPyW,KAKpB,IAAMe,EAAkBX,EAAetU,IAAI,SAAAkV,EAAe3U,GAAf,MAAsB,CAC/DxB,SADyCmW,EAAGnW,SAE5C8M,YAAagJ,GAAoBC,EAASvU,EAAI,EAAI,MAIpD,SAAA3C,OAAAH,OAAAmP,EAAA,EAAAnP,CAAWyW,GAAXzW,OAAAmP,EAAA,EAAAnP,CAA4BwX,IA0BrBZ,CALgB3B,EAAarS,OAClC,SAAA8U,GAAA,IAAGvC,EAAHuC,EAAGvC,KAAME,EAATqC,EAASrC,SAAT,OACEF,IAAS9V,EAAU+V,MAAQC,IAAajW,EAASmW,OAKnDpO,EAAQqP,GAAiBC,GACzBtE,EACAsE,IC5GEkB,GAAW,SAAC5C,GAAD,OAAqB6C,GAAe7C,GAAO5N,OACtD0Q,GAAc,SAAC9C,GAAD,OAA6BA,EAAMC,gBAAgB7C,UAK1D2F,GAAehD,YAC1B,CAAC6C,GAAUE,IJkPE,SACb1Q,EACAgL,GAEA,OAAO,IAAI+B,GACT1B,GAASrL,EAAOgL,EAAU,CAAC,CAAC,IAAIN,GAAKM,MAAa4F,UIpPzCC,GAAYlD,YACvB,CAAC6C,GAAUE,GATmB,SAAC9C,GAC/B,OAAOA,EAAME,aAAarS,OAAO,SAAAzB,GAAA,OAAAA,EAAGgU,OAAoB9V,EAAU+V,SD6GrD,SACbjO,EACAgL,EACA8C,GAEA,IAAMgD,EAAW,IAAI5R,IACnBoQ,GAAatP,EAAOgL,EAAU8C,GAAc1S,IAC1C,SAAA2V,GAAA,MAA+B,CAA/BA,EAAG5W,SAAH4W,EAAa9J,gBAIjB,OAAO6G,EAAa1S,IAAI,SAAA4V,GAAA,IAAG7W,EAAH6W,EAAG7W,SAAU6T,EAAbgD,EAAahD,KAAb,OD7DE,SAC1B7T,EACA8M,EACA+G,GAEA,OAAQA,GACN,KAAK9V,EAAU+Y,MACb,OAAO,IAAI1C,GAAMpU,EAAU8M,GAC7B,KAAK/O,EAAUgZ,OACb,MAAM,IAAI3N,MAAM,0BAClB,KAAKrL,EAAU+V,KACb,MAAM,IAAI1K,MAAM,sBCmDlB4N,CAAahX,EAAU2W,EAAS1Q,IAAIjG,GAAY6T,OC9GvCoD,GAAczD,YACzB,CAACgD,GAAcE,IVrBF,SAAC7R,EAAsBH,GACpC,IAAMmB,EDkBO,SACbhB,EACAH,EACAwS,GAEA,OAAOxS,EAAO8H,QAAQ,SAAC3K,EAAOgF,GAC5B,IAAMgG,EAAmBqK,EACtB5V,OAAO,SAAAO,GAAK,OAAIA,EAAMgF,UAAYA,IAClC5F,IAAI,SAAAc,GAAA,OAAAA,EAAGI,kBAIV,OAF6ByK,GAAU/K,EAAOgD,EAAWgI,GAE7B5L,IAAI,SAAAmB,GAAA,IAAGD,EAAHC,EAAGD,gBAAiB4K,EAApB3K,EAAoB2K,YAApB,MAAuC,CACrE5K,kBACApC,cAAe8E,EAAUgB,MAAM1D,GAC/B0E,UACAhF,QACAkL,cACAvK,UAAWX,EAAMgE,MAAMkH,QCpCboK,CAAQtS,EAAWH,EWOpB,SACbG,EACAH,GACmB,IAAA0S,EACnB,GAAI1S,EAAO,GAAG1E,WAAatC,EAAcgE,KACvC,MAAM,IAAI0H,MAAM,8BAIlB,IAAMiO,EAAU3S,EAAOzD,IAAI,iBAAM,MAKjCmW,EAAAC,EAAQ,IAAGnR,KAAX0H,MAAAwJ,EAAA1Y,OAAAmP,EAAA,EAAAnP,CAAmBmG,EAAUyS,UAQ7B,IAkCMC,EAAY5R,MAAMC,KAAKf,EAAUgB,MAAM2R,QAAQlW,OACnD,SAAAa,GAAe,OAAKkV,EAAQZ,OAAOhV,SAASU,KAIxCsV,EAAa/S,EAAO8H,QAAQ,SAAC3K,EAAOgF,GACxC,IAAM6Q,EAAiB7V,EAAMiL,YAAcuK,EAAQxQ,GAASxB,OAC5D,OAAQM,MAAM+R,GAA6BvU,KAAK0D,KA4BlD,OAJoBmC,EAAWuO,EAAWE,EAjEvB,SAACE,EAAgB9Q,GAClC,IAAMmG,EAAOnI,EAAUgB,MAAM8R,GACvB9V,EAAQ6C,EAAOmC,GACfyG,EAAeN,EAAKhN,SAAST,KAAKyN,EAAKhL,QACvC4V,EAAOrZ,EAAMK,OAAO0O,EAAa7O,MAAQoD,EAAMpD,OAK/CoZ,EAAiBtZ,EAAMK,OAAOoO,EAAKhL,OAAOvD,MAAQL,EAAK,GACvD0Z,EACJpP,EAASmP,EAAgB,IAAMnP,EAASmP,EAAgBzZ,GACpDV,EAAcgE,KACdmW,EAAiBzZ,EACjBV,EAAckE,GACdlE,EAAciE,GAEdoW,EACJD,IAAsBpa,EAAcgE,MACpCG,EAAM7B,WAAatC,EAAcgE,MACjCoW,IAAsBjW,EAAM7B,SACxB,EACA5B,EAEN,OAAOC,KAAKoM,IAAImN,EAAM,EAAIxZ,EAAKwZ,GAAQG,IA2C7B7E,QAAQ,SAAArT,GAAA,IAAAgB,EAAAnC,OAAA0H,EAAA,EAAA1H,CAAAmB,EAAA,GAAE8X,EAAF9W,EAAA,GAAUgG,EAAVhG,EAAA,UAAuBwW,EAAQxQ,GAASX,KAAKyR,KAE1DN,EAAQ7K,QAAQ,SAACwL,EAASnR,GAAV,OACrBmR,EAAQ/W,IAAI,SAAA0W,GAAM,MAAK,CAAExV,gBAAiBwV,EAAQ9Q,eXnGXoR,CAASpT,EAAWH,IAQ7D,OAPAgI,QAAQC,IAAI,CACV9G,MAAOA,EAAM5E,IAAI,SAAApB,GAAA,MAAgD,CAC/DsC,gBADetC,EAAGsC,gBAElB0E,QAFehH,EAAoBgH,QAGnCkG,YAHelN,EAA6BkN,iBAMzClH,IYEMqS,eATS,SAACzE,GAAD,MAAsB,CAC5C5O,UAAW2R,GAAa/C,GACxB/O,OAAQgS,GAAUjD,GAClB5N,MAAOoR,GAAYxD,GACnB7O,WAAY6O,EAAM7O,WAClBzB,KAAMzC,EAAe+S,EAAM7O,WAAWuT,SACtC/U,MAAOnB,EAAgBwR,EAAM7O,WAAWwT,YAG3BF,CAAyBjR,iCCkEzBiR,eAZS,SAACzE,GAAD,MAAsB,CAC5C4E,aAAc/B,GAAe7C,GAC7B5C,SAAU4C,EAAMC,gBAAgB7C,WAGP,SACzByH,GADyB,MAErB,CACJC,oBAAqB,SAAC1S,GAAD,OAAmByS,EClDZ,SAACzS,GAAD,MAAgD,CAC5EgO,KzBqDiC,sByBpDjChO,SDgDiD2S,CAAe3S,KAChE4S,cAAe,SAACnM,GAAD,OAAkBgM,ECxDwC,CACzEzE,KzBoE2B,gByBnE3BhD,SDsDmDvE,OAGtC4L,CAlED,SAACjQ,GAAiB,IAAAyQ,EAM1BzQ,EAJFoQ,aAAgB5N,EAFYiO,EAEZjO,IAAKjF,EAFOkT,EAEPlT,IAAKK,EAFE6S,EAEF7S,MAC1BgL,EAGE5I,EAHF4I,SACA0H,EAEEtQ,EAFFsQ,oBACAE,EACExQ,EADFwQ,cAGIE,EACJxQ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACuQ,GAAA,EAAD,CAAMC,KAAK,UADb,IACwB1Q,EAAAC,EAAAC,cAAA,wBADxB,IACiDxC,GAInD,OACEsC,EAAAC,EAAAC,cAACyQ,GAAA,EAAD,CAAUH,QAASA,EAASI,UAAQ,EAACC,UAAU,aAC7C7Q,EAAAC,EAAAC,cAACyQ,GAAA,EAASG,KAAV,KACE9Q,EAAAC,EAAAC,cAACyQ,GAAA,EAASI,KAAV,KACE/Q,EAAAC,EAAAC,cAAA,YAAOoC,EAAP,KACAtC,EAAAC,EAAAC,cAAA,SACEwL,KAAK,QACLe,MAAO/O,EACP4E,IAAKA,EACLjF,IAAKA,EACL2T,SAAU,SAAAC,GAAC,OAAIb,EAAoBhR,SAAS6R,EAAEC,OAAOzE,WAEvDzM,EAAAC,EAAAC,cAAA,gBAAQ7C,IAEV2C,EAAAC,EAAAC,cAACyQ,GAAA,EAASI,KAAV,KACE/Q,EAAAC,EAAAC,cAACyQ,GAAA,EAAD,CACEH,QACExQ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,2BADF,KAC+BwI,IAIjC1I,EAAAC,EAAAC,cAACyQ,GAAA,EAASG,KAAV,KACG,CAAC,EAAG,EAAG,EAAG,IAAIhY,IAAI,SAAAiI,GAAE,OACnBf,EAAAC,EAAAC,cAACyQ,GAAA,EAASI,KAAV,CACEjN,IAAK/C,EACLoQ,QAAS,kBAAMb,EAAcvP,IAC7BqQ,OAAQ1I,IAAa3H,GAEpBA,qBE/BbsQ,GAAY,SAACvR,GAA0B,IAAAwR,EACnCC,EAAyBzR,EAAzByR,YAAaC,EAAY1R,EAAZ0R,QACb3Z,EAA2C0Z,EAA3C1Z,SAAUoD,EAAiCsW,EAAjCtW,MAAO2Q,EAA0B2F,EAA1B3F,SAAUF,EAAgB6F,EAAhB7F,KAAMhO,EAAU6T,EAAV7T,MACjC+T,EAAwDD,EAAxDC,mBAAoBC,EAAoCF,EAApCE,eAAgBC,EAAoBH,EAApBG,gBACtCnB,EACJxQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cAASjF,GADX,KAC6ByQ,EAC1BA,IAAS9V,EAAU+V,KAAnB,KAAAjV,OACQgH,EADR,YAAAhH,OAEKkV,IAAajW,EAASmW,KAAO,SAAW,kBAE1C,MAIF8F,EACJ/Z,IAAatC,EAAcgE,KACvB,CAAC3D,EAAU+Y,MAAO/Y,EAAUgZ,QAC5B,CAAChZ,EAAU+Y,MAAO/Y,EAAUgZ,OAAQhZ,EAAU+V,MAE5CG,EAAgBnW,EAAhBmW,KAAM+F,EAAUlc,EAAVkc,MACRC,GAAoBR,EAAA,GAAA/a,OAAAwb,GAAA,EAAAxb,CAAA+a,EACvBxF,EAAO,cADgBvV,OAAAwb,GAAA,EAAAxb,CAAA+a,EAEvBO,EAAQ,gBAFeP,GAIpBU,EAAY,CAACH,EAAO/F,GAE1B,OACE9L,EAAAC,EAAAC,cAACyQ,GAAA,EAASI,KAAV,KACE/Q,EAAAC,EAAAC,cAACyQ,GAAA,EAAD,CAAUH,QAASA,EAASyB,OAAK,GAC/BjS,EAAAC,EAAAC,cAACyQ,GAAA,EAASG,KAAV,KACE9Q,EAAAC,EAAAC,cAACyQ,GAAA,EAASuB,OAAV,aACCN,EAAM9Y,IAAI,SAAA+C,GAAC,OACVmE,EAAAC,EAAAC,cAACyQ,GAAA,EAASI,KAAV,CACEjN,IAAKjI,EACLsV,QAAS,kBAAMO,EAAe7Z,EAAUgE,IACxCuV,OAAQ1F,IAAS7P,GAEhBA,KAGLmE,EAAAC,EAAAC,cAACyQ,GAAA,EAASwB,QAAV,MACAnS,EAAAC,EAAAC,cAACyQ,GAAA,EAASuB,OAAV,iBACCF,EAAUlZ,IAAI,SAAAvB,GAAC,OACdyI,EAAAC,EAAAC,cAACyQ,GAAA,EAASI,KAAV,CACEjN,IAAKvM,EACL4Z,QAAS,kBAAMM,EAAmB5Z,EAAUN,IAC5C6Z,OAAQxF,IAAarU,GAEpBua,EAAqBva,MAG1ByI,EAAAC,EAAAC,cAACyQ,GAAA,EAASwB,QAAV,MACAnS,EAAAC,EAAAC,cAACyQ,GAAA,EAASuB,OAAV,eAAyBxU,GACzBsC,EAAAC,EAAAC,cAACyQ,GAAA,EAASI,KAAV,KACE/Q,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SACEwL,KAAK,QACLe,MAAO/O,EACP4E,IAAK,EACLjF,IAAK,GACL2T,SAAU,SAAAC,GAAC,OACTU,EAAgB9Z,EAAUuH,SAAS6R,EAAEC,OAAOzE,WAGhDzM,EAAAC,EAAAC,cAAA,gBAAQ,SAsDL6P,eAfS,SAACzE,GAAD,MAAsB,CAC5CE,aAAcF,EAAME,eAGK,SAAC2E,GAAD,MAAkD,CAC3EqB,QAAS,CACPE,eAAgB,SAAChY,EAAsBgS,GAAvB,OACdyE,ED1FsB,SAC1BtY,EACA6T,GAF0B,MAGG,CAC7BA,KzBW4B,iByBV5B7T,WACAua,UAAW1G,GCoFE2G,CAAa3Y,EAAOgS,KAC/BiG,gBAAiB,SAACjY,EAAsBgE,GAAvB,OACfyS,EDnFuB,SAC3BtY,EACA6F,GAF2B,MAGE,CAC7BgO,KzBS6B,kByBR7B7T,WACA6F,SC6Ea4U,CAAc5Y,EAAOgE,KAChC+T,mBAAoB,SAAC/X,EAAsBkS,GAAvB,OAClBuE,EDvG0B,SAC9BtY,EACA+T,GAF8B,MAGD,CAC7BF,KzBagC,qByBZhC7T,WACA+T,YCiGa2G,CAAiB7Y,EAAOkS,QAIxBmE,CA1CA,SAACjQ,GAAuB,IAC7B0L,EAA0B1L,EAA1B0L,aAAcgG,EAAY1R,EAAZ0R,QAEhBgB,EAAYhH,EAAarS,OAAO,SAAAzB,GAAA,OAAAA,EAAGgU,OAAoB9V,EAAU+V,OACpEzO,OAEGsT,EACJxQ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACuQ,GAAA,EAAD,CAAMC,KAAK,UADb,IACwB1Q,EAAAC,EAAAC,cAAA,yBADxB,IACkDsS,GAIpD,OACExS,EAAAC,EAAAC,cAACyQ,GAAA,EAAD,CAAUH,QAASA,EAASiC,MAAI,GAC9BzS,EAAAC,EAAAC,cAACyQ,GAAA,EAASG,KAAV,KACGtF,EAAa1S,IAAI,SAAAyY,GAAW,OAC3BvR,EAAAC,EAAAC,cAACwS,GAAD,CACE5O,IAAKyN,EAAY1Z,SACjB0Z,YAAaA,EACbC,QAASA,UC3BNzB,eAVS,SAACzE,GAAD,MAAsB,CAC5C7O,WAAY6O,EAAM7O,aAGO,SAAC0T,GAAD,MAAgD,CACzEwC,aAAc,SAAC3C,GAAD,OAA0BG,EFzBhB,SAACH,GAAD,MAAkD,CAC1EtE,KzBkC0B,eyBjC1BsE,WEuBiD4C,CAAW5C,KAC5D6C,cAAe,SAAC5C,GAAD,OAA4BE,EFrBlB,SAACF,GAAD,MAAoD,CAC7EvE,KzBkC2B,gByBjC3BuE,YEmBoD6C,CAAY7C,KAChE8C,UAAW,SAACvW,GAAD,OAAsB2T,EFjBZ,SAAC3T,GAAD,MAA8C,CACnEkP,KzBmCsB,WyBlCtBlP,QEe0CwW,CAAQxW,OAGrCuT,CA7EF,SAACjQ,GAAiB,IACrBrD,EAAuDqD,EAAvDrD,WAAYkW,EAA2C7S,EAA3C6S,aAAcE,EAA6B/S,EAA7B+S,cAAeE,EAAcjT,EAAdiT,UAE3CvC,EACJxQ,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACuQ,GAAA,EAAD,CAAMC,KAAK,QADb,IACsB1Q,EAAAC,EAAAC,cAAA,uBAIlB+S,EAAW,CACf,CAAEC,IAAKrd,EAAY2C,QAAS2a,KAAM,WAClC,CAAED,IAAKrd,EAAYoD,MAAOka,KAAM,SAChC,CAAED,IAAKrd,EAAY4C,YAAa0a,KAAM,eACtC,CAAED,IAAKrd,EAAY8D,OAAQwZ,KAAM,WACjCra,IAAI,SAAApB,GAAA,IAAGwb,EAAHxb,EAAGwb,IAAKC,EAARzb,EAAQyb,KAAR,OACJnT,EAAAC,EAAAC,cAACyQ,GAAA,EAASI,KAAV,CACEjN,IAAKoP,EACL/B,QAAS,kBAAMwB,EAAaO,IAC5B9B,OAAQ3U,EAAWuT,UAAYkD,GAE9BC,KAICC,EAAY,CAChB,CAAEF,IAAKpd,EAAaiE,SAAUoZ,KAAM,eACpC,CAAED,IAAKpd,EAAa2C,YAAa0a,KAAM,gBACvCra,IAAI,SAAAJ,GAAA,IAAGwa,EAAHxa,EAAGwa,IAAKC,EAARza,EAAQya,KAAR,OACJnT,EAAAC,EAAAC,cAACyQ,GAAA,EAASI,KAAV,CACEjN,IAAKoP,EACL/B,QAAS,kBAAM0B,EAAcK,IAC7B9B,OAAQ3U,EAAWwT,WAAaiD,GAE/BC,KAIC3W,EAAO,CACX,CAAE0W,IAAKnd,EAAW4G,UAAWwW,KAAM,aACnC,CAAED,IAAKnd,EAAW8G,OAAQsW,KAAM,UAChC,CAAED,IAAKnd,EAAWqH,KAAM+V,KAAM,uBAC9Bra,IAAI,SAAAc,GAAA,IAAGsZ,EAAHtZ,EAAGsZ,IAAKC,EAARvZ,EAAQuZ,KAAR,OACJnT,EAAAC,EAAAC,cAACyQ,GAAA,EAASI,KAAV,CACEjN,IAAKoP,EACL/B,QAAS,kBAAM4B,EAAUG,IACzB9B,OAAQ3U,EAAWD,OAAS0W,GAE3BC,KAIL,OACEnT,EAAAC,EAAAC,cAACyQ,GAAA,EAAD,CAAUH,QAASA,EAASiC,MAAI,GAC9BzS,EAAAC,EAAAC,cAACyQ,GAAA,EAASG,KAAV,KACE9Q,EAAAC,EAAAC,cAACyQ,GAAA,EAASuB,OAAV,iBACCe,EACDjT,EAAAC,EAAAC,cAACyQ,GAAA,EAASwB,QAAV,MACAnS,EAAAC,EAAAC,cAACyQ,GAAA,EAASuB,OAAV,kBACCkB,EACDpT,EAAAC,EAAAC,cAACyQ,GAAA,EAASwB,QAAV,MACAnS,EAAAC,EAAAC,cAACyQ,GAAA,EAASuB,OAAV,aACC1V,MC1EM6W,GAAA,kBACbrT,EAAAC,EAAAC,cAAC4Q,GAAA,EAAD,CAAM3M,KAAM,OAAQmP,WAAS,GAC3BtT,EAAAC,EAAAC,cAACqT,GAAD,MACAvT,EAAAC,EAAAC,cAACsT,GAAD,MACAxT,EAAAC,EAAAC,cAACuT,GAAD,QCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCQEva,GAAiBhE,EAAjBgE,KAAMC,GAAWjE,EAAXiE,GAAIC,GAAOlE,EAAPkE,GAEZsa,GAAkC,CACtC,CACElc,SAAU0B,GACV0B,MAAO,OACP2Q,SAAUjW,EAASkc,MACnBnG,KAAM9V,EAAU+Y,MAChBjR,MAAO,IAET,CACE7F,SAAU2B,GACVyB,MAAO,aACP2Q,SAAUjW,EAASkc,MACnBnG,KAAM9V,EAAU+V,KAChBjO,MAAO,IAET,CACE7F,SAAU4B,GACVwB,MAAO,cACP2Q,SAAUjW,EAASkc,MACnBnG,KAAM9V,EAAU+Y,MAChBjR,MAAO,KAsEIsW,GARKC,0BAAgB,CAClCzI,aA3DmB,WAGF,IAFjBF,EAEiB5K,UAAAxD,OAAA,QAAAsB,IAAAkC,UAAA,GAAAA,UAAA,GAFTqT,GACRG,EACiBxT,UAAAxD,OAAA,EAAAwD,UAAA,QAAAlC,EACX3G,EAAWqc,EAAOrc,SACxB,OAAOyT,EAAMxS,IAAI,SAAAiE,GACf,GAAIA,EAAElF,WAAaA,EACjB,OAAOkF,EAET,OAAQmX,EAAOxI,MACb,I9BN4B,qB8BO1B,OAAOnV,OAAAqU,GAAA,EAAArU,CAAA,GAAKwG,EAAZ,CAAe6O,SAAUsI,EAAOtI,WAClC,I9BMyB,kB8BLvB,OAAOrV,OAAAqU,GAAA,EAAArU,CAAA,GAAKwG,EAAZ,CAAeW,MAAOwW,EAAOxW,QAC/B,I9BHwB,iB8BItB,OAAOnH,OAAAqU,GAAA,EAAArU,CAAA,GAAKwG,EAAZ,CAAe2O,KAAMwI,EAAO9B,YAC9B,QACE,OAAOrV,MA2CbwO,gBAtCsB,WAGG,IAFzBD,EAEyB5K,UAAAxD,OAAA,QAAAsB,IAAAkC,UAAA,GAAAA,UAAA,GAFjB,CAAEhD,MAAO,GAAIgL,SAAU,EAAGgD,KAAM1V,EAAcme,IACtDD,EACyBxT,UAAAxD,OAAA,EAAAwD,UAAA,QAAAlC,EACzB,OAAQ0V,EAAOxI,MACb,I9BE+B,sB8BD7B,OAAOnV,OAAAqU,GAAA,EAAArU,CAAA,GAAK+U,EAAZ,CAAmB5N,MAAOwW,EAAOxW,QACnC,I9BUyB,gB8BTvB,OAAOnH,OAAAqU,GAAA,EAAArU,CAAA,GAAK+U,EAAZ,CAAmB5C,SAAUwL,EAAOxL,WACtC,I9BG8B,qB8BF5B,OAAOnS,OAAAqU,GAAA,EAAArU,CAAA,GAAK+U,EAAZ,CAAmBI,KAAMwI,EAAOE,gBAClC,QACE,OAAO9I,IA2BX7O,WAvBiB,WAOG,IANpB6O,EAMoB5K,UAAAxD,OAAA,QAAAsB,IAAAkC,UAAA,GAAAA,UAAA,GANZ,CACNsP,QAASna,EAAYoD,MACrBgX,SAAUna,EAAaiE,SACvByC,KAAMzG,EAAWqH,MAEnB8W,EACoBxT,UAAAxD,OAAA,EAAAwD,UAAA,QAAAlC,EACpB,OAAQ0V,EAAOxI,MACb,I9BEwB,e8BDtB,OAAOnV,OAAAqU,GAAA,EAAArU,CAAA,GAAK+U,EAAZ,CAAmB0E,QAASkE,EAAOlE,UACrC,I9BKyB,gB8BJvB,OAAOzZ,OAAAqU,GAAA,EAAArU,CAAA,GAAK+U,EAAZ,CAAmB2E,SAAUiE,EAAOjE,WACtC,I9BSoB,W8BRlB,OAAO1Z,OAAAqU,GAAA,EAAArU,CAAA,GAAK+U,EAAZ,CAAmB9O,KAAM0X,EAAO1X,OAClC,QACE,OAAO8O,MCjGP+I,GAAQC,sBAAYC,GAASC,iCAEnCC,IAASC,OACP1U,EAAAC,EAAAC,cAACyU,EAAA,EAAD,CAAUN,MAAOA,IACfrU,EAAAC,EAAAC,cCPW,kBACbF,EAAAC,EAAAC,cAAC0U,EAAA,EAAD,CAAW3C,OAAK,EAAC5S,MAAO,CAAEwV,UAAW,OAAQlV,OAAQ,UACnDK,EAAAC,EAAAC,cAACmT,GAAD,MACArT,EAAAC,EAAAC,cAAC4U,GAAD,QDIA,OAEFC,SAASC,eAAe,SFkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.188a0533.chunk.js","sourcesContent":["enum PlanePosition {\n    LEAD='lead',\n    LT = 'lt',\n    RT = 'rt'\n}\n\nexport default PlanePosition","import Drawer from \"./interfaces\"\n\nexport default abstract class AbstractDrawer<Args, ReturnArgs>\n  implements Drawer<Args, ReturnArgs> {\n  group!: d3.Selection<SVGGElement, {}, null, undefined>\n\n  withGroup(group: d3.Selection<SVGGElement, {}, null, undefined>): this {\n    this.group = group\n    return this\n  }\n\n  abstract draw(args: Args): ReturnArgs\n}\n","import PlanePosition from \"../formation/PlanePosition\"\n\nexport enum Slotting {\n  SPLIT = \"Split\",\n  FILL = \"Fill\"\n}\n\nexport enum PlaneType {\n  NONE = \"None\",\n  OTTER = \"Otter\",\n  SKYVAN = \"Skyvan\"\n}\n\nexport enum ColorOption {\n  DEFAULT = \"DEFAULT\",\n  PLANE = \"PLANE\",\n  BUILD_ORDER = \"BUILD_ORDER\",\n  RADIAL = \"RADIAL\"\n}\n\nexport enum NumberOption {\n  SLOT_NUM = \"SLOT_NUM\",\n  BUILD_ORDER = \"BUILD_ORDER\"\n}\n\nexport enum ShowOption {\n  FORMATION = \"Formation\",\n  PLANES = \"Planes\",\n  BOTH = \"Formation & planes\"\n}\n\nexport enum FormationType {\n  HD = \"HD\",\n  SD = \"SD\"\n}\n\nexport interface PlaneState {\n  position: PlanePosition\n  label: string\n  slotting: Slotting\n  type: PlaneType\n  slots: number\n}\n\nexport interface FormationConfigState {\n  slots: number\n  baseSize: number\n  type: FormationType\n}\n\nexport interface ViewConfigState {\n  colorBy: ColorOption\n  numberBy: NumberOption\n  show: ShowOption\n}\n\nexport const SET_PLANE_SLOTTING = \"SET_PLANE_SLOTTING\"\ninterface SetPlaneSlottingAction {\n  type: typeof SET_PLANE_SLOTTING\n  position: PlanePosition\n  slotting: Slotting\n}\n\nexport const SET_PLANE_TYPE = \"SET_PLANE_TYPE\"\ninterface SetPlaneTypeAction {\n  type: typeof SET_PLANE_TYPE\n  position: PlanePosition\n  planeType: PlaneType\n}\n\nexport const SET_PLANE_SLOTS = \"SET_PLANE_SLOTS\"\ninterface SetPlaneSlotsAction {\n  type: typeof SET_PLANE_SLOTS\n  position: PlanePosition\n  slots: number\n}\nexport type PlanesConfigActionTypes =\n  | SetPlaneSlottingAction\n  | SetPlaneTypeAction\n  | SetPlaneSlotsAction\n\nexport const SET_FORMATION_SLOTS = \"SET_FORMATION_SLOTS\"\ninterface SetFormationSlotsAction {\n  type: typeof SET_FORMATION_SLOTS\n  slots: number\n}\nexport const SET_FORMATION_TYPE = \"SET_FORMATION_TYPE\"\ninterface SetFormationTypeAction {\n  type: typeof SET_FORMATION_TYPE\n  formationType: FormationType\n}\nexport const SET_BASE_SIZE = \"SET_BASE_SIZE\"\ninterface SetBaseSizeAction {\n  type: typeof SET_BASE_SIZE\n  baseSize: number\n}\nexport type FormationConfigActionTypes =\n  | SetFormationSlotsAction\n  | SetFormationTypeAction\n  | SetBaseSizeAction\n\nexport const SET_COLOR_BY = \"SET_COLOR_BY\"\ninterface SetColorByAction {\n  type: typeof SET_COLOR_BY\n  colorBy: ColorOption\n}\nexport const SET_NUMBER_BY = \"SET_NUMBER_BY\"\ninterface SetNumberByAction {\n  type: typeof SET_NUMBER_BY\n  numberBy: NumberOption\n}\n\nexport const SET_SHOW = \"SET_SHOW\"\ninterface SetShowAction {\n  type: typeof SET_SHOW\n  show: ShowOption\n}\nexport type ViewConfigActionTypes =\n  | SetColorByAction\n  | SetNumberByAction\n  | SetShowAction\n","export const PI = Math.PI\nexport const TAU = 2 * PI\nexport const SCALE_FACTOR = 80\n","import {PI, TAU} from '../constants'\n\n// polar coordinate from origin (center of base)\nexport default class Polar {\n  radius: number;\n  theta: number;\n    constructor(radius: number, theta: number) {\n      this.radius=radius\n      this.theta=Polar.unspin(theta)\n    }\n    \n    toString() {\n      return `(r${this.radius},∠${this.theta/TAU}τ)`\n    }\n    \n    //https://math.stackexchange.com/questions/1365622/adding-two-polar-vectors\n    plus(other: Polar) {\n      const {radius: r1, theta: t1} = this\n      const {radius: r2, theta: t2} = other\n      return new Polar(\n        Math.sqrt(r1*r1 + r2*r2 + 2*r1*r2*Math.cos(t2-t1)),\n        t1 + Math.atan2(r2 * Math.sin(t2-t1), r1 + r2 * Math.cos(t2-t1))\n      )\n    }\n    \n    minus(other: Polar) {\n      return this.plus(other.rotate(PI))\n    }\n    \n    rotate(theta: number) {\n      return new Polar(this.radius, this.theta + theta)\n    }\n    \n    // distance from other point\n    distanceFrom(other: Polar) {\n      return this.minus(other).radius\n    }\n    \n    angleFrom(other: Polar) {\n      return this.minus(other).theta\n    }\n    \n    angleTo(other: Polar) {\n      return other.minus(this).theta\n    }\n    \n    scale(s: number) {\n      return new Polar(this.radius * s, this.theta)\n    }\n    \n    // d3 treats theta = 0 as up, but in high school, theta = 0 is right\n    // also, d3 treats increasing theta as rotating clockwise, hs went counter clock wise\n    // this maps a highschool polar angle to a d3 polar angle\n    get d3theta() {\n      return Polar.unspin(-this.theta + PI/2)\n    }\n    \n    get x() {\n      return this.radius * Math.cos(this.theta)\n    }\n    \n    //svg treats positive y as going down from top of page\n    get y() {\n      return - this.radius * Math.sin(this.theta)\n    }\n    \n    // map theta back to [0, 2PI)\n    static unspin(theta: number) {\n      const t = Math.floor(theta / (2 * PI))\n      return theta - (t * 2 * PI)\n    }\n  }","import { SlotData } from \"../formation/interfaces\"\nimport * as d3 from \"d3\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport { SCALE_FACTOR, TAU } from \"../constants\"\nimport { BaseType } from \"d3\"\n\nexport type SlotDataFun = (d: SlotData) => any\n\ntype StringDict<V> = { [index: string]: V }\n\nexport const arc = ({ formationSlot: { position, dockAngle } }: SlotData) => {\n  const scaledPos = position.scale(SCALE_FACTOR)\n  return d3.arc()({\n    outerRadius: scaledPos.radius,\n    innerRadius: scaledPos.radius,\n    startAngle: scaledPos.d3theta - dockAngle,\n    endAngle: scaledPos.d3theta + dockAngle\n  })\n}\n\nconst stringRange = (stop: number): string[] =>\n  d3.range(stop).map(x => x.toString())\n\nconst buildOrderFill = ({ formationSlot: { buildOrder } }: SlotData) =>\n  d3.scaleOrdinal(d3.schemePaired).domain(stringRange(12))(\n    (buildOrder - 1).toString()\n  )\nconst planeFill = (d: SlotData) =>\n  d3\n    .scaleOrdinal(d3.schemePaired.filter((_, i) => [0, 2, 4].includes(i)))\n    .domain([PlanePosition.LEAD, PlanePosition.LT, PlanePosition.RT])(\n    d.plane.position\n  )\n\nconst radialFill = ({ formationSlot }: SlotData) => {\n  const theta = formationSlot.offset.plus(formationSlot.position).theta / TAU\n  return d3.interpolateRainbow(theta)\n}\n\nexport const FILL_FUNCTIONS: StringDict<SlotDataFun> = {\n  DEFAULT: () => null,\n  BUILD_ORDER: buildOrderFill,\n  PLANE: planeFill,\n  RADIAL: radialFill\n}\n\nexport const LABEL_FUNCTIONS: StringDict<SlotDataFun> = {\n  SLOT_NUM: (d: SlotData) => d.formationSlotId + 1,\n  BUILD_ORDER: (d: SlotData) => d.formationSlot.buildOrder\n}\n\n// const arc = (d: SlotData) => arcFun(d)()\nexport const x = ({ formationSlot: { position } }: SlotData) =>\n  position.scale(SCALE_FACTOR).x\nexport const y = ({ formationSlot: { position } }: SlotData) =>\n  position.scale(SCALE_FACTOR).y\nexport const translate = ({ formationSlot: { offset } }: SlotData) =>\n  `translate(${offset.scale(SCALE_FACTOR).x},${offset.scale(SCALE_FACTOR).y})`\n\nexport const planeX = (d: SlotData) => d.planeSlot.x * FORMATION_SCALE_FACTOR\nexport const planeY = (d: SlotData) => d.planeSlot.y * FORMATION_SCALE_FACTOR\n\nexport const FORMATION_SCALE_FACTOR = 40\n\nexport const highlight = (d: SlotData) => {\n  d3.selectAll(`[formationSlotId=\"${d.formationSlotId}\"].slot circle`)\n    .transition()\n    .ease(d3.easeBack.overshoot(3))\n    .attr(\"r\", 20)\n}\nexport const unhighlight = (d: SlotData) => {\n  d3.selectAll(`[formationSlotId=\"${d.formationSlotId}\"].slot circle`)\n    .transition()\n    .ease(d3.easeBack.overshoot(3))\n    .attr(\"r\", 16)\n}\n\nexport const addSlotGroup = <E extends BaseType>(\n  selection: d3.Selection<E, SlotData, SVGGElement, any>,\n  x: SlotDataFun,\n  y: SlotDataFun,\n  fill: SlotDataFun,\n  label: SlotDataFun\n) => {\n  return selection\n    .append(\"g\")\n    .classed(\"slot\", true)\n    .on(\"mouseover\", highlight)\n    .on(\"mouseout\", unhighlight)\n    .attr(\"formationSlotId\", d => d.formationSlotId)\n    .call(slotG =>\n      slotG\n        .append(\"circle\")\n        .attr(\"cx\", x)\n        .attr(\"cy\", y)\n        .attr(\"r\", 16)\n        .attr(\"fill\", fill)\n    )\n    .call(slotG =>\n      slotG\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"central\")\n        .attr(\"x\", x)\n        .attr(\"y\", y)\n        .text(label)\n    )\n}\n\nexport const addSlot = <E extends BaseType>(\n  g: d3.Selection<E, SlotData, SVGGElement, any>,\n  x?: SlotDataFun,\n  y?: SlotDataFun,\n  fill?: SlotDataFun,\n  label?: SlotDataFun\n) => {\n  return g\n    .append(\"g\")\n    .classed(\"slot\", true)\n    .on(\"mouseover\", highlight)\n    .on(\"mouseout\", unhighlight)\n    .attr(\"formationSlotId\", d => d.formationSlotId)\n    .call(slotG => {\n      slotG\n        .append(\"circle\")\n        .attr(\"r\", 16)\n        .call(circle => {\n          x && circle.attr(\"cx\", x)\n          y && circle.attr(\"cy\", y)\n          fill && circle.attr(\"fill\", fill)\n        })\n      slotG\n        .append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"central\")\n        .call(text => {\n          x && text.attr(\"x\", x)\n          y && text.attr(\"y\", y)\n          label && text.text(label)\n        })\n    })\n}\n\nexport const updateSlot = (\n  g: d3.Transition<SVGGElement, SlotData, SVGGElement, {}>,\n  x: SlotDataFun,\n  y: SlotDataFun,\n  fill: SlotDataFun,\n  label: SlotDataFun\n) => {\n  g.select(\"g.slot circle\")\n    .attr(\"cx\", x)\n    .attr(\"cy\", y)\n    .attr(\"fill\", fill)\n\n  g.select(\"g.slot text\")\n    .attr(\"x\", x)\n    .attr(\"y\", y)\n    .text(label)\n}\n\nexport const transitionOut = (\n  exit: d3.Selection<SVGGElement, any, SVGGElement, any>,\n  t: d3.Transition<BaseType, any, any, any>\n) =>\n  exit\n    .transition(t)\n    .attr(\"transform\", \"scale(0)\")\n    .remove()\n","import { Plane, SlotData, Formation } from \"../formation/interfaces\"\nimport AbstractDrawer from \"./AbstractDrawer\"\nimport * as d3 from \"d3\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport { ViewConfigState, ShowOption } from \"../store/types\"\nimport Polar from \"../geometry/Polar\"\nimport { PI, SCALE_FACTOR, TAU } from \"../constants\"\nimport {\n  planeX,\n  planeY,\n  FORMATION_SCALE_FACTOR,\n  addSlot,\n  updateSlot,\n  transitionOut,\n  SlotDataFun\n} from \"./slotdatafuns\"\nimport { BaseType } from \"d3\"\n\ntype XY = {\n  x: number;\n  y: number;\n}\n\ntype SlottedPlane = {\n  plane: Plane;\n  slotData: SlotData[];\n}\n\nconst w = 1.5\nconst l = 6\nconst otterPoints = [\n  { x: -w, y: -l - 1 },\n  { x: w, y: -l - 1 },\n  { x: w, y: l },\n  { x: -w, y: l },\n  { x: -w, y: -l - 1 }\n]\n\nconst doorPoints = [{ x: -w, y: l - 6 }, { x: -w, y: l - 2 }]\n\nconst line = d3\n  .line<XY>()\n  .x(d => d.x * FORMATION_SCALE_FACTOR)\n  .y(d => d.y * FORMATION_SCALE_FACTOR)\n\nconst planeCoordinates = ({\n  planes,\n  viewConfig: { show },\n  formation: { radius }\n}: PlanesArgs) => {\n  switch (show) {\n    case ShowOption.FORMATION:\n      return new Map()\n    case ShowOption.PLANES: {\n      const positions = planes.map(p => p.position)\n      const positionToCoordinate = new Map(\n        [PlanePosition.LT, PlanePosition.LEAD, PlanePosition.RT]\n          .filter(p => positions.includes(p))\n          .map((p, idx, all) => {\n            const offset = idx * 300 - (all.length - 1) * 150\n            return [p, new Polar(Math.abs(offset), offset >= 0 ? 0 : PI)]\n          })\n      )\n      return positionToCoordinate\n    }\n    case ShowOption.BOTH: {\n      const positionToCoordinate = new Map(\n        planes.map(({ position, theta }) => {\n          return [\n            position,\n            new Polar(\n              Math.max(7, radius + 3) * SCALE_FACTOR,\n              position === PlanePosition.LEAD ? TAU / 12 : theta\n            )\n          ]\n        })\n      )\n      return positionToCoordinate\n    }\n  }\n}\n\ninterface PlanesArgs {\n  slots: SlotData[]\n  planes: Plane[]\n  formation: Formation\n  viewConfig: ViewConfigState\n  fill: SlotDataFun\n  label: SlotDataFun\n}\nexport default class PlanesDrawer extends AbstractDrawer<PlanesArgs, void> {\n  draw(args: PlanesArgs) {\n    const p2c = planeCoordinates(args)\n\n    const { fill, label } = args\n\n    const slotsByPlane = Array.from(\n      args.slots.reduce((map, slotData) => {\n        const array = map.get(slotData.plane) || []\n        array.push(slotData)\n        return map.set(slotData.plane, array)\n      }, new Map<Plane, SlotData[]>())\n    ).map(([plane, slotData]) => ({ plane, slotData }))\n\n    const t = d3.transition().duration(1000) as d3.Transition<\n      BaseType,\n      any,\n      any,\n      any\n    >\n\n    this.group\n      .selectAll<SVGGElement, SlottedPlane>(\"g.plane\")\n      .data<SlottedPlane>(slotsByPlane, d => d.plane.position)\n      .join(\n        enter =>\n          enter\n            .append(\"g\")\n            .classed(\"plane\", true)\n            .call(gg => {\n              gg.append(\"path\").attr(\"d\", line(otterPoints)!)\n              gg.append(\"path\")\n                .attr(\"stroke-width\", 3)\n                .attr(\"d\", line(doorPoints)!)\n              gg.append(\"text\")\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"dominant-baseline\", \"central\")\n                .attr(\"x\", 0)\n                .attr(\"y\", -260)\n                .text(d => d.plane.position)\n            })\n            .attr(\"transform\", \"translate(0,0) scale(0)\"),\n        undefined,\n        exit => transitionOut(exit, t)\n      )\n      .transition(t)\n      .attr(\n        \"transform\",\n        ({ plane: { position } }) =>\n          `translate(${p2c.get(position)!.x},${p2c.get(position)!.y}) scale(1)`\n      )\n      .selection()\n      .selectAll<SVGGElement, SlotData>(\"g.slot\")\n      .data<SlotData>(d => d.slotData, d => `${d.formationSlotId}.${d.planeId}`)\n      .join(enter => addSlot(enter), undefined, exit => transitionOut(exit, t))\n      .transition(t)\n      .attr(\"transform\", \"scale(1)\")\n      .call(slotG => {\n        updateSlot(slotG, planeX, planeY, fill, label)\n      })\n  }\n}\n","import { SlotData } from \"../formation/interfaces\"\nimport * as d3 from \"d3\"\nimport AbstractDrawer from \"./AbstractDrawer\"\nimport { ViewConfigState, ShowOption } from \"../store/types\"\nimport {\n  FILL_FUNCTIONS,\n  LABEL_FUNCTIONS,\n  x,\n  y,\n  translate,\n  updateSlot,\n  addSlot,\n  arc,\n  transitionOut,\n  SlotDataFun\n} from \"./slotdatafuns\"\nimport { Transition, BaseType } from \"d3\"\n\ninterface FormationArgs {\n  slots: SlotData[]\n  viewConfig: ViewConfigState\n  fill: SlotDataFun\n  label: SlotDataFun\n}\nexport default class FormationDrawer extends AbstractDrawer<\n  FormationArgs,\n  void\n> {\n  draw({ slots, viewConfig, fill, label }: FormationArgs) {\n    const slotData: SlotData[] =\n      viewConfig.show === ShowOption.PLANES ? [] : slots\n\n    const t = d3.transition().duration(1000) as Transition<\n      BaseType,\n      any,\n      any,\n      any\n    >\n\n    this.group\n      .selectAll<SVGGElement, SlotData>(\"g.slotgroup\")\n      .data<SlotData>(slotData, d => d.formationSlotId.toString())\n      .join(\n        enter =>\n          enter\n            .append(\"g\")\n            .attr(\"class\", \"slotgroup\")\n            .attr(\"transform\", \"translate(0,0) scale(0)\")\n            .call(g => {\n              g.append(\"path\")\n                .attr(\"class\", \"grips\")\n                .attr(\"d\", arc)\n              addSlot(g, x, y, fill, label)\n            }),\n        undefined,\n        exit => transitionOut(exit, t)\n      )\n      .transition(t)\n      .attr(\"transform\", d => translate(d) + \" scale(1)\")\n      .call(g => {\n        g.select(\"path\").attr(\"d\", arc)\n        updateSlot(g, x, y, fill, label)\n      })\n  }\n}\n","import React from \"react\"\nimport * as d3 from \"d3\"\nimport \"./FormationComponent.css\"\n\nimport { Formation, Plane, SlotData } from \"../formation/interfaces\"\nimport PlanesDrawer from \"../drawing/PlanesDrawer\"\nimport { ViewConfigState } from \"../store/types\"\nimport FormationDrawer from \"../drawing/FormationDrawer\"\nimport { SlotDataFun } from \"../drawing/slotdatafuns\"\n\ninterface FormationProps {\n  formation: Formation\n  planes: Plane[]\n  slots: SlotData[]\n  viewConfig: ViewConfigState\n  fill: SlotDataFun\n  label: SlotDataFun\n}\nexport default class FormationComponent extends React.Component<\n  FormationProps,\n  {}\n> {\n  svg!: d3.Selection<SVGSVGElement, {}, null, undefined>\n  allGrp!: d3.Selection<SVGGElement, {}, null, undefined>\n  zoom!: d3.ZoomBehavior<SVGSVGElement, {}>\n  formationDrawer!: FormationDrawer\n  planesDrawer!: PlanesDrawer\n\n  height() {\n    return parseInt(this.svg.style(\"height\"), 10)\n  }\n\n  width() {\n    return parseInt(this.svg.style(\"width\"), 10)\n  }\n\n  componentDidMount() {\n    this.allGrp = this.svg.append(\"g\")\n\n    this.zoom = d3\n      .zoom<SVGSVGElement, {}>()\n      .scaleExtent([0.5, 2])\n      .on(\"zoom\", () => this.allGrp.attr(\"transform\", d3.event.transform))\n\n    this.svg\n      .call(this.zoom) //allows user zoom\n      .call(this.zoom.translateBy, this.width() / 2, this.height() / 2) //set initial zoom  to center\n\n    //bounding box\n    // https://bl.ocks.org/iamkevinv/0a24e9126cd2fa6b283c6f2d774b69a2\n\n    this.formationDrawer = new FormationDrawer().withGroup(\n      this.allGrp.append(\"g\")\n    )\n    this.formationDrawer.draw(this.props)\n\n    this.planesDrawer = new PlanesDrawer().withGroup(this.allGrp.append(\"g\"))\n    this.planesDrawer.draw(this.props)\n  }\n\n  componentDidUpdate() {\n    this.formationDrawer.draw(this.props)\n    this.planesDrawer.draw(this.props)\n  }\n\n  render() {\n    return (\n      <svg\n        width={\"100%\"}\n        height={\"100%\"}\n        ref={element => (this.svg = d3.select(element!))}\n      />\n    )\n  }\n}\n","export default function approxeq(\n  a: number,\n  b: number,\n  eps = Math.sqrt(Number.EPSILON)\n) {\n  return Math.abs(a - b) < eps\n}\n","import lap from \"./lap\"\n\n//takes a scoreFun that takes an A and a B\n//and converts it to a function that takes i, j for i, j in [0, number of as/bs)\n//for use with lap()\nfunction cost<A, B>(as: A[], bs: B[], scoreFun: (a: A, b: B) => number) {\n  //memoize scoreFun\n  const memo = new Map<string, number>()\n  return (i: number, j: number): number => {\n    const key = `${i}.${j}`\n    if (!memo.has(key)) {\n      const a = as[i]\n      const b = bs[j]\n      memo.set(key, scoreFun(a, b))\n    }\n    return memo.get(key)!\n  }\n}\n\n/**\n * takes two arrays of things of equal length and a function that computes a score between a pair of those things\n * and assigns each thing in the first list to a thing in the second list, minimizing the sum of the scores of the assigned pairs\n * an\n * @param as\n * @param bs\n * @param scoreFun\n */\nfunction lapwrapper<A, B>(\n  as: A[],\n  bs: B[],\n  scoreFun: (a: A, b: B) => number\n): [A, B][] {\n  if (as.length !== bs.length) {\n    throw new Error(\"as and bs have diff lenghts\")\n  }\n\n  const result = lap(as.length, cost(as, bs, scoreFun))\n\n  if (\n    !result.row.every(r => r >= 0 && r < as.length) ||\n    new Set(result.row).size != as.length\n  ) {\n    const allScores = as.flatMap(a =>\n      bs.map(b => ({ a, b, score: scoreFun(a, b) }))\n    )\n    console.log(\"something's weird\", {\n      allScores,\n      result\n    })\n  }\n  // const assignments = result.col\n\n  // return Array.from(assignments).map((p: number, i: number) => {\n  //   const a = as[p]\n  //   const b = bs[i]\n  //   return [a, b]\n  // })\n\n  return Array.from(result.row).map((p: number, i: number) => {\n    const a = as[i]\n    const b = bs[p]\n    return [a, b]\n  })\n}\n\nexport default lapwrapper\n","//https://github.com/Fil/lap-jv\n/************************************************************************\n*\n*  lap.js -- ported to javascript from\n\n   lap.cpp\n   version 1.0 - 4 September 1996\n   author: Roy Jonker @ MagicLogic Optimization Inc.\n   e-mail: roy_jonker@magiclogic.com\n\n   Code for Linear Assignment Problem, according to\n\n   \"A Shortest Augmenting Path Algorithm for Dense and Sparse Linear\n    Assignment Problems,\" Computing 38, 325-340, 1987\n\n   by\n\n   R. Jonker and A. Volgenant, University of Amsterdam.\n\n*\n   PORTED TO JAVASCRIPT 2017-01-02 by Philippe Riviere(fil@rezo.net)\n   CHANGED 2016-05-13 by Yang Yong(yangyongeducation@163.com) in column reduction part according to\n   matlab version of LAPJV algorithm(Copyright (c) 2010, Yi Cao All rights reserved)--\n   https://www.mathworks.com/matlabcentral/fileexchange/26836-lapjv-jonker-volgenant-algorithm-for-linear-assignment-problem-v3-0:\n*\n*************************************************************************/\n\n/* This function is the jv shortest augmenting path algorithm to solve the assignment problem */\nexport default function lap(dim, cost) {\n  // input:\n  // dim        - problem size\n  // cost       - cost callback (or matrix)\n\n  // output:\n  // rowsol     - column assigned to row in solution\n  // colsol     - row assigned to column in solution\n  // u          - dual variables, row reduction numbers\n  // v          - dual variables, column reduction numbers\n\n  // convert the cost matrix (old API) to a callback (new API)\n  if (typeof cost === \"object\") {\n    var cost_matrix = cost;\n    cost = function (i, j) {\n      return cost_matrix[i][j];\n    };\n  }\n\n  var sum = 0;\n  {\n    let i1, j1;\n    for (i1 = 0; i1 < dim; i1++) {\n      for (j1 = 0; j1 < dim; j1++)\n        sum += cost(i1, j1);\n    }\n  }\n  const BIG = 10000 * (sum / dim);\n  const epsilon = sum / dim / 10000;\n  const rowsol = new Int32Array(dim),\n    colsol = new Int32Array(dim),\n    u = new Float64Array(dim),\n    v = new Float64Array(dim);\n  let unassignedfound;\n  /* row */\n  let i, imin, numfree = 0, prvnumfree, f, i0, k, freerow; // *pred, *free\n  /* col */\n  let j, j1, j2, endofpath, last, low, up; // *collist, *matches\n  /* cost */\n  let min, h, umin, usubmin, v2; // *d\n\n  const free = new Int32Array(dim); // list of unassigned rows.\n  const collist = new Int32Array(dim); // list of columns to be scanned in various ways.\n  const matches = new Int32Array(dim); // counts how many times a row could be assigned.\n  const d = new Float64Array(dim); // 'cost-distance' in augmenting path calculation.\n  const pred = new Int32Array(dim); // row-predecessor of column in augmenting/alternating path.\n\n  // init how many times a row will be assigned in the column reduction.\n  for (i = 0; i < dim; i++)\n    matches[i] = 0;\n\n  // COLUMN REDUCTION\n  for (\n    j = dim;\n    j--; // reverse order gives better results.\n\n  ) {\n    // find minimum cost over rows.\n    min = cost(0, j);\n    imin = 0;\n    for (i = 1; i < dim; i++)\n      if (cost(i, j) < min) {\n        min = cost(i, j);\n        imin = i;\n      }\n    v[j] = min;\n    if (++matches[imin] === 1) {\n      // init assignment if minimum row assigned for first time.\n      rowsol[imin] = j;\n      colsol[j] = imin;\n    } else if (v[j] < v[rowsol[imin]]) {\n      j1 = rowsol[imin];\n      rowsol[imin] = j;\n      colsol[j] = imin;\n      colsol[j1] = -1;\n    } else colsol[j] = -1; // row already assigned, column not assigned.\n  }\n\n  // REDUCTION TRANSFER\n  for (i = 0; i < dim; i++) {\n    if (\n      matches[i] === 0 // fill list of unassigned 'free' rows.\n    )\n      free[numfree++] = i;\n    else if (matches[i] === 1) {\n      // transfer reduction from rows that are assigned once.\n      j1 = rowsol[i];\n      min = BIG;\n      for (j = 0; j < dim; j++)\n        if (j !== j1)\n          if (cost(i, j) - v[j] < min + epsilon) min = cost(i, j) - v[j];\n      v[j1] = v[j1] - min;\n    }\n  }\n\n  // AUGMENTING ROW REDUCTION\n  let loopcnt = 0; // do-loop to be done twice.\n  do {\n    loopcnt++;\n\n    // scan all free rows.\n    // in some cases, a free row may be replaced with another one to be scanned next.\n    k = 0;\n    prvnumfree = numfree;\n    numfree = 0; // start list of rows still free after augmenting row reduction.\n    while (k < prvnumfree) {\n      i = free[k];\n      k++;\n\n      // find minimum and second minimum reduced cost over columns.\n      umin = cost(i, 0) - v[0];\n      j1 = 0;\n      usubmin = BIG;\n      for (j = 1; j < dim; j++) {\n        h = cost(i, j) - v[j];\n        if (h < usubmin)\n          if (h >= umin) {\n            usubmin = h;\n            j2 = j;\n          } else {\n            usubmin = umin;\n            umin = h;\n            j2 = j1;\n            j1 = j;\n          }\n      }\n\n      i0 = colsol[j1];\n      if (umin < usubmin + epsilon)\n        //         change the reduction of the minimum column to increase the minimum\n        //         reduced cost in the row to the subminimum.\n        v[j1] = v[j1] - (usubmin + epsilon - umin);\n      else if (i0 > -1) {\n        // minimum and subminimum equal.\n        // minimum column j1 is assigned.\n        // swap columns j1 and j2, as j2 may be unassigned.\n        j1 = j2;\n        i0 = colsol[j2];\n      }\n\n      // (re-)assign i to j1, possibly de-assigning an i0.\n      rowsol[i] = j1;\n      colsol[j1] = i;\n\n      if (i0 > -1)\n        if (umin < usubmin)\n          // minimum column j1 assigned earlier.\n          // put in current k, and go back to that k.\n          // continue augmenting path i - j1 with i0.\n          free[--k] = i0;\n        else\n          // no further augmenting reduction possible.\n          // store i0 in list of free rows for next phase.\n          free[numfree++] = i0;\n    }\n  } while (loopcnt < 2); // repeat once.\n\n  // AUGMENT SOLUTION for each free row.\n  for (f = 0; f < numfree; f++) {\n    freerow = free[f]; // start row of augmenting path.\n\n    // Dijkstra shortest path algorithm.\n    // runs until unassigned column added to shortest path tree.\n    for (j = dim; j--;) {\n      d[j] = cost(freerow, j) - v[j];\n      pred[j] = freerow;\n      collist[j] = j; // init column list.\n    }\n\n    low = 0; // columns in 0..low-1 are ready, now none.\n    up = 0; // columns in low..up-1 are to be scanned for current minimum, now none.\n    // columns in up..dim-1 are to be considered later to find new minimum,\n    // at this stage the list simply contains all columns\n    unassignedfound = false;\n    do {\n      if (up === low) {\n        // no more columns to be scanned for current minimum.\n        last = low - 1;\n\n        // scan columns for up..dim-1 to find all indices for which new minimum occurs.\n        // store these indices between low..up-1 (increasing up).\n        min = d[collist[up++]];\n        for (k = up; k < dim; k++) {\n          j = collist[k];\n          h = d[j];\n          if (h <= min) {\n            if (h < min) {\n              // new minimum.\n              up = low; // restart list at index low.\n              min = h;\n            }\n            // new index with same minimum, put on undex up, and extend list.\n            collist[k] = collist[up];\n            collist[up++] = j;\n          }\n        }\n        // check if any of the minimum columns happens to be unassigned.\n        // if so, we have an augmenting path right away.\n        for (k = low; k < up; k++)\n          if (colsol[collist[k]] < 0) {\n            endofpath = collist[k];\n            unassignedfound = true;\n            break;\n          }\n      }\n\n      if (!unassignedfound) {\n        // update 'distances' between freerow and all unscanned columns, via next scanned column.\n        j1 = collist[low];\n        low++;\n        i = colsol[j1];\n        h = cost(i, j1) - v[j1] - min;\n\n        for (k = up; k < dim; k++) {\n          j = collist[k];\n          v2 = cost(i, j) - v[j] - h;\n          if (v2 < d[j]) {\n            pred[j] = i;\n            if (v2 === min)\n              if (colsol[j] < 0) {\n                // new column found at same minimum value\n                // if unassigned, shortest augmenting path is complete.\n                endofpath = j;\n                unassignedfound = true;\n                break;\n              } else {\n                // else add to list to be scanned right away.\n                collist[k] = collist[up];\n                collist[up++] = j;\n              }\n            d[j] = v2;\n          }\n        }\n      }\n    } while (!unassignedfound);\n\n    // update column prices.\n    for (k = last + 1; k--;) {\n      j1 = collist[k];\n      v[j1] = v[j1] + d[j1] - min;\n    }\n\n    // reset row and column assignments along the alternating path.\n    do {\n      i = pred[endofpath];\n      colsol[endofpath] = i;\n      j1 = endofpath;\n      endofpath = rowsol[i];\n      rowsol[i] = j1;\n    } while (i !== freerow);\n  }\n\n  // calculate optimal cost.\n  let lapcost = 0;\n  for (i = dim; i--;) {\n    j = rowsol[i];\n    u[i] = cost(i, j) - v[j];\n    lapcost = lapcost + cost(i, j);\n  }\n\n  return {\n    cost: lapcost,\n    row: rowsol,\n    col: colsol,\n    u: u,\n    v: v\n  };\n}\n","import { PlaneAssignment, Formation, Plane, SlotData } from \"./interfaces\"\nimport lapwrapper from \"./lapwrapper\"\nimport * as d3 from \"d3\"\n\nconst slotPlane = (\n  plane: Plane,\n  formation: Formation,\n  formationSlotIds: number[]\n) => {\n  const score = (formationSlotId: number, planeSlotId: number) => {\n    const slot = formation.slots[formationSlotId]\n    const { reverseBuildOrder } = slot\n    const { jr } = plane.slots[planeSlotId]\n\n    const slotJr = slot.offset.plus(slot.position).y\n\n    return Math.abs(jr) * reverseBuildOrder * 100 - slotJr * jr\n  }\n  return lapwrapper(formationSlotIds, d3.range(plane.filledSlots), score).map(\n    ([formationSlotId, planeSlotId]) => ({ formationSlotId, planeSlotId })\n  )\n}\n\nexport default function slotify(\n  formation: Formation,\n  planes: Plane[],\n  planeAssignments: PlaneAssignment[]\n): SlotData[] {\n  return planes.flatMap((plane, planeId) => {\n    const formationSlotIds = planeAssignments\n      .filter(plane => plane.planeId === planeId)\n      .map(({ formationSlotId }) => formationSlotId)\n\n    const planeSlotAssignments = slotPlane(plane, formation, formationSlotIds)\n\n    return planeSlotAssignments.map(({ formationSlotId, planeSlotId }) => ({\n      formationSlotId,\n      formationSlot: formation.slots[formationSlotId],\n      planeId,\n      plane,\n      planeSlotId,\n      planeSlot: plane.slots[planeSlotId]\n    }))\n  })\n}\n","import { Formation, Plane, SlotData } from \"./interfaces\"\nimport planeify from \"./planeify\"\nimport slotify from \"./slotify\"\n\nexport default (formation: Formation, planes: Plane[]): SlotData[] => {\n  const slots = slotify(formation, planes, planeify(formation, planes))\n  console.log({\n    slots: slots.map(({ formationSlotId, planeId, planeSlotId }) => ({\n      formationSlotId,\n      planeId,\n      planeSlotId\n    }))\n  })\n  return slots\n}\n","import Polar from \"../../geometry/Polar\"\n\nimport { range } from \"d3\"\nimport { FormationSlot, ComponentSlot } from \"../interfaces\"\n\nexport default abstract class Component {\n  slots: number\n  slotNumOffset: number\n\n  constructor(slots: number, slotNumOffset: number) {\n    if (slots < 0) {\n      throw new Error(`slots should be non-negative, was ${slots}`)\n    }\n    this.slots = slots\n    this.slotNumOffset = slotNumOffset\n  }\n\n  checkSlot(slot: number) {\n    if (slot < 0 || slot >= this.slots)\n      throw new Error(`slot should be in [0, ${this.slots}), was ${slot}`)\n  }\n\n  slotData(slot: number): ComponentSlot {\n    this.checkSlot(slot)\n\n    return {\n      offset: this.position(),\n      position: this.slotPosition(slot),\n      dockAngle: this.dockAngle(),\n      buildOrder: this.buildOrder(slot) + this.waiting()\n    }\n  }\n\n  allSlots(): ComponentSlot[] {\n    return range(this.slots).map(slot => this.slotData(slot))\n  }\n\n  //returns position of slot *relative to position of component*\n  slotPosition(s: number, offset = false) {\n    this.checkSlot(s)\n    const pos = new Polar(\n      this.radius(),\n      this.rotation() - 2 * s * this.dockAngle()\n    )\n    return offset ? pos.plus(this.position()) : pos\n  }\n\n  //returns position of left hand of slot *relative to center of formation*\n  dockPosition(s: number) {\n    this.checkSlot(s)\n    return this.slotPosition(s)\n      .rotate(-this.dockAngle())\n      .plus(this.position())\n  }\n\n  //how long this component is waiting before building\n  waiting(): number {\n    return Math.max(\n      ...this.parents().map(\n        parent => parent.waiting() + parent.maxBuildOrder()\n      ),\n      0\n    )\n  }\n\n  // return build order for last slot to build\n  abstract maxBuildOrder(): number\n\n  //should return build order for slot\n  abstract buildOrder(slot: number): number\n\n  //returns radius of this component\n  abstract radius(): number\n\n  //returns center of this component\n  abstract position(): Polar\n\n  //returns rotation in theta of where to place first slot\n  abstract rotation(): number\n\n  //returns angle between slot position and dock position, i.e. half of wingspan angle\n  abstract dockAngle(): number\n\n  //components this component is docked\n  abstract parents(): Component[]\n}\n","import { PI, TAU } from \"../../constants\"\nimport Component from \"./Component\"\nimport Polar from \"../../geometry/Polar\"\n\ninterface Dock {\n  c: Component\n  s: number\n}\n\nexport type PRRD = {\n  position: Polar;\n  radius: number;\n  rotation: number;\n  dockAngle: number;\n}\n\nexport default class Round extends Component {\n  left: Dock\n  right: Dock\n  firstRun: boolean\n  private _prrd: PRRD | undefined\n  /*\n  left and right are left hand and right hand docks. \n  Should be an with properties\n    - c: component\n    - s: slot index\n  */\n  constructor(slots: number, slotNumOffset: number, left: Dock, right: Dock) {\n    super(slots, slotNumOffset)\n    this.left = left\n    this.right = right\n    this.firstRun = true\n  }\n\n  parents() {\n    return Array.from(new Set([this.left.c, this.right.c]))\n  }\n\n  get prrd() {\n    if (!this._prrd) {\n      this._prrd = Round._positionRadiusRotationDockAngle(\n        this.left.c.dockPosition(this.left.s),\n        this.right.c.dockPosition(this.right.s),\n        this.slots\n      )\n    }\n    return this._prrd\n  }\n\n  //computes the centroid position\n  //component radius, and component rotation\n  //position, radius, rotation, dockangle\n  /*\n  leftDockPosition - where component's left hand dock is\n  rightDockPosition - where component's right hand dock is\n  slots - number of slots in this component\n  // parentCentroid - centroid of parent component, or center of formation. Used to pick the orien\n  */\n  static _positionRadiusRotationDockAngle(\n    leftDockPosition: Polar,\n    rightDockPosition: Polar,\n    slots: number\n  ): PRRD {\n    const dockDistance = leftDockPosition.distanceFrom(rightDockPosition)\n    const { radius, theta } = Round.__computeRadiusTheta(slots, dockDistance)\n\n    const angleDelta = leftDockPosition.angleTo(rightDockPosition)\n    const position = leftDockPosition.plus(\n      new Polar(radius, angleDelta - (PI - theta) / 2)\n    )\n\n    //the rotation is where the first slot (docking w/ right hand) goes\n    // TAU - theta is the whole arc angle, and their position is 1/(2*slots) around\n    const dockAngle = (TAU - theta) / (2 * slots)\n    const rotation = position.angleTo(rightDockPosition) - dockAngle\n\n    return { position, radius, rotation, dockAngle }\n  }\n\n  position() {\n    return this.prrd.position\n  }\n\n  radius() {\n    return this.prrd.radius\n  }\n\n  rotation() {\n    return this.prrd.rotation\n  }\n\n  dockAngle() {\n    return this.prrd.dockAngle\n  }\n\n  maxBuildOrder() {\n    return Math.ceil(this.slots / 2)\n  }\n\n  buildOrder(slot: number) {\n    this.checkSlot(slot)\n\n    //build from the ends\n    return Math.min(slot + 1, this.slots - slot)\n  }\n\n  // computes radius and angle of cutoff for a circle with the side cut off\n  // with length of the remaining curve part = s\n  // and length of flat bit = d\n  // I think it's O(-log(eps))\n  static __computeRadiusTheta(\n    s: number,\n    d: number,\n    eps = Math.sqrt(Number.EPSILON)\n  ) {\n    if (d < 0 || d > s) {\n      console.error(`d: ${d}, s: ${s}`)\n      throw new Error(\"d must be in [0, s]\")\n    }\n    var iters = 0\n    //try picking theta between lower and upper\n    function iter(lower = 0, upper = PI): number {\n      if (iters >= 100) {\n        throw new Error(\"didn't converge\")\n      }\n      iters = iters + 1\n      const mid = (upper + lower) / 2\n      // if ((upper - lower) < eps) {\n      //   return mid\n      // }\n\n      //candidate theta = mid\n      //compute radius from theta\n      const r = d / (2 * Math.sin(mid / 2))\n      //compute s from radius, theta\n      const ss = r * (TAU - mid)\n\n      if (Math.abs(ss - s) < eps) {\n        return mid\n      }\n\n      //if computed s is too big, try a bigger theta, else try smaller\n      return ss > s ? iter(mid, upper) : iter(lower, mid)\n    }\n    //iter returns theta, compute radius\n    const theta = iter()\n    return {\n      radius: s / (TAU - iter()),\n      theta: theta\n    }\n  }\n}\n","import Component from \"./Component\"\nimport Round, { PRRD } from \"./Round\"\nimport Polar from \"../../geometry/Polar\"\n\ninterface Dock {\n  c: Component\n  s: number\n}\n\nexport default class Whacker extends Component {\n  dock: Dock\n  hand: string\n  private _prrd: PRRD | undefined\n\n  /*\n  slots - \n  dock - { component, slot } this whacker is docked on\n  hand - docked with 'left' or 'right'\n \n  modeled as part of a pod (Round docked on one person) with slots * 2 + 1 slots\n  */\n  constructor(slots: number, slotNumOffset: number, dock: Dock, hand: string) {\n    super(slots, slotNumOffset)\n    this.dock = dock\n\n    if (hand !== \"left\" && hand !== \"right\")\n      throw new Error(\"Hand should be 'left' or 'right'\")\n    this.hand = hand\n  }\n\n  parents() {\n    return [this.dock.c]\n  }\n\n  //left hand dock position of the imaginary pod\n  _left() {\n    const { c, s } = this.dock\n    return this.hand === \"left\"\n      ? c.dockPosition(s)\n      : c\n          .slotPosition(s)\n          .rotate(-3 * c.dockAngle()) //move 1.5 slots to the left\n          .plus(c.position())\n  }\n\n  //right hand dock position of the imaginary pod\n  _right() {\n    const { c, s } = this.dock\n    return this.hand === \"left\"\n      ? c\n          .slotPosition(s)\n          .rotate(c.dockAngle()) //move half a slot to the right\n          .plus(c.position())\n      : c.dockPosition(s)\n  }\n\n  get prrd() {\n    if (!this._prrd) {\n      const psuedoSlots = this.slots * 2 + 1\n\n      this._prrd = Round._positionRadiusRotationDockAngle(\n        this._left(),\n        this._right(),\n        psuedoSlots\n      )\n\n      if (this.hand === \"left\") {\n        const invisibleSlots = psuedoSlots - this.slots\n        const { rotation, dockAngle } = this._prrd\n        const fixedRotation = Polar.unspin(\n          rotation - invisibleSlots * 2 * dockAngle\n        ) //rotate two slots to the right\n        this._prrd.rotation = fixedRotation\n      }\n    }\n    return this._prrd\n  }\n\n  maxBuildOrder() {\n    return this.slots\n  }\n\n  buildOrder(slot: number) {\n    this.checkSlot(slot)\n    return this.hand === \"left\" ? this.slots - slot : slot + 1\n  }\n\n  position() {\n    return this.prrd.position\n  }\n\n  radius() {\n    return this.prrd.radius\n  }\n\n  rotation() {\n    return this.prrd.rotation\n  }\n\n  dockAngle() {\n    return this.prrd.dockAngle\n  }\n}\n","import Polar from \"../../geometry/Polar\"\nimport Component from \"./Component\"\nimport { PI, TAU } from \"../../constants\"\n\nexport default class Base extends Component {\n  _rotation: number\n  constructor(slots: number, rotation = (3 * PI) / 2) {\n    super(slots, 0)\n    this._rotation = rotation\n  }\n\n  //angle to the first slot\n  rotation() {\n    return this._rotation\n  }\n\n  position() {\n    return new Polar(0, 0)\n  }\n\n  // circumference = 2 PI r\n  // circumference = # slots\n  radius() {\n    return this.slots / TAU\n  }\n\n  //angle between slot position and dock position\n  dockAngle() {\n    return TAU / (this.slots * 2)\n  }\n\n  maxBuildOrder(): number {\n    return 1\n  }\n\n  buildOrder(slot: number) {\n    this.checkSlot(slot)\n    return 1\n  }\n\n  parents() {\n    return []\n  }\n}\n","import { BaseSlot, SlotCollection, NumDict } from \"./interfaces\"\nimport arrayToDict from \"../util/arrayToDict\"\n\nexport default abstract class AbstractSlotCollection<S extends BaseSlot>\n  implements SlotCollection<S> {\n  private _slots?: S[]\n\n  protected abstract computeSlots(): S[]\n\n  get slots(): S[] {\n    if (!this._slots) {\n      this._slots = this.computeSlots()\n    }\n\n    return this._slots\n  }\n}\n","import Round from \"./components/Round\"\nimport Whacker from \"./components/Whacker\"\nimport Base from \"./components/Base\"\nimport Component from \"./components/Component\"\nimport AbstractSlotCollection from \"./AbstractSlotCollection\"\nimport { FormationSlot, Formation } from \"./interfaces\"\nimport * as d3 from \"d3\"\n\ntype Ring = Component[]\ntype Dock = { c: Component; s: number }\n\n/**\n * computes the number of slots in a ring\n * @param {Number} ring index of ring,\n *         ring 0 = base,\n *         ring 1 = 1st pods\n *         ring 2 = 2nd pods\n *         ring 3 = if baseSize > 4, bridges, otherwise just pods on out\n *         ring 4 = if baseSize > 4, then pods on bridges in ring 3, otherwise just pods on podLines\n *         ring 5... pod lines on out\n */\nconst slotsInRing = (baseSize: number, ring: number): number => {\n  const podLines = Math.round(baseSize / 2)\n  const bridges = podLines > 2\n  if (ring === 0) {\n    return baseSize\n  }\n  if (ring === 1) {\n    return baseSize + podLines * 5\n  }\n  if (ring === 2) {\n    return baseSize + podLines * 10\n  }\n  if (ring === 3) {\n    return (\n      slotsInRing(baseSize, ring - 1) + (bridges ? 3 * podLines : 5 * podLines)\n    )\n  }\n  if (ring === 4) {\n    return (\n      slotsInRing(baseSize, ring - 1) + (bridges ? 5 * podLines : 5 * baseSize)\n    )\n  }\n  return (\n    slotsInRing(baseSize, 4) +\n    (ring - 4) * (bridges ? 5 * podLines : 5 * baseSize)\n  )\n}\n\n/**\n * gets dock positions for next ring given currently filled rings\n * @param rings an array of rings, 0th starting at base and going out\n */\nconst nextDockPositions = (\n  baseSize: number,\n  rings: Ring[]\n): { left: Dock; right: Dock }[] => {\n  if (rings.length > 10) {\n    throw new Error(\"somethings fucky\")\n  }\n  const bridges = baseSize !== 4\n\n  if (rings.length === 1) {\n    const base = rings[0][0]\n\n    return d3.range(0, baseSize, 2).map(slot => ({\n      left: { c: base, s: slot },\n      right: { c: base, s: (slot + baseSize - 1) % baseSize }\n    }))\n  }\n  if (\n    !bridges ||\n    rings.length === 2 ||\n    rings.length === 4 ||\n    rings.length >= 6\n  ) {\n    // if we're not using bridges\n    // or last ring (1) is 1st pods (and we need 2nd pods)\n    // or last ring (3) is bridges (and we need 2nd pods on those bridges)\n    // or we're way out (last ring >= 5)\n    // then we want pods on everything in the last ring\n    return rings[rings.length - 1].map(component => {\n      const isPod = component.slots === 5\n      return {\n        left: { c: component, s: 1 + (isPod ? 1 : 0) },\n        right: { c: component, s: 0 + (isPod ? 1 : 0) }\n      }\n    })\n  }\n  if (bridges && rings.length === 3) {\n    // ring 3 is bridges if there are bridges\n    const firstPods = rings[1]\n    const numBridges = firstPods.length\n    return d3.range(numBridges).map(bridgeNum => ({\n      left: { c: firstPods[(bridgeNum + 1) % numBridges], s: 0 },\n      right: { c: firstPods[bridgeNum], s: 3 }\n    }))\n  }\n  if (bridges && rings.length === 5) {\n    // if bridges, ring 5 is 2nd pods on bridges\n    const secondPods = rings[2]\n    const bridgeSecondPods = rings[4]\n    return secondPods\n      .flatMap((secondPod, idx) => [secondPod, bridgeSecondPods[idx]])\n      .map(component => {\n        return {\n          left: { c: component, s: component.slots === 5 ? 2 : 1 }, //5 -> pod, !5 (3) -> bridge\n          right: { c: component, s: component.slots === 5 ? 1 : 0 }\n        }\n      })\n  }\n  throw new Error(\"mmm\")\n}\n\n/**\n * this takes an array of rings starting with at least the Base, and\n * adds rings until all slots are included\n * @param {*} rings array of rings. (a ring is an array of components)\n */\nconst addRings = (slots: number, baseSize: number, rings: Ring[]): Ring[] => {\n  const completeRings = rings.length - 1\n\n  //compute slots in next ring\n  const nextRingSlots =\n    Math.min(slots, slotsInRing(baseSize, completeRings + 1)) -\n    slotsInRing(baseSize, completeRings)\n\n  if (nextRingSlots <= 0) return rings //we're done\n\n  const dockPositions = nextDockPositions(baseSize, rings)\n\n  // here a 'group' is either a pod, or, if there are less than 5 slots, two whackers\n  const slotGroups = dockPositions.length\n\n  const slotsPerGroup = Math.floor(nextRingSlots / slotGroups)\n  const groupsWithExtraSlot = nextRingSlots % slotGroups\n\n  const nextRing: Ring = dockPositions.flatMap(\n    ({ left, right }, groupNum): Ring => {\n      //slots in this group\n      const slotsToFill =\n        slotsPerGroup + (groupNum < groupsWithExtraSlot ? 1 : 0)\n      const isPod = left.c === right.c //left and right docking on same component is a pod, else bridge\n      const totalSlotsInGroup = isPod ? 5 : 3\n\n      const priorSlots =\n        slotsInRing(baseSize, completeRings) + //number of slots in prior rings\n        slotsPerGroup * groupNum + //number of slots in prior groups in this ring\n        Math.min(groupsWithExtraSlot, groupNum) //an extra slot per prior group, up to groupsWithExtraSlot\n\n      if (slotsToFill === totalSlotsInGroup) {\n        //if we have to fill the whole group, it's a pod\n        return [new Round(totalSlotsInGroup, priorSlots, left, right)]\n      } else {\n        //whackers\n        const leftHandSlots = Math.floor(slotsToFill / 2)\n        const rightHandSlots = leftHandSlots + (slotsToFill % 2) //if odd number, right hand whacker gets the extra\n        const whackers = []\n        if (leftHandSlots > 0) {\n          whackers.push(\n            new Whacker(\n              leftHandSlots,\n              priorSlots + rightHandSlots,\n              left,\n              \"left\"\n            )\n          )\n        }\n        if (rightHandSlots > 0) {\n          whackers.push(\n            new Whacker(rightHandSlots, priorSlots, right, \"right\")\n          )\n        }\n        return whackers\n      }\n    }\n  )\n  //recurse, add more rings to this prior plus this ring\n  return addRings(slots, baseSize, [...rings, nextRing])\n}\n\nclass FormationImpl extends AbstractSlotCollection<FormationSlot>\n  implements Formation {\n  components: Component[]\n  constructor(components: Component[]) {\n    super()\n    this.components = components\n  }\n\n  protected computeSlots(): FormationSlot[] {\n    const reverseBuildOrder = this.reverseBuildOrder()\n    return this.components\n      .flatMap(c => c.allSlots())\n      .map((s, idx) => ({ ...s, reverseBuildOrder: reverseBuildOrder[idx] }))\n  }\n\n  get baseIds(): number[] {\n    return this.components\n      .find(c => c instanceof Base)!\n      .allSlots()\n      .map((s, idx) => idx)\n  }\n\n  get radius(): number {\n    const slotRadi = this.slots.map(\n      ({ position, offset }) => position.plus(offset).radius\n    )\n    return Math.max(...slotRadi)\n  }\n\n  reverseBuildOrder() {\n    const parentToChildren = new Map(\n      this.components.map(component => [component, [] as Component[]])\n    )\n\n    this.components\n      .flatMap(child => child.parents().map(parent => ({ parent, child }))) //get all parent child pairs (many to many)\n      .forEach(({ parent, child }) =>\n        parentToChildren.get(parent)!.push(child)\n      )\n\n    const componentToWaiting = new Map<Component, number>()\n\n    const waiting = (component: Component): number => {\n      if (!componentToWaiting.has(component)) {\n        const children = parentToChildren.get(component)!\n        const numWaiting = Math.max(\n          ...children.map(child => waiting(child)! + child.maxBuildOrder()),\n          0\n        )\n\n        componentToWaiting.set(component, numWaiting)\n      }\n      return componentToWaiting.get(component)!\n    }\n    // waiting(this.components[0])\n    return this.components.flatMap(c => {\n      return d3\n        .range(c.slots)\n        .map(s => waiting(c) + c.maxBuildOrder() - c.buildOrder(s))\n    })\n  }\n}\n\n/**\n * Builds a formation using the following rules until we run out of slots\n *    1) Start with the base\n *    2) Add first pods on every other base slot, starting with the slot going up jump run moving left\n *    3) Add second pods on first pods\n *    4) If base size > 4, build bridges between frist pods\n *    5) If there are bridges, build 2nd pods on bridges\n *    6) Build pods on each pod line on out to infinity!\n *\n * If there are not enough slots to complete a ring of pods/bridges, then build whackers\n *\n * @param {Number} slots slots in this formation\n * @param {Number} baseSize\n * @returns an array of Components\n */\nexport default function buildFormation(\n  slots: number,\n  baseSize: number\n): Formation {\n  return new FormationImpl(\n    addRings(slots, baseSize, [[new Base(baseSize)]]).flat()\n  )\n}\n","import { createSelector } from \"reselect\"\nimport {\n  PlaneType,\n  Slotting,\n  FormationConfigState,\n  PlaneState\n} from \"../store/types\"\nimport { AppState } from \"../store/reducer\"\n\nexport const getFormationConfig = (state: AppState): FormationConfigState =>\n  state.formationConfig\nexport const getPlanesConfig = (state: AppState): PlaneState[] =>\n  state.planesConfig\n\nexport type SlotOptions = {\n  slots: number;\n  min: number;\n  max: number;\n}\n\nconst slotOptions = (\n  formationConfig: { baseSize: number; slots: number },\n  planesConfig: PlaneState[]\n): SlotOptions => {\n  const { min, max } = planesConfig\n    .filter(({ type }) => type !== PlaneType.NONE)\n    .map(({ slotting, slots }) => ({\n      //compute min/max slots on each plane\n      planeMin: slotting === Slotting.FILL ? slots : 0,\n      planeMax: slots\n    }))\n    .reduce(\n      ({ min, max }, { planeMin, planeMax }) => ({\n        //add min/max slots for all planes\n        min: min + planeMin,\n        max: max + planeMax\n      }),\n      { min: 0, max: 0 }\n    )\n\n  const fixedMin = Math.max(min, formationConfig.baseSize)\n\n  return {\n    min: fixedMin,\n    max,\n    slots: Math.max(Math.min(formationConfig.slots, max), fixedMin)\n  }\n}\n\n/**\n * computes min, max, and current number of slots based on plane and formation config\n *\n * if current slots is outside of [min, max], it is set to min or max\n */\nexport default createSelector(\n  [getFormationConfig, getPlanesConfig],\n  slotOptions\n)\n","import AbstractSlotCollection from \"./AbstractSlotCollection\"\nimport { PlaneSlot, Plane } from \"./interfaces\"\nimport PlanePosition from \"./PlanePosition\"\nimport { TAU } from \"../constants\"\nimport * as d3 from \"d3\"\nimport { PlaneType } from \"../store/types\"\n\nabstract class AbstractPlane extends AbstractSlotCollection<PlaneSlot>\n  implements Plane {\n  position: PlanePosition\n  filledSlots: number\n\n  constructor(position: PlanePosition, filledSlots: number) {\n    super()\n    this.position = position\n    this.filledSlots = filledSlots\n  }\n\n  get theta() {\n    switch (this.position) {\n      case PlanePosition.LEAD:\n        return (3 * TAU) / 12\n      case PlanePosition.LT:\n        return (7 * TAU) / 12\n      case PlanePosition.RT:\n        return (11 * TAU) / 12\n    }\n  }\n}\n\n/**\n *     x x\n *     x x\n *     x x\n *     x x\n *     x x\n *  x  x x\n *  x\n *  x x x\n *  x x x\n *  x x\n *  x\n *  x\n */\nexport class Otter extends AbstractPlane {\n  /**\n   * jrOffset determines which slot is considered 0 up or down jump run\n   * 3 is the 1st diver closet do the pilot just inside the door\n   * increase to the 'centeral' slot closer to the tail, decrease to move to cockpit\n   */\n  private jrOffset = 1\n  protected computeSlots(): PlaneSlot[] {\n    const l = 6\n    const floaters = d3\n      .range(7)\n      .map(y => ({ x: -2, y: l - 0.5 - y, jr: -y + this.jrOffset + 8 }))\n    const inDoor = d3\n      .range(3)\n      .map(y => ({ x: -1, y: l - 3 - y, jr: -y + this.jrOffset + 1 }))\n    const inDoor2 = d3\n      .range(2)\n      .map(y => ({ x: 0, y: l - 3.5 - y, jr: -y + this.jrOffset + -2 }))\n    const divers = d3\n      .range(6)\n      .flatMap(y => [\n        { x: -0.5, y: -0.5 - y, jr: -2 * y + this.jrOffset - 5 },\n        { x: 0.5, y: -0.5 - y, jr: -2 * y + this.jrOffset - 4 }\n      ])\n    return [...floaters, ...inDoor, ...inDoor2, ...divers]\n  }\n}\n\nexport const planeFactory = (\n  position: PlanePosition,\n  filledSlots: number,\n  type: PlaneType\n): Plane => {\n  switch (type) {\n    case PlaneType.OTTER:\n      return new Otter(position, filledSlots)\n    case PlaneType.SKYVAN:\n      throw new Error(\"SKYVAN not implemented\")\n    case PlaneType.NONE:\n      throw new Error(\"PLaneType is NONE\")\n  }\n}\n","import { PlaneState, PlaneType, Slotting } from \"../store/types\"\nimport { Plane } from \"./interfaces\"\nimport PlanePosition from \"./PlanePosition\"\nimport { planeFactory } from \"./planes\"\n\ntype FilledPlane = {\n  position: PlanePosition;\n  filledSlots: number;\n}\n\nconst countFilledSlots = (filledPlanes: FilledPlane[]) =>\n  filledPlanes.reduce((s, { filledSlots }) => s + filledSlots, 0)\n\n/**\n *\n * @param unfilledPlanes array of objects representing planes with slots left.\n *                       should have properties plane (lead, lt, rt), slots (total slots in plane)\n * @param slotsRemaining slots to put in unfilledPlanes\n * @param baseSize if unfilledPlanes includes lead plane, at least `baseSize` should go in it\n * @param filledPlanes array of planes already full, or partially full if slotsRemaining = 0\n */\nconst slotUnfilledPlanes = (\n  unfilledPlanes: PlaneState[],\n  slotsRemaining: number,\n  baseSize: number,\n  filledPlanes: FilledPlane[]\n): FilledPlane[] => {\n  if (unfilledPlanes.length === 0) {\n    return filledPlanes\n  }\n\n  const slotsPerPlane = slotsRemaining / unfilledPlanes.length\n\n  // if spreading remaing slots evently doesn't put enough in the lead plane for the base, fill that now\n  const lead = unfilledPlanes.find(\n    ({ position }) => position === PlanePosition.LEAD\n  )\n  if (lead && baseSize > slotsPerPlane) {\n    return slotUnfilledPlanes(\n      unfilledPlanes.filter(({ position }) => position !== PlanePosition.LEAD),\n      slotsRemaining - baseSize,\n      baseSize,\n      [{ position: PlanePosition.LEAD, filledSlots: baseSize }, ...filledPlanes]\n    )\n  }\n\n  //get planes with fewer total slots than slotsPerPlane and fill em up\n  const littlePlanes = unfilledPlanes\n    .filter(({ slots }) => slots < slotsPerPlane)\n    .map(({ position, slots }) => ({ position, filledSlots: slots }))\n\n  if (littlePlanes.length) {\n    const littlePlaneLabels = littlePlanes.map(({ position }) => position)\n    return slotUnfilledPlanes(\n      unfilledPlanes.filter(\n        ({ position }) => !littlePlaneLabels.includes(position)\n      ),\n      slotsRemaining - countFilledSlots(littlePlanes),\n      baseSize,\n      [...filledPlanes, ...littlePlanes]\n    )\n  }\n\n  // if we've gotten this far, there is room for at least slotsPerPlane on each unfilledPlane\n  const minSlotsPerPlane = Math.floor(slotsPerPlane)\n  const extras = slotsRemaining % minSlotsPerPlane\n\n  // if the lead plane is still in the mix, then always put one less on that plane\n  if (extras > 0 && lead) {\n    const filledLead = {\n      position: PlanePosition.LEAD,\n      filledSlots: minSlotsPerPlane\n    }\n    return slotUnfilledPlanes(\n      unfilledPlanes.filter(({ position }) => position !== PlanePosition.LEAD),\n      slotsRemaining - minSlotsPerPlane,\n      baseSize,\n      [filledLead, ...filledPlanes]\n    )\n  }\n\n  //okay now fill the rest. the first `extras` planes will get an extra\n  const remainingFilled = unfilledPlanes.map(({ position }, i) => ({\n    position,\n    filledSlots: minSlotsPerPlane + (extras > i ? 1 : 0)\n  }))\n\n  //phew\n  return [...filledPlanes, ...remainingFilled]\n}\n\n/**\n *\n * @param baseSize\n * @param planesConfig\n * @param slotOptions\n */\nconst filledPlanes = (\n  slots: number,\n  baseSize: number,\n  planesConfig: PlaneState[]\n): FilledPlane[] => {\n  const filledPlanes = planesConfig\n    .filter(\n      ({ type, slotting }) =>\n        type !== PlaneType.NONE && slotting === Slotting.FILL\n    )\n    .map(({ position, slots }) => ({ position, filledSlots: slots }))\n\n  const unfilledPlanes = planesConfig.filter(\n    ({ type, slotting }) =>\n      type !== PlaneType.NONE && slotting !== Slotting.FILL\n  )\n\n  return slotUnfilledPlanes(\n    unfilledPlanes,\n    slots - countFilledSlots(filledPlanes),\n    baseSize,\n    filledPlanes\n  )\n}\n\nexport default (\n  slots: number,\n  baseSize: number,\n  planesConfig: PlaneState[]\n): Plane[] => {\n  const slotsMap = new Map(\n    filledPlanes(slots, baseSize, planesConfig).map(\n      ({ position, filledSlots }) => [position, filledSlots]\n    )\n  )\n\n  return planesConfig.map(({ position, type }) =>\n    planeFactory(position, slotsMap.get(position)!, type)\n  )\n}\n","import { createSelector } from \"reselect\"\nimport buildSlots from \"../formation/buildSlots\"\nimport buildFormation from \"../formation/buildFormation\"\nimport getSlotOptions from \"./getSlotOptions\"\nimport buildPlanes from \"../formation/buildPlanes\"\nimport { AppState } from \"../store/reducer\"\nimport { PlaneType } from \"../store/types\"\n\nexport { default as getSlotOptions } from \"./getSlotOptions\"\n\nconst getSlots = (state: AppState) => getSlotOptions(state).slots\nconst getBaseSize = (state: AppState): number => state.formationConfig.baseSize\nconst getFilteredPlanesConfig = (state: AppState) => {\n  return state.planesConfig.filter(({ type }) => type !== PlaneType.NONE)\n}\n\nexport const getFormation = createSelector(\n  [getSlots, getBaseSize],\n  buildFormation\n)\nexport const getPlanes = createSelector(\n  [getSlots, getBaseSize, getFilteredPlanesConfig],\n  buildPlanes\n)\nexport const getAllSlots = createSelector(\n  [getFormation, getPlanes],\n  buildSlots\n)\n","import { Formation, Plane, PlaneAssignment } from \"./interfaces\"\nimport PlanePosition from \"./PlanePosition\"\nimport Polar from \"../geometry/Polar\"\nimport { PI } from \"../constants\"\nimport approxeq from \"../util/approxeq\"\nimport lapwrapper from \"./lapwrapper\"\n\n/**\n * Puts people in planes\n * @param formation\n * @param planes lead assumed to be first\n */\nexport default function planeify(\n  formation: Formation,\n  planes: Plane[]\n): PlaneAssignment[] {\n  if (planes[0].position !== PlanePosition.LEAD) {\n    throw new Error(\"lead plane should be first\")\n  }\n\n  //slotted[planeId] = array of slot indexes for plane planeId\n  const slotted = planes.map(() => [] as number[])\n\n  // ### rule based slotting ###\n  // base in lead f\n\n  slotted[0].push(...formation.baseIds)\n\n  //todo add superfloat\n\n  // ### end rule based slotting ###\n\n  //using linear assignment problem formulation\n\n  const angleScore = (slotId: number, planeId: number) => {\n    const slot = formation.slots[slotId]\n    const plane = planes[planeId]\n    const slotPosition = slot.position.plus(slot.offset)\n    const diff = Polar.unspin(slotPosition.theta - plane.theta)\n\n    //penalize if component is on other side of jumprun from plane\n    //componentTheta is component angle rotated 90 right\n    // if > pi, right side of jump run. if < pi, left side of jump run\n    const componentTheta = Polar.unspin(slot.offset.theta - PI / 2)\n    const componentPosition =\n      approxeq(componentTheta, 0) || approxeq(componentTheta, PI)\n        ? PlanePosition.LEAD\n        : componentTheta > PI\n        ? PlanePosition.RT\n        : PlanePosition.LT\n\n    const penalty =\n      componentPosition === PlanePosition.LEAD ||\n      plane.position === PlanePosition.LEAD ||\n      componentPosition === plane.position\n        ? 0\n        : PI\n\n    return Math.min(diff, 2 * PI - diff) + penalty\n  }\n\n  //   const distScore = (slotId: number, planeId: number) => {\n  //     const slot = formation.allSlots[slotId]\n  //     const plane = planes[planeId]\n  //     return Math.abs(slot.position.plus(slot.offset).distanceFrom(new Polar(100, plane.theta)))\n  //   }\n\n  //get an array of formationSlotId that are not already in slotted\n  const unslotted = Array.from(formation.slots.keys()).filter(\n    formationSlotId => !slotted.flat().includes(formationSlotId)\n  )\n\n  // planeArray is an array of planeIds, repeated for the number of slots to fill in that plane\n  const planeArray = planes.flatMap((plane, planeId) => {\n    const remainigToFill = plane.filledSlots - slotted[planeId].length\n    return (Array(remainigToFill) as number[]).fill(planeId)\n  })\n\n  //takes a scoreFun that takes a slotId and planeId,\n  //and converts it to a function that takes i, j for i, j in [0, number of unslotted people)\n  //for use with lap()\n  const cost = (scoreFun: (slotId: number, planeId: number) => number) => {\n    if (planeArray.length !== unslotted.length) {\n      throw new Error(\"planeArray and unslotted have diff lenghts\")\n    }\n\n    //memoize scoreFun\n    const memo = new Map<string, number>()\n    return (i: number, j: number): number => {\n      const key = `${i}.${j}`\n      if (!memo.has(key)) {\n        const slotId = unslotted[i]\n        const planeId = planeArray[j]\n        memo.set(key, scoreFun(slotId, planeId))\n      }\n      return memo.get(key)!\n    }\n  }\n\n  const assignments = lapwrapper(unslotted, planeArray, angleScore)\n\n  assignments.forEach(([slotId, planeId]) => slotted[planeId].push(slotId))\n\n  return slotted.flatMap((slotIds, planeId) =>\n    slotIds.map(slotId => ({ formationSlotId: slotId, planeId }))\n  )\n}\n","import { connect } from \"react-redux\"\nimport FormationComponent from \"./FormationComponent\"\nimport { getFormation, getPlanes, getAllSlots } from \"../selectors\"\nimport { AppState } from \"../store/reducer\"\nimport { FILL_FUNCTIONS, LABEL_FUNCTIONS } from \"../drawing/slotdatafuns\"\n\nconst mapStateToProps = (state: AppState) => ({\n  formation: getFormation(state),\n  planes: getPlanes(state),\n  slots: getAllSlots(state),\n  viewConfig: state.viewConfig,\n  fill: FILL_FUNCTIONS[state.viewConfig.colorBy],\n  label: LABEL_FUNCTIONS[state.viewConfig.numberBy]\n})\n\nexport default connect(mapStateToProps)(FormationComponent)\n\n// console.log({debounceRender})\n\n// export default connect(\n//     mapStateToProps\n// )(debounceRender.debounceRender(FormationComponent, 100))\n","import React, { Dispatch } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Dropdown, Icon } from \"semantic-ui-react\"\nimport { getSlotOptions } from \"../../selectors\"\nimport { formationSlots, baseSize } from \"../../store/actions\"\nimport { FormationConfigActionTypes } from \"../../store/types\"\nimport { AppState } from \"../../store/reducer\"\nimport { SlotOptions } from \"../../selectors/getSlotOptions\"\n\ntype Props = {\n  slotsOptions: SlotOptions;\n  baseSize: number;\n  onFormationSlotsSet: (slots: number) => void;\n  onBaseSizeSet: (size: number) => void;\n}\nconst Slots = (props: Props) => {\n  const {\n    slotsOptions: { min, max, slots },\n    baseSize,\n    onFormationSlotsSet,\n    onBaseSizeSet\n  } = props\n\n  const trigger = (\n    <span>\n      <Icon name=\"users\" /> <strong>Slots:</strong> {slots}\n    </span>\n  )\n\n  return (\n    <Dropdown trigger={trigger} pointing className=\"link item\">\n      <Dropdown.Menu>\n        <Dropdown.Item>\n          <span>{min} </span>\n          <input\n            type=\"range\"\n            value={slots}\n            min={min}\n            max={max}\n            onChange={e => onFormationSlotsSet(parseInt(e.target.value))}\n          />\n          <span> {max}</span>\n        </Dropdown.Item>\n        <Dropdown.Item>\n          <Dropdown\n            trigger={\n              <span>\n                <strong>Base Size</strong>: {baseSize}\n              </span>\n            }\n          >\n            <Dropdown.Menu>\n              {[4, 6, 8, 10].map(bs => (\n                <Dropdown.Item\n                  key={bs}\n                  onClick={() => onBaseSizeSet(bs)}\n                  active={baseSize === bs}\n                >\n                  {bs}\n                </Dropdown.Item>\n              ))}\n            </Dropdown.Menu>\n          </Dropdown>\n        </Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  slotsOptions: getSlotOptions(state),\n  baseSize: state.formationConfig.baseSize\n})\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch<FormationConfigActionTypes>\n) => ({\n  onFormationSlotsSet: (slots: number) => dispatch(formationSlots(slots)),\n  onBaseSizeSet: (size: number) => dispatch(baseSize(size))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Slots)\n","import {\n  SET_BASE_SIZE,\n  SET_FORMATION_SLOTS,\n  SET_FORMATION_TYPE,\n  SET_PLANE_SLOTTING,\n  SET_PLANE_TYPE,\n  SET_PLANE_SLOTS,\n  SET_COLOR_BY,\n  SET_NUMBER_BY,\n  ColorOption,\n  NumberOption,\n  PlaneType,\n  Slotting,\n  FormationType,\n  FormationConfigActionTypes,\n  PlanesConfigActionTypes,\n  ViewConfigActionTypes,\n  ShowOption,\n  SET_SHOW\n} from \"./types\"\nimport PlanePosition from \"../formation/PlanePosition\"\n\nexport const baseSize = (baseSize: number): FormationConfigActionTypes => ({\n  type: SET_BASE_SIZE,\n  baseSize\n})\n\nexport const formationSlots = (slots: number): FormationConfigActionTypes => ({\n  type: SET_FORMATION_SLOTS,\n  slots\n})\n\nexport const setFormationType = (\n  formationType: FormationType\n): FormationConfigActionTypes => ({\n  type: SET_FORMATION_TYPE,\n  formationType\n})\n\nexport const setPlaneSlotting = (\n  position: PlanePosition,\n  slotting: Slotting\n): PlanesConfigActionTypes => ({\n  type: SET_PLANE_SLOTTING,\n  position,\n  slotting\n})\n\nexport const setPlaneType = (\n  position: PlanePosition,\n  type: PlaneType\n): PlanesConfigActionTypes => ({\n  type: SET_PLANE_TYPE,\n  position,\n  planeType: type\n})\n\nexport const setPlaneSlots = (\n  position: PlanePosition,\n  slots: number\n): PlanesConfigActionTypes => ({\n  type: SET_PLANE_SLOTS,\n  position,\n  slots\n})\n\nexport const setColorBy = (colorBy: ColorOption): ViewConfigActionTypes => ({\n  type: SET_COLOR_BY,\n  colorBy\n})\n\nexport const setNumberBy = (numberBy: NumberOption): ViewConfigActionTypes => ({\n  type: SET_NUMBER_BY,\n  numberBy\n})\n\nexport const setShow = (show: ShowOption): ViewConfigActionTypes => ({\n  type: SET_SHOW,\n  show\n})\n","import React, { Dispatch } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Dropdown, Icon } from \"semantic-ui-react\"\nimport {\n  PlaneType,\n  Slotting,\n  PlanesConfigActionTypes,\n  PlaneState\n} from \"../../store/types\"\nimport {\n  setPlaneType,\n  setPlaneSlots,\n  setPlaneSlotting\n} from \"../../store/actions\"\nimport PlanePosition from \"../../formation/PlanePosition\"\nimport { AppState } from \"../../store/reducer\"\n\ntype Setters = {\n  onPlaneTypeSet: (plane: PlanePosition, type: PlaneType) => void;\n  onPlaneSlotsSet: (plane: PlanePosition, slots: number) => void;\n  onPlaneSlottingSet: (plane: PlanePosition, slotting: Slotting) => void;\n}\n\ntype PlaneMenuProps = {\n  planeConfig: PlaneState;\n  setters: Setters;\n}\nconst PlaneMenu = (props: PlaneMenuProps) => {\n  const { planeConfig, setters } = props\n  const { position, label, slotting, type, slots } = planeConfig\n  const { onPlaneSlottingSet, onPlaneTypeSet, onPlaneSlotsSet } = setters\n  const trigger = (\n    <div>\n      <strong>{label}</strong>: {type}\n      {type !== PlaneType.NONE\n        ? `, ${slots} slots, ${\n            slotting === Slotting.FILL ? \"filled\" : \"slotted evenly\"\n          }`\n        : null}\n    </div>\n  )\n\n  const types =\n    position === PlanePosition.LEAD\n      ? [PlaneType.OTTER, PlaneType.SKYVAN]\n      : [PlaneType.OTTER, PlaneType.SKYVAN, PlaneType.NONE]\n\n  const { FILL, SPLIT } = Slotting\n  const slottingDescriptions = {\n    [FILL]: \"Fill plane\",\n    [SPLIT]: \"Split evenly\"\n  }\n  const slottings = [SPLIT, FILL]\n\n  return (\n    <Dropdown.Item>\n      <Dropdown trigger={trigger} fluid>\n        <Dropdown.Menu>\n          <Dropdown.Header>Type</Dropdown.Header>\n          {types.map(t => (\n            <Dropdown.Item\n              key={t}\n              onClick={() => onPlaneTypeSet(position, t)}\n              active={type === t}\n            >\n              {t}\n            </Dropdown.Item>\n          ))}\n          <Dropdown.Divider />\n          <Dropdown.Header>Slotting</Dropdown.Header>\n          {slottings.map(s => (\n            <Dropdown.Item\n              key={s}\n              onClick={() => onPlaneSlottingSet(position, s)}\n              active={slotting === s}\n            >\n              {slottingDescriptions[s]}\n            </Dropdown.Item>\n          ))}\n          <Dropdown.Divider />\n          <Dropdown.Header>Slots: {slots}</Dropdown.Header>\n          <Dropdown.Item>\n            <span>0 </span>\n            <input\n              type=\"range\"\n              value={slots}\n              min={0}\n              max={30}\n              onChange={e =>\n                onPlaneSlotsSet(position, parseInt(e.target.value))\n              }\n            />\n            <span> {30}</span>\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </Dropdown.Item>\n  )\n}\n\ntype PlanesProps = {\n  planesConfig: PlaneState[];\n  setters: Setters;\n}\nconst Planes = (props: PlanesProps) => {\n  const { planesConfig, setters } = props\n\n  const numPlanes = planesConfig.filter(({ type }) => type !== PlaneType.NONE)\n    .length\n\n  const trigger = (\n    <span>\n      <Icon name=\"plane\" /> <strong>Planes:</strong> {numPlanes}\n    </span>\n  )\n\n  return (\n    <Dropdown trigger={trigger} item>\n      <Dropdown.Menu>\n        {planesConfig.map(planeConfig => (\n          <PlaneMenu\n            key={planeConfig.position}\n            planeConfig={planeConfig}\n            setters={setters}\n          />\n        ))}\n      </Dropdown.Menu>\n    </Dropdown>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  planesConfig: state.planesConfig\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch<PlanesConfigActionTypes>) => ({\n  setters: {\n    onPlaneTypeSet: (plane: PlanePosition, type: PlaneType) =>\n      dispatch(setPlaneType(plane, type)),\n    onPlaneSlotsSet: (plane: PlanePosition, slots: number) =>\n      dispatch(setPlaneSlots(plane, slots)),\n    onPlaneSlottingSet: (plane: PlanePosition, slotting: Slotting) =>\n      dispatch(setPlaneSlotting(plane, slotting))\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Planes)\n","import React, { Dispatch } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Dropdown, Icon } from \"semantic-ui-react\"\nimport {\n  ColorOption,\n  NumberOption,\n  ShowOption,\n  ViewConfigState,\n  ViewConfigActionTypes\n} from \"../../store/types\"\nimport { setColorBy, setNumberBy, setShow } from \"../../store/actions\"\nimport { AppState } from \"../../store/reducer\"\n\ntype Props = {\n  viewConfig: ViewConfigState;\n  onSetColorBy: (opt: ColorOption) => void;\n  onSetNumberBy: (opt: NumberOption) => void;\n  onSetShow: (opt: ShowOption) => void;\n}\nconst View = (props: Props) => {\n  const { viewConfig, onSetColorBy, onSetNumberBy, onSetShow } = props\n\n  const trigger = (\n    <span>\n      <Icon name=\"eye\" /> <strong>View</strong>\n    </span>\n  )\n\n  const colorBys = [\n    { opt: ColorOption.DEFAULT, desc: \"Default\" },\n    { opt: ColorOption.PLANE, desc: \"Plane\" },\n    { opt: ColorOption.BUILD_ORDER, desc: \"Build Order\" },\n    { opt: ColorOption.RADIAL, desc: \"Radial\" }\n  ].map(({ opt, desc }) => (\n    <Dropdown.Item\n      key={opt}\n      onClick={() => onSetColorBy(opt)}\n      active={viewConfig.colorBy === opt}\n    >\n      {desc}\n    </Dropdown.Item>\n  ))\n\n  const numberBys = [\n    { opt: NumberOption.SLOT_NUM, desc: \"Slot Number\" },\n    { opt: NumberOption.BUILD_ORDER, desc: \"Build Order\" }\n  ].map(({ opt, desc }) => (\n    <Dropdown.Item\n      key={opt}\n      onClick={() => onSetNumberBy(opt)}\n      active={viewConfig.numberBy === opt}\n    >\n      {desc}\n    </Dropdown.Item>\n  ))\n\n  const show = [\n    { opt: ShowOption.FORMATION, desc: \"Formation\" },\n    { opt: ShowOption.PLANES, desc: \"Planes\" },\n    { opt: ShowOption.BOTH, desc: \"Formation & Planes\" }\n  ].map(({ opt, desc }) => (\n    <Dropdown.Item\n      key={opt}\n      onClick={() => onSetShow(opt)}\n      active={viewConfig.show === opt}\n    >\n      {desc}\n    </Dropdown.Item>\n  ))\n\n  return (\n    <Dropdown trigger={trigger} item>\n      <Dropdown.Menu>\n        <Dropdown.Header>Color by</Dropdown.Header>\n        {colorBys}\n        <Dropdown.Divider />\n        <Dropdown.Header>Number by</Dropdown.Header>\n        {numberBys}\n        <Dropdown.Divider />\n        <Dropdown.Header>Show</Dropdown.Header>\n        {show}\n      </Dropdown.Menu>\n    </Dropdown>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  viewConfig: state.viewConfig\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch<ViewConfigActionTypes>) => ({\n  onSetColorBy: (colorBy: ColorOption) => dispatch(setColorBy(colorBy)),\n  onSetNumberBy: (numberBy: NumberOption) => dispatch(setNumberBy(numberBy)),\n  onSetShow: (show: ShowOption) => dispatch(setShow(show))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(View)\n","import React from \"react\"\nimport { Menu } from \"semantic-ui-react\"\nimport Slots from \"./config/Slots\"\nimport Planes from \"./config/Planes\"\nimport View from \"./config/View\"\n\nexport default () => (\n  <Menu size={\"mini\"} secondary>\n    <Slots />\n    <Planes />\n    <View />\n  </Menu>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\"\nimport PlanePosition from \"../formation/PlanePosition\"\nimport {\n  PlaneState,\n  FormationConfigState,\n  ViewConfigState,\n  Slotting,\n  PlaneType,\n  FormationType,\n  ColorOption,\n  NumberOption,\n  SET_PLANE_SLOTTING,\n  SET_PLANE_SLOTS,\n  SET_PLANE_TYPE,\n  SET_FORMATION_SLOTS,\n  SET_FORMATION_TYPE,\n  SET_COLOR_BY,\n  SET_NUMBER_BY,\n  SET_BASE_SIZE,\n  FormationConfigActionTypes,\n  PlanesConfigActionTypes,\n  ViewConfigActionTypes,\n  SET_SHOW,\n  ShowOption\n} from \"./types\"\n\nconst { LEAD, LT, RT } = PlanePosition\n\nconst initialPlaneState: PlaneState[] = [\n  {\n    position: LEAD,\n    label: \"Lead\",\n    slotting: Slotting.SPLIT,\n    type: PlaneType.OTTER,\n    slots: 23\n  },\n  {\n    position: LT,\n    label: \"Left Trail\",\n    slotting: Slotting.SPLIT,\n    type: PlaneType.NONE,\n    slots: 23\n  },\n  {\n    position: RT,\n    label: \"Right Trail\",\n    slotting: Slotting.SPLIT,\n    type: PlaneType.OTTER,\n    slots: 23\n  }\n]\n\nconst planesConfig = (\n  state = initialPlaneState,\n  action: PlanesConfigActionTypes\n): PlaneState[] => {\n  const position = action.position\n  return state.map(p => {\n    if (p.position !== position) {\n      return p\n    }\n    switch (action.type) {\n      case SET_PLANE_SLOTTING:\n        return { ...p, slotting: action.slotting }\n      case SET_PLANE_SLOTS:\n        return { ...p, slots: action.slots }\n      case SET_PLANE_TYPE:\n        return { ...p, type: action.planeType }\n      default:\n        return p\n    }\n  })\n}\n\nconst formationConfig = (\n  state = { slots: 42, baseSize: 6, type: FormationType.HD },\n  action: FormationConfigActionTypes\n): FormationConfigState => {\n  switch (action.type) {\n    case SET_FORMATION_SLOTS:\n      return { ...state, slots: action.slots }\n    case SET_BASE_SIZE:\n      return { ...state, baseSize: action.baseSize }\n    case SET_FORMATION_TYPE:\n      return { ...state, type: action.formationType }\n    default:\n      return state\n  }\n}\n\nconst viewConfig = (\n  state = {\n    colorBy: ColorOption.PLANE,\n    numberBy: NumberOption.SLOT_NUM,\n    show: ShowOption.BOTH\n  },\n  action: ViewConfigActionTypes\n): ViewConfigState => {\n  switch (action.type) {\n    case SET_COLOR_BY:\n      return { ...state, colorBy: action.colorBy }\n    case SET_NUMBER_BY:\n      return { ...state, numberBy: action.numberBy }\n    case SET_SHOW:\n      return { ...state, show: action.show }\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  planesConfig,\n  formationConfig,\n  viewConfig\n})\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { createStore } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport App from \"./components/App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport reducer from \"./store/reducer\"\n\nconst store = createStore(reducer, composeWithDevTools())\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from \"react\"\n\nimport { Container } from \"semantic-ui-react\"\nimport FormationContainer from \"./FormationContainer\"\nimport ConfigMenu from \"./ConfigMenu\"\n\nexport default () => (\n  <Container fluid style={{ marginTop: \"10px\", height: \"100vh\" }}>\n    <ConfigMenu />\n    <FormationContainer />\n  </Container>\n)\n"],"sourceRoot":""}